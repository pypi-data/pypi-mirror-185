animation_mode: None #@param ['None', '2D', '3D', 'Video Input'] {type:'string'}
batch_name: TimeToDisco #@param{type: 'string'}
display_rate: 20 #@param{type: 'number'}
num_samples: 6 #@param{type: 'number'}
batch_size: 1
resume_run: false
run_to_resume: latest
resume_from_frame: latest
retain_overwritten_frames: true
diffusion_sampling_mode: ddim # ['plms','ddim']
use_secondary_model: true

steps: 250 #@param [25,50,100,150,250,500,1000]{type: 'raw', allow-input: true}
width_height: [1280, 768] #@param{type: 'raw'}
width_height_for_512x512_models: [1280, 768] #@param{type: 'raw'}
width_height_for_256x256_models: [512, 448] #@param{type: 'raw'}

clip_guidance_scale: 5000 #@param{type: 'number'}
tv_scale: 0 #@param{type: 'number'}
range_scale: 150 #@param{type: 'number'}
sat_scale: 0 #@param{type: 'number'}
cutn_batches: 4 #@param{type: 'number'}
skip_augs: false #@param{type: 'boolean'}
##  Init Image Settings
init_image: None #@param{type: 'string'}
init_scale: 1000 #@param{type: 'integer'}
skip_steps: 10 #@param{type: 'integer'}
# *Make sure you set skip_steps to ~50% of your steps if you want to use an init image.*
##  Coherency Settings
# `frame_scale` tries to guide the new frame to looking like the old one. A good default is 1500.
frames_scale: 1500 #@param{type: 'integer'}
# `frame_skip_steps` will blur the previous frame - higher values will flicker less but struggle to add enough new detail to zoom into.
frames_skip_steps: "60%" #@param ['40%', '50%', '60%', '70%', '80%'] {type: 'string'}

# *For animation, you probably want to turn `cutn_batches` to 1 to make it quicker.*
##  Video Init Basic Settings
video_init_steps: 100 #@param [25,50,100,150,250,500,1000]{type: 'raw', allow-input: true}
video_init_clip_guidance_scale: 1000 #@param{type: 'number'}
video_init_tv_scale: 0.1 #@param{type: 'number'}
video_init_range_scale: 150 #@param{type: 'number'}
video_init_sat_scale: 300 #@param{type: 'number'}
video_init_cutn_batches: 4 #@param{type: 'number'}
video_init_skip_steps: 50 #@param{type: 'integer'}

##  Video Input Settings
video_init_file: init.mp4 #@param {type: 'string'}
video_init_path: ${..path.init_dir}/${.video_init_file}
extract_nth_frame: 2 #@param {type: 'number'}
persistent_frame_output_in_batch_folder: true #@param {type: 'boolean'}
video_init_seed_continuity: false #@param {type: 'boolean'}
###  Video Optical Flow Settings
video_init_flow_warp: true #@param {type: 'boolean'}
# Call optical flow from video frames and warp prev frame with flow
video_init_flow_blend: 0.999 #@param {type: 'number'} #0 - take next frame, 1 - take prev warped frame
video_init_check_consistency: false #Insert param here when ready
video_init_blend_mode: optical flow #@param ['None', 'linear', 'optical flow']
# Call optical flow from video frames and warp prev frame with flow

##  Video Init Coherency Settings
# `frame_scale` tries to guide the new frame to looking like the old one. A good default is 1500.
video_init_frames_scale: 15000 #@param{type: 'integer'}
# `frame_skip_steps` will blur the previous frame - higher values will flicker less but struggle to add enough new detail to zoom into.
video_init_frames_skip_steps: "70%" #@param ['40%', '50%', '60%', '70%', '80%'] {type: 'string'}
force_flow_generation: false #@param {type:'boolean'}

##  2D Animation Settings
# `zoom` is a multiplier of dimensions, 1 is no zoom.
# All rotations are provided in degrees.
key_frames: true #@param {type:"boolean"}
max_frames: 10000 #@param {type:"number"}
interp_spline: Linear #Do not change, currently will not look good. param ['Linear','Quadratic','Cubic']{type:"string"}
angle: "0:(0)" #@param {type:"string"}
zoom: "0: (1), 10: (1.05)" #@param {type:"string"}
translation_x: "0: (0)" #@param {type:"string"}
translation_y: "0: (0)" #@param {type:"string"}
translation_z: "0: (10.0)" #@param {type:"string"}
rotation_3d_x: "0: (0)" #@param {type:"string"}
rotation_3d_y: "0: (0)" #@param {type:"string"}
rotation_3d_z: "0: (0)" #@param {type:"string"}
midas_depth_model: dpt_large #@param {type:"string"}
midas_weight: 0.3 #@param {type:"number"}
near_plane: 200 #@param {type:"number"}
far_plane: 10000 #@param {type:"number"}
fov: 40 #@param {type:"number"}
padding_mode: border #@param {type:"string"}
sampling_mode: bicubic #@param {type:"string"}
##  Turbo Mode (3D anim only)
# (Starts after frame 10,) skips diffusion steps and just uses depth map to warp images for skipped frames.
# Speeds up rendering by 2x-4x, and may improve image coherence between frames.
# For different settings tuned for Turbo Mode, refer to the original Disco-Turbo Github: https://github.com/zippy731/disco-diffusion-turbo
turbo_mode: false #@param {type:"boolean"}
turbo_steps: "3" #@param ["2","3","4","5","6"] {type:"string"}
turbo_preroll: 10 # frames
##  VR Mode (3D anim only)
# Enables stereo rendering of left/right eye views (supporting Turbo) which use a different (fish-eye) camera projection matrix.
# Note the images you're prompting will work better if they have some inherent wide-angle aspect
# The generated images will need to be combined into left/right videos. These can then be stitched into the VR180 format.
# Google made the VR180 Creator tool but subsequently stopped supporting it. It's available for download in a few places including https://www.patrickgrunwald.de/vr180-creator-download
# The tool is not only good for stitching (videos and photos) but also for adding the correct metadata into existing videos, which is needed for services like YouTube to identify the format correctly.
# Watching YouTube VR videos isn't necessarily the easiest depending on your headset. For instance Oculus have a dedicated media studio and store which makes the files easier to access on a Quest https://creator.oculus.com/manage/mediastudio/
# The command to get ffmpeg to concat your frames for each eye is in the form: `ffmpeg -framerate 15 -i frame_%4d_l.png l.mp4` (repeat for r)
vr_mode: false #@param {type:"boolean"}
# `vr_eye_angle` is the y-axis rotation of the eyes towards the center
vr_eye_angle: 0.5 #@param{type:"number"}
# interpupillary distance (between the eyes)
vr_ipd: 5.0 #@param{type:"number"}

#### Saving ##
intermediate_saves: 0 #@param{type: 'raw'}
steps_per_checkpoint:
intermediates_in_subfolder: true #@param{type: 'boolean'}
##  Intermediate steps will save a copy at your specified intervals. You can either format it as a single integer or a list of specific steps
##  A value of `2` will save a copy at 33% and 66%. 0 will save none.
##  A value of `[5, 9, 34, 45]` will save at steps 5, 9, 34, and 45. (Make sure to include the brackets)
##  ### Advanced Settings ##
##  *There are a few extra advanced settings available if you double click this cell.*
##  *Perlin init will replace your init, so uncheck if using one.*
perlin_init: false #@param{type: 'boolean'}
perlin_mode: mixed #@param ['mixed', 'color', 'gray']
set_seed: random_seed #@param{type: 'string'}
eta: 0.8 #@param{type: 'number'}
clamp_grad: True #@param{type: 'boolean'}
clamp_max: 0.05 #@param{type: 'number'}
### EXTRA ADVANCED SETTINGS:
randomize_class: true
clip_denoised: false
fuzzy_prompt: false
rand_mag: 0.05

##  ### Cutn Scheduling ##
##  Format: `[40]*400+[20]*600` = 40 cuts for the first 400 /1000 steps, then 20 for the last 600/1000
##  cut_overview and cut_innercut are cumulative for total cutn on any given step. Overview cuts see the entire image and are good for early structure, innercuts are your standard cutn.
cut_overview: "[12]*400+[4]*600" #@param {type: 'string'}
cut_innercut: "[4]*400+[12]*600" #@param {type: 'string'}
cut_ic_pow: "[1]*1000" #@param {type: 'string'}  
cut_icgray_p: "[0.2]*400+[0]*600" #@param {type: 'string'}

#@markdown KaliYuga model settings. Refer to [cut_ic_pow](https://ezcharts.miraheze.org/wiki/Category:Cut_ic_pow) as a guide. Values between 1 and 100 all work.
pad_or_pulp_cut_overview: "[15]*100+[15]*100+[12]*100+[12]*100+[6]*100+[4]*100+[2]*200+[0]*200" #@param {type: 'string'}
pad_or_pulp_cut_innercut: "[1]*100+[1]*100+[4]*100+[4]*100+[8]*100+[8]*100+[10]*200+[10]*200" #@param {type: 'string'}
pad_or_pulp_cut_ic_pow: "[12]*300+[12]*100+[12]*50+[12]*50+[10]*100+[10]*100+[10]*300" #@param {type: 'string'}
pad_or_pulp_cut_icgray_p: "[0.87]*100+[0.78]*50+[0.73]*50+[0.64]*60+[0.56]*40+[0.50]*50+[0.33]*100+[0.19]*150+[0]*400" #@param {type: 'string'}

watercolor_cut_overview: "[14]*200+[12]*200+[4]*400+[0]*200" #@param {type: 'string'}
watercolor_cut_innercut: "[2]*200+[4]*200+[12]*400+[12]*200" #@param {type: 'string'}
watercolor_cut_ic_pow: "[12]*300+[12]*100+[12]*50+[12]*50+[10]*100+[10]*100+[10]*300" #@param {type: 'string'}
watercolor_cut_icgray_p: "[0.7]*100+[0.6]*100+[0.45]*100+[0.3]*100+[0]*600" #@param {type: 'string'}

##  ### Transformation Settings##
use_vertical_symmetry: false #@param {type:"boolean"}
use_horizontal_symmetry: false #@param {type:"boolean"}
transformation_percent: [0.09] #@param

video_output:
  skip_video_for_run_all: false
  blend: 0.5
  video_init_check_consistency: false
  # @param {type:"number"} This is the frame where the video will start
  init_frame: 1
  # @param {type:"number"} You can change i to the number of the last frame you want to generate. It will raise an error if that number of frames does not exist.
  last_frame: final_frame
  fps: 12
  view_video_in_cell: false

models: ${..model}
