# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['isinstance2']
setup_kwargs = {
    'name': 'isinstance2',
    'version': '0.1.7',
    'description': '',
    'long_description': '# isinstance2\n\n`isinstance2` is a module that provides a powerful runtime type checker for Python\'s built-in generic classes and\ngeneric type hints. It allows you to perform runtime instance type checks on objects that are instances of a generic\nclass, as well as subclass checks on generic classes, even if you don\'t know the exact type of the generic parameters.\n\n### tl;dr\n\n```python\nfrom isinstance2 import isinstance2, issubclass2\nfrom typing import Iterable\n\nassert isinstance2((1, 2.0, \'three\'), tuple[int, float, str])\nassert issubclass2(dict[str, int], dict[str, int | float])\nassert issubclass2(list[int] | set[int] | tuple[int, ...], Iterable[int])\n```\n\n## Features\n\n- Perform runtime instance and subclass checks on generic classes\n- Supports built-in generic classes such as `list`, `tuple`, `dict`, `set`, and `frozenset`, as well as `Optional`\n  and `Literal`.\n- Check if an object is an instance of a `tuple` with variadic arguments.\n- Register custom class or function with `isinstance2`\'s instance checker registry.\n\n## Installation\n\n```sh\npip install isinstance2\n```\n\n## Basic Usage\n\n### Instance Checks\n\n```python\nfrom typing import Iterable, Literal\nfrom isinstance2 import isinstance2\n\n# Basic instance checks\nassert isinstance2([1, 2, 3], list[int])\nassert isinstance2((1, 2.0, \'three\'), tuple[int, float, str])\nassert isinstance2({1, 2, 3}, set[int])\nassert isinstance2({"foo": 1, "bar": 2}, dict[str, int])\nassert isinstance2(frozenset([1, 2, \'Hi! ðŸ˜Š\', \'literally amazing\']), frozenset[int | Literal[\'Hi! ðŸ˜Š\', \'literally amazing\']])\n\n# Ellipses in tuples work\nassert isinstance2((1, \'two\', 3.0, \'four\'), tuple[int | float | str, ...])\n\n# You can also check against abstract generic classes\nassert isinstance2(range(10), Iterable[int])\nassert not isinstance2(range(10), Iterable[float])\n```\n\n### Subclass Checks\n\n```python\nfrom typing import Collection, Iterable\nfrom isinstance2 import issubclass2\n\n# Basic subclass checks\nassert issubclass2(list[int], list[int | float])\nassert issubclass2(tuple[int, float], tuple[int | float, ...])\n\n# Classes without generic parameters are presumed to match\nassert issubclass2(list, list[int])\nassert issubclass2(list[int], list)\n\n# Abstract generic classes\nassert issubclass2(list[int], Iterable[int])\nassert issubclass2(Collection[bool], Iterable[int])  # Yes, bool is a subclass of int\n```\n\n## Advanced Usage\n\nTo check if an object is an instance of a custom generic class, register it with `isinstance2`\'s instance checker\n\n```python\nfrom typing import Generic, TypeVar, Any\nfrom isinstance2 import isinstance2, register_instance_checker\n\nT = TypeVar(\'T\')\n\n\nclass MyClass(Generic[T]):\n    ...\n\n\n@register_instance_checker\ndef is_instance_of_my_class(obj: Any) -> bool:\n    return isinstance(obj, MyClass)\n\n\nassert isinstance2(MyClass(), MyClass)\n```\n\nIf you\'d prefer not to add your checkers globally, you can use `isinstance2`\'s `register` instead and pass a custom registry (which is just a `dict`).\n\n```python\nfrom typing import Generic, TypeVar\nfrom isinstance2 import register, instance_checker_registry\nfrom functools import partial\n\n# Copy the default registry\nmy_registry = instance_checker_registry.copy()\n\n# Make a custom registration function\nmy_register = partial(register, registry=my_registry)\n```\n\nNow you can use `my_register` in place of `register_instance_checker`.\n\n## Limitations\n\n- Does not yet support\n    - `TypeVar`\n    - `Container`\n    - And likely quite a few other generic classes that I\'ve missed. Please open an issue if you find one.\n  - Subclass checks for custom classes (instance checks are supported)\n- Subclass checks are, in general, unreliable.\n  - I haven\'t yet figured out how to deal with things like structural subtyping. For instance, `issubclass2(str, Iterator[int])` currently returns `True` when it clearly shouldn\'t\n  - Instance checks are somewhat simpler and shouldn\'t suffer as much from this problem.\n- Requires Python 3.11 or later\n\n## License\n\n`isinstance2` is released under the [MIT License](https://github.com/python-isinstance/isinstance2/blob/master/LICENSE).\n',
    'author': 'IsaacBreen',
    'author_email': 'mail@isaacbreen.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'py_modules': modules,
    'python_requires': '>=3.11,<4.0',
}


setup(**setup_kwargs)
