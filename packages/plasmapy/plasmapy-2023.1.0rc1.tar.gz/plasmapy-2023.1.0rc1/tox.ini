[tox]
envlist = clean,py38,build_docs
isolated_build = True
indexserver =
    NIGHTLY = https://pypi.anaconda.org/scipy-wheels-nightly/simple

[testenv]
allowlist_externals =
    /bin/bash
    /usr/bin/bash
    echo
setenv =
    MPLBACKEND = agg
    COLUMNS = 180
    PYTEST_COMMAND = pytest --pyargs plasmapy --durations=25 --showlocals
extras = tests
deps =
    astropydev: git+https://github.com/astropy/astropy
    matplotlibdev: git+https://github.com/matplotlib/matplotlib
    numpydev: :NIGHTLY:numpy
    sphinxdev: git+https://github.com/sphinx-doc/sphinx
    xarraydev: git+https://github.com/pydata/xarray
    cov: pytest-cov
    pytest-github-actions-annotate-failures
commands =
    !cov: {env:PYTEST_COMMAND} {posargs} -m 'not slow'
    all: {env:PYTEST_COMMAND} {posargs}
    cov-all: {env:PYTEST_COMMAND} {posargs} --cov=plasmapy --cov-report=xml --cov-config={toxinidir}{/}pyproject.toml --cov-append --cov-report xml:coverage.xml
description =
    run tests
    astropydev: with the development version of astropy
    matplotlibdev: with the development version of matplotlib
    numpydev: with the development version of numpy
    sphinxdev: with the development version of sphinx
    xarraydev: with the development version of xarray
    minimal: with minimal versions of dependencies
    cov: with code coverage

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:build_docs]
changedir = {toxinidir}
extras = docs
setenv =
    HOME = {envtmpdir}
commands =
    sphinx-build docs docs{/}_build{/}html -W -n --keep-going -b html {posargs}
    echo "Troubleshooting guide: https://docs.plasmapy.org/en/latest/contributing/doc_guide.html#troubleshooting"

[testenv:build_docs-sphinxdev]
changedir = {toxinidir}
extras = docs
setenv =
    HOME = {envtmpdir}
commands = sphinx-build docs docs{/}_build{/}html -W -n --keep-going -b html {posargs}
deps =
    git+https://github.com/sphinx-doc/sphinx
description =
    sphinxdev: with the development version of sphinx

[testenv:build_docs_no_examples]
changedir = {toxinidir}
extras = docs
setenv =
    HOME = {envtmpdir}
commands =
    sphinx-build -D nbsphinx_execute='never' docs docs{/}_build{/}html -b html {posargs}

# This env requires tox-conda.
[testenv:py38-conda]
basepython = python3.8
extras =
deps =
    lmfit
    pytest-cov
conda_deps =
    astropy >= 4.3.1
    h5py >= 3.0.0
    matplotlib
    mpmath
    numpy >= 1.20.0
    numpydoc
    pillow
    pytest >= 5.4.0
    scipy >= 1.5.0
    sphinx
    sphinx_rtd_theme

# This env tests minimal versions of each dependency.
[testenv:py38-all-minimal]
basepython = python3.8
extras = tests
deps =
    astropy == 5.0.1
    ipywidgets == 7.6.5
    h5py == 3.0.0
    hypothesis
    lmfit == 1.0.0
    matplotlib == 3.3.0
    mpmath == 1.2.1
    numba
    numpy == 1.19.0
    pandas == 1.0.0
    pillow
    pytest == 5.4.0
    pytest-cov
    pytest-regressions
    scipy == 1.5.0
    tqdm == 4.41.0
    voila == 0.2.15
    xarray == 0.15.0
    requests >= 2.27.1
setenv =
    PYTEST_COMMAND = pytest --pyargs plasmapy --durations=25 --showlocals

[testenv:linters]
deps =
    cffconvert
    dlint
    flake8
    flake8-absolute-import
    flake8-builtins
    flake8-comments
    flake8-implicit-str-concat
    flake8-mutable
    flake8-rst-docstrings
    flake8-simplify
    flake8-use-fstring
    flake8-use-pathlib
    pydocstyle
    pygments
    tryceratops
commands =
    flake8 --bug-report
    flake8 {toxinidir}{/}plasmapy --count --show-source --statistics
    cffconvert --validate

[testenv:py38-minimal-pypi-import]
basepython = python3.8
extras =
deps =
commands = python -c 'import plasmapy'

[testenv:codespell]
deps =
    codespell
commands_pre =
    echo
    echo "Codespell finds typos in source code. Rather than checking if each word"
    echo "matches a dictionary entry, it looks for a set of common misspellings"
    echo "in order to reduce the number of false positives."
    echo
commands =
    codespell .
commands_post =
    echo
    echo "After codespell has been installed locally (`pip install codespell`),"
    echo "running the command `codespell -i 2 -w` will interactively go through"
    echo "misspellings and suggest one or more replacements. Add any false"
    echo "positives under ignore-words-list under [codespell] in pyproject.toml."

[flake8]
convention = numpy
max-doc-length = 88
# Checks marked as TODO should be eventually enabled,
# but are failing right now. These are *great*
# first contributions. ;)
# Checks not marked by TODO *maybe* should be
# eventually enabled â€• ask!
extend-ignore =
    D105,
    D107,
    # Ignoring D202 allows blank lines to be put on either side of code "paragraphs" at the beginning of a function.
    D202,
    # D205 and D400 are ignored to allow the "one-liner" to exceed one
    # line, which is sometimes necessary for even concise descriptions of plasma
    # physics functions and classes.
    D205,
    # D302 is unnecessary as we are using Python 3.6+.
    D302,
    # D205 and D400 are ignored to allow the "one-liner" to exceed one
    # line, which is sometimes necessary for even concise descriptions of plasma
    # physics functions and classes.
    D400,
    # D403: First word of the first line should be properly capitalized ('Latex', not 'LaTeX') # Dominik: good job, pydocstyle /s
    D403,
    # E203 something something whitespace? TODO check again
    E203,
    E501,
    # E731 do not assign a lambda, use a def - Dominik: disagreed, lambdas have uses
    E731,
    F401,
    F405,
    # W605 invalid escape sequence,
    W605,
    RST210,
    RST213,
    # RST305 so that ReST substitutions in a different file can be used
    RST305,
    RST306
    # TC003 to allow long messages to be specified outside the exception class
    TC003
exclude =
    extern,
    sphinx,
    *test*,
    *parsetab.py,
    conftest.py,
    docs/conf.py,
    .jupyter
# Use rst-roles and rst-directives to list roles and directives from
# Sphinx and its extensions so that they don't get flagged when using
# flake8-rst-docstrings.
rst-roles =
    abbr
    any
    attr
    cite
    cite:ct
    cite:cts
    cite:p
    cite:ps
    cite:t
    cite:ts
    class
    command
    commit
    confval
    data
    dfn
    doc
    download
    envvar
    eq
    event
    exc
    file
    func
    guilabel
    issue
    kbd
    keyword
    makevar
    manpage
    menuselection
    meth
    mod
    numref
    option
    orcid
    pep
    pr
    program
    ref
    regexp
    rst:dir
    samp
    term
    token
    user
    wikipedia
rst-directives =
    codeauthor
    confval
    deprecated
    event
    highlight
    hlist
    index
    literalinclude
    nbgallery
    only
    rst:directive
    samp
    sectionauthor
    seealso
    tabularcolumns
    todo
    versionadded
    versionchanged
enable-extensions =
    # Look for strings that have {} in them but aren't f-strings.
    # If there is a false positive from this in a file, put that in
    # per-file-ignores.
    FS003
    W505
per-file-ignores =
    plasmapy/__init__.py:FS003
    plasmapy/analysis/fit_functions.py:RST499
    # The nullpoint.py ignore is temporary pending #1554
    plasmapy/analysis/nullpoint.py:SIM102,SIM103
    plasmapy/diagnostics/charged_particle_radiography/synthetic_radiography.py:FS003,W505
    plasmapy/diagnostics/charged_particle_radiography/detector_stacks.py:FS003,W505
    plasmapy/formulary/__init__.py:E402,F403
    plasmapy/formulary/collisions/__init__.py:E402,F403
    plasmapy/formulary/collisions/lengths.py:SIM114
    # The decorators.py ignore is temporary pending #1057
    plasmapy/particles/decorators.py:SIM102
    plasmapy/particles/ionization_state_collection.py:SIM102
    # Files with long lines in docstrings
    plasmapy/analysis/swept_langmuir/ion_saturation_current.py:W505
    plasmapy/formulary/collisions/frequencies.py:W505
    plasmapy/formulary/relativity.py:W505
    plasmapy/simulation/particle_integrators.py:W505
