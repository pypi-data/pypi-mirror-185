{"version":3,"file":"static/js/68.e7db9fa0.chunk.js","mappings":"2KASA,IANgB,SAAH,OAAMA,EAAO,EAAPA,QAAO,OACxB,SAAC,IAAQ,CAACC,KAAMD,EAASE,MAAO,CAAEC,OAAQ,KAAM,UAC9C,SAAC,IAAgB,CAACC,MAAM,aACf,C,sUCcPC,GAAWC,EAAAA,EAAAA,IAAW,SAACC,GAAK,MAAM,CACtCC,KAAM,CACJC,QAASF,EAAMG,QAAQ,IAEzBC,MAAO,CACLF,QAASF,EAAMG,QAAQ,GACvBE,UAAWL,EAAMG,QAAQ,GACzBG,aAAcN,EAAMG,QAAQ,IAE9BI,MAAO,CACLC,WAAY,QAEdC,IAAK,CACHH,aAAcN,EAAMG,QAAQ,IAE/B,IA2MD,EAzMuB,WAAO,IAAD,EACrBO,EAAUZ,IAChB,EChC2B,WAC3B,IAAMa,GAASC,EAAAA,EAAAA,MACf,GAA8BC,EAAAA,EAAAA,UAAS,QAAO,eAAvCC,EAAW,KAAEC,EAAM,KAC1B,GAAsBF,EAAAA,EAAAA,UAAS,6BAA4B,eAApDG,EAAG,KAAEC,EAAM,KACVC,GAAiBC,EAAAA,EAAAA,YAAWC,EAAAA,IAA5BF,aACR,GAAmCL,EAAAA,EAAAA,WAAS,GAAK,eAA1CQ,EAAY,KAAEC,EAAU,KAK/B,GAA6BC,EAAAA,EAAAA,IAC3B,CAAC,gBAAiBZ,EAAOa,IAAG,yCAC5B,WAAOC,EAAGC,GAAM,qGACSC,EAAAA,EAAAA,GAAcD,GAAQ,KAAD,EAU3C,GAV2C,SAApCE,EAAI,EAAJA,KACMC,EAAyBD,EAA/BA,KAAeZ,EAAgBY,EAAhBZ,IAAKc,EAAWF,EAAXE,OAExBd,GACFC,EAAOD,IAGM,IAAXc,IACFb,EAAO,2CACPK,GAAW,IAGF,OAAPO,QAAO,IAAPA,IAAAA,EAASE,OAAM,yCACVF,EAAQE,QAAM,2CAExB,qDAjB2B,GAkB5B,CAAEC,gBAAiBX,EAAeY,EAAAA,EAA0B,IAnBhDC,EAAU,EAAhBN,KA2BR,MAAO,CACLjB,OAAAA,EACAG,YAAAA,EACAoB,WAAAA,EACAlB,IAAAA,EACAK,aAAAA,EACAc,gBArCsB,SAACC,GACvBd,EAAWc,EAAMC,OAAOC,QAC1B,EAoCEC,OAZuB,OAAVL,QAAU,IAAVA,OAAU,EAAVA,EAAYK,OAazBC,aAZmB,SAACJ,EAA8BK,GAClD1B,EAAO0B,EACT,EAWEvB,aAAAA,EAEJ,CDPMwB,GARF/B,EAAM,EAANA,OACAG,EAAW,EAAXA,YACAoB,EAAU,EAAVA,WACAlB,EAAG,EAAHA,IACAK,EAAY,EAAZA,aACAc,EAAe,EAAfA,gBACAI,EAAM,EAANA,OACAC,EAAY,EAAZA,aAGF,OACE,iBAAKG,UAAWjC,EAAQT,KAAK,WAC3B,SAAC2C,EAAA,EAAO,CAACnD,QAASuB,EAAI6B,WAAW,cACjC,UAACC,EAAA,EAAS,CAACC,MAAK,iBAAYpC,EAAOa,IAAK,WACtC,SAACwB,EAAA,EAAU,CACTC,KAAK,OACLC,QAAkB,OAAVhB,QAAU,IAAVA,GAAkB,QAAR,EAAVA,EAAYK,cAAM,WAAR,EAAV,EAAoBY,QAAS,aAEvC,kBAAM,iBAEN,SAACC,EAAA,EAAM,CACLd,QAASjB,EACTgC,SAAUlB,EACVmB,KAAK,UACLC,WAAY,CAAE,aAAc,yBAE9B,kBAAM,mBACWvC,MAEnB,UAAC8B,EAAA,EAAS,CAACC,MAAM,cAAa,WAC5B,UAACS,EAAA,EAAI,CACHC,MAAO3C,EACPuC,SAAUb,EACVG,UAAWjC,EAAQD,IAAI,WAEvB,SAACiD,EAAA,EAAG,CAACD,MAAM,OAAOlD,MAAM,UACxB,SAACmD,EAAA,EAAG,CAACD,MAAM,SAASlD,MAAM,YAC1B,SAACmD,EAAA,EAAG,CACFD,MAAM,SACNlD,MAAK,mBAAuB,OAAV2B,QAAU,IAAVA,OAAU,EAAVA,EAAYyB,QAAQC,SAAU,EAAC,QAEnD,SAACF,EAAA,EAAG,CACFD,MAAM,QACNlD,MAAK,iBACHsD,OAAOC,QAAiB,OAAV5B,QAAU,IAAVA,OAAU,EAAVA,EAAY6B,SAAU,CAAC,GAAGH,QAAU,EAAC,UAIxD1B,GAA8B,SAAhBpB,IACb,iBAAK6B,UAAWjC,EAAQN,MAAM,WAC5B,UAAC4D,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,WACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,sBAAgB,IAC7C2B,EAAWkC,aAEd,UAACJ,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,gBAAS,IAAE2B,EAAWmC,UAGxD,UAACL,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,WACzB,SAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,WACVjC,EAAWoC,OACV,UAAC,WAAc,YACb,gBAAK3B,UAAWjC,EAAQH,MAAM,gCAA0B,IACvD2B,EAAWoC,KAAK,GAAE,KAAIpC,EAAWoC,KAAK,SAI7C,UAACN,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,8BAAwB,KAC3C,OAAV2B,QAAU,IAAVA,OAAU,EAAVA,EAAYqC,QAAQ,KACnBrC,EAAWqC,QAAQ,GAChBC,KAAI,SAACC,GAAC,OAAKC,OAAOD,GAAGE,QAAQ,EAAE,IAC/BC,KAAK,YAGd,UAACZ,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,WACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,sCAAgC,KACnD,OAAV2B,QAAU,IAAVA,OAAU,EAAVA,EAAYqC,QAAQ,KACnBrC,EAAWqC,QAAQ,GAChBC,KAAI,SAACC,GAAC,OAAKC,OAAOD,GAAGE,QAAQ,EAAE,IAC/BC,KAAK,SAEZ,UAACZ,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,uBAAiB,IAC9CsE,IAA4B,IAAtB3C,EAAW4C,UAAiBC,OACjC,8BAIN,UAACf,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,WACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,sBAAgB,KAC7CyE,EAAAA,EAAAA,GAA0B,OAAV9C,QAAU,IAAVA,OAAU,EAAVA,EAAY+C,aAAa,IAAG,SAE/C,UAACjB,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,0BAAoB,KACjDyE,EAAAA,EAAAA,GAA0B,OAAV9C,QAAU,IAAVA,OAAU,EAAVA,EAAY+C,aAAa,IAAG,YAGjD,UAACjB,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,WACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,oBAAc,KACjC,OAAV2B,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,OACX,UAACC,EAAA,EAAa,CACZC,IAAKV,QAAiB,OAAVxC,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,KAAe,OAAVhD,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,KACjDG,MAAiB,OAAVnD,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,GAAG,WAEzBF,EAAAA,EAAAA,IAA0B,OAAV9C,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,KAAe,OAAVhD,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,KAAG,KACxDF,EAAAA,EAAAA,GAA0B,OAAV9C,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,IAAG,IAAa,OAAVhD,QAAU,IAAVA,OAAU,EAAVA,EAAYgD,IAAI,GAAE,YAI/D,UAAClB,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,iBAAW,KACzC,UAAC4E,EAAA,EAAa,CAACC,IAAKV,OAAOxC,EAAWoD,KAAMD,MAAO,IAAI,UACpDnD,EAAWoD,IAAG,cAIrB,SAACtB,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,UACd,OAAV+B,QAAU,IAAVA,OAAU,EAAVA,EAAYqD,OACX1B,OAAO2B,QAAkB,OAAVtD,QAAU,IAAVA,OAAU,EAAVA,EAAYqD,MAAMf,KAAI,+BAAEiB,EAAI,KAAEC,EAAG,YAC9C,UAAC1B,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAE,WACf,iBAAKxB,UAAWjC,EAAQH,MAAM,mBAAQkF,EAAI,OAAS,IAClDC,IACC,UAACP,EAAA,EAAa,CAACC,IAAKV,OAAOgB,EAAIC,MAAON,MAAOK,EAAIL,MAAM,WACpDL,EAAAA,EAAAA,GAAgBU,EAAIC,MAAK,KAAGX,EAAAA,EAAAA,GAAgBU,EAAIL,OAAM,IACrDK,EAAIE,QAAO,OAAKZ,EAAAA,EAAAA,GAAgBU,EAAIG,MAAK,cAL1BJ,EAQhB,OAGb,SAACzB,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,UACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,kBAAY,KAC1C,SAAC,KAAI,CAACuF,GAAE,eAAUC,mBAAmB7D,EAAW8D,SAAU,yBAOjEzD,GAAUsB,OAAOoC,KAAK1D,GAAQqB,OAAS,GAAqB,WAAhB9C,IAC3C,SAAC,WAAc,WACb,iBAAK6B,UAAWjC,EAAQN,MAAM,WAC5B,SAAC4D,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,UACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,sBAC9B,mBACA,gBAAKZ,MAAO,CAAEuG,OAAQ,IAAKC,SAAU,QAAS,SACjC,OAAVjE,QAAU,IAAVA,OAAU,EAAVA,EAAYkE,QAAQxB,KAAK,aAIhC,UAACZ,EAAA,EAAI,CAACC,WAAS,EAAC9D,QAAS,EAAE,WACzB,UAAC6D,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,iBAAU,IAAQ,OAANgC,QAAM,IAANA,OAAM,EAANA,EAAQ8D,QAEpD,UAACrC,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,yBAAmB,IAC1C,OAANgC,QAAM,IAANA,OAAM,EAANA,EAAQ+D,eAEX,UAACtC,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,aACX,gBAAKxB,UAAWjC,EAAQH,MAAM,+BAAyB,IAChD,OAANgC,QAAM,IAANA,OAAM,EAANA,EAAQgE,4BAMR,OAAVrE,QAAU,IAAVA,OAAU,EAAVA,EAAYyB,UAA2B,WAAhB7C,IACtB,SAAC,WAAc,WACb,SAAC0F,EAAA,EAAc,CAAC7D,UAAWjC,EAAQN,MAAM,UACvC,SAAC,IAAiB,CAChBuD,QAAmB,OAAVzB,QAAU,IAAVA,OAAU,EAAVA,EAAYyB,QACrB8C,SAAoB,OAAVvE,QAAU,IAAVA,OAAU,EAAVA,EAAY6B,cAKnB,OAAV7B,QAAU,IAAVA,OAAU,EAAVA,EAAY6B,SAA0B,UAAhBjD,IACrB,SAAC,WAAc,WACb,SAAC0F,EAAA,EAAc,CAAC7D,UAAWjC,EAAQN,MAAM,UACvC,SAACsG,EAAA,EAAU,CACT3C,OAAQ7B,EAAW6B,OACnBJ,QAAmB,OAAVzB,QAAU,IAAVA,OAAU,EAAVA,EAAYyB,mBAQrC,C","sources":["components/Loading.tsx","pages/node/NodeDetail.tsx","pages/node/hook/useNodeDetail.ts"],"sourcesContent":["import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import {\n  Grid,\n  makeStyles,\n  Switch,\n  Tab,\n  TableContainer,\n  Tabs,\n} from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ActorTable from \"../../components/ActorTable\";\nimport Loading from \"../../components/Loading\";\nimport PercentageBar from \"../../components/PercentageBar\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport TitleCard from \"../../components/TitleCard\";\nimport RayletWorkerTable from \"../../components/WorkerTable\";\nimport { memoryConverter } from \"../../util/converter\";\nimport { useNodeDetail } from \"./hook/useNodeDetail\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  label: {\n    fontWeight: \"bold\",\n  },\n  tab: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst NodeDetailPage = () => {\n  const classes = useStyle();\n  const {\n    params,\n    selectedTab,\n    nodeDetail,\n    msg,\n    isRefreshing,\n    onRefreshChange,\n    raylet,\n    handleChange,\n  } = useNodeDetail();\n\n  return (\n    <div className={classes.root}>\n      <Loading loading={msg.startsWith(\"Loading\")} />\n      <TitleCard title={`NODE - ${params.id}`}>\n        <StatusChip\n          type=\"node\"\n          status={nodeDetail?.raylet?.state || \"LOADING\"}\n        />\n        <br />\n        Auto Refresh:\n        <Switch\n          checked={isRefreshing}\n          onChange={onRefreshChange}\n          name=\"refresh\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n        <br />\n        Request Status: {msg}\n      </TitleCard>\n      <TitleCard title=\"Node Detail\">\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          className={classes.tab}\n        >\n          <Tab value=\"info\" label=\"Info\" />\n          <Tab value=\"raylet\" label=\"Raylet\" />\n          <Tab\n            value=\"worker\"\n            label={`Worker (${nodeDetail?.workers.length || 0})`}\n          />\n          <Tab\n            value=\"actor\"\n            label={`Actor (${\n              Object.values(nodeDetail?.actors || {}).length || 0\n            })`}\n          />\n        </Tabs>\n        {nodeDetail && selectedTab === \"info\" && (\n          <div className={classes.paper}>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Hostname</div>{\" \"}\n                {nodeDetail.hostname}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>IP</div> {nodeDetail.ip}\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                {nodeDetail.cpus && (\n                  <React.Fragment>\n                    <div className={classes.label}>CPU (Logic/Physic)</div>{\" \"}\n                    {nodeDetail.cpus[0]}/ {nodeDetail.cpus[1]}\n                  </React.Fragment>\n                )}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>Load (1/5/15min)</div>{\" \"}\n                {nodeDetail?.loadAvg[0] &&\n                  nodeDetail.loadAvg[0]\n                    .map((e) => Number(e).toFixed(2))\n                    .join(\"/\")}\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Load per CPU (1/5/15min)</div>{\" \"}\n                {nodeDetail?.loadAvg[1] &&\n                  nodeDetail.loadAvg[1]\n                    .map((e) => Number(e).toFixed(2))\n                    .join(\"/\")}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>Boot Time</div>{\" \"}\n                {dayjs(nodeDetail.bootTime * 1000).format(\n                  \"YYYY/MM/DD HH:mm:ss\",\n                )}\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Sent Tps</div>{\" \"}\n                {memoryConverter(nodeDetail?.networkSpeed[0])}/s\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>Recieved Tps</div>{\" \"}\n                {memoryConverter(nodeDetail?.networkSpeed[1])}/s\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Memory</div>{\" \"}\n                {nodeDetail?.mem && (\n                  <PercentageBar\n                    num={Number(nodeDetail?.mem[0] - nodeDetail?.mem[1])}\n                    total={nodeDetail?.mem[0]}\n                  >\n                    {memoryConverter(nodeDetail?.mem[0] - nodeDetail?.mem[1])}/\n                    {memoryConverter(nodeDetail?.mem[0])}({nodeDetail?.mem[2]}%)\n                  </PercentageBar>\n                )}\n              </Grid>\n              <Grid item xs>\n                <div className={classes.label}>CPU</div>{\" \"}\n                <PercentageBar num={Number(nodeDetail.cpu)} total={100}>\n                  {nodeDetail.cpu}%\n                </PercentageBar>\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              {nodeDetail?.disk &&\n                Object.entries(nodeDetail?.disk).map(([path, obj]) => (\n                  <Grid item xs={6} key={path}>\n                    <div className={classes.label}>Disk ({path})</div>{\" \"}\n                    {obj && (\n                      <PercentageBar num={Number(obj.used)} total={obj.total}>\n                        {memoryConverter(obj.used)}/{memoryConverter(obj.total)}\n                        ({obj.percent}%, {memoryConverter(obj.free)} free)\n                      </PercentageBar>\n                    )}\n                  </Grid>\n                ))}\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs>\n                <div className={classes.label}>Logs</div>{\" \"}\n                <Link to={`/log/${encodeURIComponent(nodeDetail.logUrl)}`}>\n                  log\n                </Link>\n              </Grid>\n            </Grid>\n          </div>\n        )}\n        {raylet && Object.keys(raylet).length > 0 && selectedTab === \"raylet\" && (\n          <React.Fragment>\n            <div className={classes.paper}>\n              <Grid container spacing={2}>\n                <Grid item xs>\n                  <div className={classes.label}>Command</div>\n                  <br />\n                  <div style={{ height: 200, overflow: \"auto\" }}>\n                    {nodeDetail?.cmdline.join(\" \")}\n                  </div>\n                </Grid>\n              </Grid>\n              <Grid container spacing={2}>\n                <Grid item xs>\n                  <div className={classes.label}>Pid</div> {raylet?.pid}\n                </Grid>\n                <Grid item xs>\n                  <div className={classes.label}>Workers Num</div>{\" \"}\n                  {raylet?.numWorkers}\n                </Grid>\n                <Grid item xs>\n                  <div className={classes.label}>Node Manager Port</div>{\" \"}\n                  {raylet?.nodeManagerPort}\n                </Grid>\n              </Grid>\n            </div>\n          </React.Fragment>\n        )}\n        {nodeDetail?.workers && selectedTab === \"worker\" && (\n          <React.Fragment>\n            <TableContainer className={classes.paper}>\n              <RayletWorkerTable\n                workers={nodeDetail?.workers}\n                actorMap={nodeDetail?.actors}\n              />\n            </TableContainer>\n          </React.Fragment>\n        )}\n        {nodeDetail?.actors && selectedTab === \"actor\" && (\n          <React.Fragment>\n            <TableContainer className={classes.paper}>\n              <ActorTable\n                actors={nodeDetail.actors}\n                workers={nodeDetail?.workers}\n              />\n            </TableContainer>\n          </React.Fragment>\n        )}\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default NodeDetailPage;\n","import { useContext, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport { GlobalContext } from \"../../../App\";\nimport { API_REFRESH_INTERVAL_MS } from \"../../../common/constants\";\nimport { getNodeDetail } from \"../../../service/node\";\n\nexport const useNodeDetail = () => {\n  const params = useParams() as { id: string };\n  const [selectedTab, setTab] = useState(\"info\");\n  const [msg, setMsg] = useState(\"Loading the node infos...\");\n  const { namespaceMap } = useContext(GlobalContext);\n  const [isRefreshing, setRefresh] = useState(true);\n  const onRefreshChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n\n  const { data: nodeDetail } = useSWR(\n    [\"useNodeDetail\", params.id],\n    async (_, nodeId) => {\n      const { data } = await getNodeDetail(nodeId);\n      const { data: rspData, msg, result } = data;\n\n      if (msg) {\n        setMsg(msg);\n      }\n\n      if (result === false) {\n        setMsg(\"Node Query Error Please Check Node Name\");\n        setRefresh(false);\n      }\n\n      if (rspData?.detail) {\n        return rspData.detail;\n      }\n    },\n    { refreshInterval: isRefreshing ? API_REFRESH_INTERVAL_MS : 0 },\n  );\n\n  const raylet = nodeDetail?.raylet;\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setTab(newValue);\n  };\n\n  return {\n    params,\n    selectedTab,\n    nodeDetail,\n    msg,\n    isRefreshing,\n    onRefreshChange,\n    raylet,\n    handleChange,\n    namespaceMap,\n  };\n};\n"],"names":["loading","open","style","zIndex","color","useStyle","makeStyles","theme","root","padding","spacing","paper","marginTop","marginBottom","label","fontWeight","tab","classes","params","useParams","useState","selectedTab","setTab","msg","setMsg","namespaceMap","useContext","GlobalContext","isRefreshing","setRefresh","useSWR","id","_","nodeId","getNodeDetail","data","rspData","result","detail","refreshInterval","API_REFRESH_INTERVAL_MS","nodeDetail","onRefreshChange","event","target","checked","raylet","handleChange","newValue","useNodeDetail","className","Loading","startsWith","TitleCard","title","StatusChip","type","status","state","Switch","onChange","name","inputProps","Tabs","value","Tab","workers","length","Object","values","actors","Grid","container","item","xs","hostname","ip","cpus","loadAvg","map","e","Number","toFixed","join","dayjs","bootTime","format","memoryConverter","networkSpeed","mem","PercentageBar","num","total","cpu","disk","entries","path","obj","used","percent","free","to","encodeURIComponent","logUrl","keys","height","overflow","cmdline","pid","numWorkers","nodeManagerPort","TableContainer","actorMap","ActorTable"],"sourceRoot":""}