{"version":3,"file":"static/js/940.f3fcc7fd.chunk.js","mappings":"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","sources":["common/DurationText/DurationText.tsx","common/RowStyles.tsx","common/constants.ts","components/ActorTable.tsx","components/PercentageBar.tsx","components/SearchComponent.tsx","components/StatesCounter.tsx","components/Tooltip.tsx","util/func.tsx","components/WorkerTable.tsx","util/converter.ts"],"sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React, { useEffect, useState } from \"react\";\n\ntype DurationTextProps = {\n  startTime: Date | number;\n  endTime?: Date | number | null;\n};\n\n/**\n * Component that shows an incrementing duration text.\n * This component will smartly rerender more often depending on the size of the duration.\n */\nexport const DurationText = ({ startTime, endTime }: DurationTextProps) => {\n  // Increments to force a re-render.\n  const [, setRerenderCounter] = useState(0);\n\n  // Assume current time, if end time is nullish\n  const endTimeToRender = endTime ? endTime : new Date();\n  const duration = dayjs.duration(\n    dayjs(endTimeToRender).diff(dayjs(startTime)),\n  );\n\n  let durationText: string;\n  let refreshInterval = 1000;\n  if (duration.asMinutes() < 1) {\n    durationText = duration.format(\"s[s]\");\n  } else if (duration.asHours() < 1) {\n    durationText = duration.format(\"m[m] s[s]\");\n  } else if (duration.asDays() < 1) {\n    // Only refresh once per minute\n    durationText = duration.format(\"H[h] m[m]\");\n    refreshInterval = 1000 * 60;\n  } else if (duration.asMonths() < 1) {\n    // Only refresh once per minute\n    durationText = duration.format(\"D[d] H[h]\");\n    refreshInterval = 1000 * 60;\n  } else if (duration.asYears() < 1) {\n    // Only refresh once per hour\n    durationText = duration.format(\"M[M] D[d]\");\n    refreshInterval = 1000 * 60 * 60;\n  } else {\n    // Only refresh once per hour\n    durationText = duration.format(\"Y[y] M[M] D[d]\");\n    refreshInterval = 1000 * 60 * 60;\n  }\n\n  useEffect(() => {\n    if (!endTime) {\n      // Only refresh if this is running job\n      const timeout = setInterval(() => {\n        setRerenderCounter((counter) => counter + 1);\n      }, refreshInterval);\n      return () => {\n        clearInterval(timeout);\n      };\n    }\n  }, [endTime, refreshInterval]);\n\n  return <Typography>{durationText}</Typography>;\n};\n","import { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nconst rowStyles = makeStyles((theme) =>\n  createStyles({\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    idCol: {\n      display: \"block\",\n      width: \"50px\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    OverflowCol: {\n      display: \"block\",\n      width: \"100px\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    helpInfo: {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n);\n\nexport default rowStyles;\n","export const API_REFRESH_INTERVAL_MS = 4000;\n","import {\n  Box,\n  InputAdornment,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport { orange } from \"@material-ui/core/colors\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { DurationText } from \"../common/DurationText\";\nimport rowStyles from \"../common/RowStyles\";\nimport { Actor } from \"../type/actor\";\nimport { Worker } from \"../type/worker\";\nimport { useFilter } from \"../util/hook\";\nimport StateCounter from \"./StatesCounter\";\nimport { StatusChip } from \"./StatusChip\";\nimport { HelpInfo } from \"./Tooltip\";\nimport RayletWorkerTable, { ExpandableTableRow } from \"./WorkerTable\";\n\nconst ActorTable = ({\n  actors = {},\n  workers = [],\n}: {\n  actors: { [actorId: string]: Actor };\n  workers?: Worker[];\n}) => {\n  const [pageNo, setPageNo] = useState(1);\n  const { changeFilter, filterFunc } = useFilter();\n  const [pageSize, setPageSize] = useState(10);\n  const { ipLogMap } = useContext(GlobalContext);\n  const actorList = Object.values(actors || {}).filter(filterFunc);\n  const list = actorList.slice((pageNo - 1) * pageSize, pageNo * pageSize);\n  const classes = rowStyles();\n\n  const columns = [\n    { label: \"\" },\n    { label: \"ID\" },\n    {\n      label: \"Class\",\n      helpInfo: (\n        <Typography>\n          The class name of the actor. For example, the below actor has a class\n          name \"Actor\".\n          <br />\n          <br />\n          @ray.remote\n          <br />\n          class Actor:\n          <br />\n          &emsp;pass\n          <br />\n        </Typography>\n      ),\n    },\n    {\n      label: \"Name\",\n      helpInfo: (\n        <Typography>\n          The name of the actor given by the \"name\" argument. For example, this\n          actor's name is \"unique_name\".\n          <br />\n          <br />\n          Actor.options(name=\"unique_name\").remote()\n        </Typography>\n      ),\n    },\n    {\n      label: \"State\",\n      helpInfo: (\n        <Typography>\n          The state of the actor. States are documented as a \"ActorState\" in the\n          \"gcs.proto\" file.\n        </Typography>\n      ),\n    },\n    {\n      label: \"Actions\",\n      helpInfo: (\n        <Typography>\n          A list of actions performable on this actor.\n          <br />\n          - Log: view log messages of this actor. Only available if a node is\n          alive.\n          <br />\n          - Stack Trace: Get a stacktrace of the alive actor.\n          <br />- Flame Graph: Get a flamegraph for the next 5 seconds of an\n          alive actor.\n        </Typography>\n      ),\n    },\n    { label: \"Uptime\" },\n    { label: \"Job Id\" },\n    { label: \"Pid\" },\n    { label: \"IP\" },\n    {\n      label: \"Restarted\",\n      helpInfo: (\n        <Typography>\n          The total number of the count this actor has been restarted.\n        </Typography>\n      ),\n    },\n    {\n      label: \"Required Resources\",\n      helpInfo: (\n        <Typography>\n          The required Ray resources to start an actor.\n          <br />\n          For example, this actor has GPU:1 required resources.\n          <br />\n          <br />\n          @ray.remote(num_gpus=1)\n          <br />\n          class Actor:\n          <br />\n          &emsp;pass\n          <br />\n        </Typography>\n      ),\n    },\n    {\n      label: \"Exit Detail\",\n      helpInfo: (\n        <Typography>\n          The detail of an actor exit. Only available when an actor is dead.\n        </Typography>\n      ),\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <div style={{ flex: 1, display: \"flex\", alignItems: \"center\" }}>\n        <Autocomplete\n          style={{ margin: 8, width: 120 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.state)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"state\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"State\" />\n          )}\n        />\n        <Autocomplete\n          style={{ margin: 8, width: 150 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.address?.ipAddress)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"address.ipAddress\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"IP\" />\n          )}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"PID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"pid\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Name\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"name\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Actor ID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"actorId\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Page Size\"\n          size=\"small\"\n          defaultValue={10}\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              setPageSize(Math.min(Number(value), 500) || 10);\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">Per Page</InputAdornment>\n            ),\n          }}\n        />\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <div>\n          <Pagination\n            page={pageNo}\n            onChange={(e, num) => setPageNo(num)}\n            count={Math.ceil(actorList.length / pageSize)}\n          />\n        </div>\n        <div>\n          <StateCounter type=\"actor\" list={actorList} />\n        </div>\n      </div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {columns.map(({ label, helpInfo }) => (\n              <TableCell align=\"center\" key={label}>\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                  {label}\n                  {helpInfo && (\n                    <HelpInfo className={classes.helpInfo}>{helpInfo}</HelpInfo>\n                  )}\n                </Box>\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map(\n            ({\n              actorId,\n              actorClass,\n              jobId,\n              pid,\n              address,\n              state,\n              name,\n              numRestarts,\n              startTime,\n              endTime,\n              exitDetail,\n              requiredResources,\n            }) => (\n              <ExpandableTableRow\n                length={\n                  workers.filter(\n                    (e) =>\n                      e.pid === pid &&\n                      address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                  ).length\n                }\n                expandComponent={\n                  <RayletWorkerTable\n                    actorMap={{}}\n                    workers={workers.filter(\n                      (e) =>\n                        e.pid === pid &&\n                        address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                    )}\n                    mini\n                  />\n                }\n                key={actorId}\n              >\n                <TableCell align=\"center\">\n                  <Tooltip\n                    className={classes.idCol}\n                    title={actorId}\n                    arrow\n                    interactive\n                  >\n                    <div>{actorId}</div>\n                  </Tooltip>\n                </TableCell>\n                <TableCell align=\"center\">{actorClass}</TableCell>\n                <TableCell align=\"center\">{name ? name : \"-\"}</TableCell>\n                <TableCell align=\"center\">\n                  <StatusChip type=\"actor\" status={state} />\n                </TableCell>\n                <TableCell align=\"center\">\n                  {ipLogMap[address?.ipAddress] && (\n                    <React.Fragment>\n                      <Link\n                        target=\"_blank\"\n                        to={`/log/${encodeURIComponent(\n                          ipLogMap[address?.ipAddress],\n                        )}?fileName=${jobId}-${pid}`}\n                      >\n                        Log\n                      </Link>\n                      <br />\n                      <a\n                        href={`/worker/traceback?pid=${pid}&ip=${address?.ipAddress}&native=0`}\n                        target=\"_blank\"\n                        title=\"Sample the current Python stack trace for this worker.\"\n                        rel=\"noreferrer\"\n                      >\n                        Stack&nbsp;Trace\n                      </a>\n                      <br />\n                      <a\n                        href={`/worker/cpu_profile?pid=${pid}&ip=${address?.ipAddress}&duration=5&native=0`}\n                        target=\"_blank\"\n                        title=\"Profile the Python worker for 5 seconds (default) and display a flame graph.\"\n                        rel=\"noreferrer\"\n                      >\n                        Flame&nbsp;Graph\n                      </a>\n                      <br />\n                    </React.Fragment>\n                  )}\n                </TableCell>\n                <TableCell align=\"center\">\n                  {startTime && startTime > 0 ? (\n                    <DurationText startTime={startTime} endTime={endTime} />\n                  ) : (\n                    \"-\"\n                  )}\n                </TableCell>\n                <TableCell align=\"center\">{jobId}</TableCell>\n                <TableCell align=\"center\">{pid ? pid : \"-\"}</TableCell>\n                <TableCell align=\"center\">\n                  {address?.ipAddress ? address?.ipAddress : \"-\"}\n                </TableCell>\n                <TableCell\n                  align=\"center\"\n                  style={{\n                    color: Number(numRestarts) > 0 ? orange[500] : \"inherit\",\n                  }}\n                >\n                  {numRestarts}\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Tooltip\n                    className={classes.OverflowCol}\n                    title={Object.entries(requiredResources || {}).map(\n                      ([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}: {val}\n                        </div>\n                      ),\n                    )}\n                    arrow\n                    interactive\n                  >\n                    <div>\n                      {Object.entries(requiredResources || {})\n                        .map(([key, val]) => `${key}: ${val}`)\n                        .join(\", \")}\n                    </div>\n                  </Tooltip>\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Tooltip\n                    className={classes.OverflowCol}\n                    title={exitDetail}\n                    arrow\n                    interactive\n                  >\n                    <div>{exitDetail}</div>\n                  </Tooltip>\n                </TableCell>\n              </ExpandableTableRow>\n            ),\n          )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default ActorTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    background: \"linear-gradient(45deg, #21CBF3ee 30%, #2196F3ee 90%)\",\n    border: `1px solid #ffffffbb`,\n    padding: \"0 12px\",\n    height: 18,\n    lineHeight: \"18px\",\n    position: \"relative\",\n    boxSizing: \"content-box\",\n    borderRadius: 4,\n  },\n  displayBar: {\n    background: theme.palette.background.paper,\n    position: \"absolute\",\n    right: 0,\n    height: 18,\n    transition: \"0.5s width\",\n    borderRadius: 2,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: \"2px solid transparent\",\n    boxSizing: \"border-box\",\n  },\n  text: {\n    fontSize: 12,\n    zIndex: 2,\n    position: \"relative\",\n    color: theme.palette.text.primary,\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n}));\n\nconst PercentageBar = (\n  props: PropsWithChildren<{ num: number; total: number }>,\n) => {\n  const { num, total } = props;\n  const classes = useStyle();\n  const per = Math.round((num / total) * 100);\n\n  return (\n    <div className={classes.container}>\n      <div\n        className={classes.displayBar}\n        style={{\n          width: `${Math.min(Math.max(0, 100 - per), 100)}%`,\n        }}\n      />\n      <div className={classes.text}>{props.children}</div>\n    </div>\n  );\n};\n\nexport default PercentageBar;\n","import {\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nexport const SearchInput = ({\n  label,\n  onChange,\n  defaultValue,\n}: {\n  label: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      InputProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value);\n          }\n        },\n        defaultValue,\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <SearchOutlined />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nexport const SearchSelect = ({\n  label,\n  onChange,\n  options,\n}: {\n  label: string;\n  onChange?: (value: string) => void;\n  options: (string | [string, string])[];\n}) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      select\n      SelectProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value as string);\n          }\n        },\n        style: {\n          width: 100,\n        },\n      }}\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((e) =>\n        typeof e === \"string\" ? (\n          <MenuItem value={e}>{e}</MenuItem>\n        ) : (\n          <MenuItem value={e[0]}>{e[1]}</MenuItem>\n        ),\n      )}\n    </TextField>\n  );\n};\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { StatusChip } from \"./StatusChip\";\n\nconst StateCounter = ({\n  type,\n  list,\n}: {\n  type: string;\n  list: { state: string }[];\n}) => {\n  const stateMap = {} as { [state: string]: number };\n  list.forEach(({ state }) => {\n    stateMap[state] = stateMap[state] + 1 || 1;\n  });\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\">\n      <Grid item>\n        <StatusChip status=\"TOTAL\" type={type} suffix={`x ${list.length}`} />\n      </Grid>\n      {Object.entries(stateMap).map(([s, num]) => (\n        <Grid key={s} item>\n          <StatusChip status={s} type={type} suffix={` x ${num}`} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default StateCounter;\n","import {\n  createStyles,\n  makeStyles,\n  Tooltip,\n  TooltipProps,\n} from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport React, { ReactNode } from \"react\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      border: \"1px solid #dadde9\",\n      color: theme.palette.text.primary,\n      padding: theme.spacing(1.5),\n    },\n  }),\n);\n\nexport const StyledTooltip = (props: TooltipProps) => {\n  const classes = useStyles();\n\n  return <Tooltip classes={{ tooltip: classes.root }} {...props} />;\n};\n\nconst useHelpInfoStyles = makeStyles((theme) =>\n  createStyles({\n    helpIcon: {\n      color: theme.palette.grey[500],\n    },\n  }),\n);\n\ntype HelpInfoProps = {\n  children: NonNullable<ReactNode>;\n  className?: string;\n};\n\nexport const HelpInfo = ({ children, className }: HelpInfoProps) => {\n  const classes = useHelpInfoStyles();\n\n  return (\n    <StyledTooltip className={className} interactive title={children}>\n      <HelpOutlineIcon fontSize=\"small\" className={classes.helpIcon} />\n    </StyledTooltip>\n  );\n};\n","import { Tooltip } from \"@material-ui/core\";\nimport React, { CSSProperties } from \"react\";\n\nexport const longTextCut = (text = \"\", len = 28) => (\n  <Tooltip title={text} interactive>\n    <span>{text.length > len ? text.slice(0, len) + \"...\" : text}</span>\n  </Tooltip>\n);\n\nexport const jsonFormat = (str: string | object) => {\n  const preStyle = {\n    textAlign: \"left\",\n    wordBreak: \"break-all\",\n    whiteSpace: \"pre-wrap\",\n  } as CSSProperties;\n  if (typeof str === \"object\") {\n    return <pre style={preStyle}>{JSON.stringify(str, null, 2)}</pre>;\n  }\n  try {\n    const j = JSON.parse(str);\n    if (typeof j !== \"object\") {\n      return JSON.stringify(j);\n    }\n    return <pre style={preStyle}>{JSON.stringify(j, null, 2)}</pre>;\n  } catch (e) {\n    return str;\n  }\n};\n","import {\n  Button,\n  Grid,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { KeyboardArrowDown, KeyboardArrowRight } from \"@material-ui/icons\";\nimport dayjs from \"dayjs\";\nimport React, {\n  PropsWithChildren,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { CoreWorkerStats, Worker } from \"../type/worker\";\nimport { memoryConverter } from \"../util/converter\";\nimport { longTextCut } from \"../util/func\";\n\nimport { useFilter } from \"../util/hook\";\nimport ActorTable from \"./ActorTable\";\nimport PercentageBar from \"./PercentageBar\";\nimport { SearchInput } from \"./SearchComponent\";\n\nexport const ExpandableTableRow = ({\n  children,\n  expandComponent,\n  length,\n  stateKey = \"\",\n  ...otherProps\n}: PropsWithChildren<{\n  expandComponent: ReactNode;\n  length: number;\n  stateKey?: string;\n}>) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  useEffect(() => {\n    if (stateKey.startsWith(\"ON\")) {\n      setIsExpanded(true);\n    } else if (stateKey.startsWith(\"OFF\")) {\n      setIsExpanded(false);\n    }\n  }, [stateKey]);\n\n  if (length < 1) {\n    return (\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\" />\n        {children}\n      </TableRow>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\">\n          <IconButton\n            style={{ color: \"inherit\" }}\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {length}\n            {isExpanded ? <KeyboardArrowDown /> : <KeyboardArrowRight />}\n          </IconButton>\n        </TableCell>\n        {children}\n      </TableRow>\n      {isExpanded && (\n        <TableRow>\n          <TableCell colSpan={24}>{expandComponent}</TableCell>\n        </TableRow>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst WorkerDetailTable = ({\n  actorMap,\n  coreWorkerStats,\n}: {\n  actorMap: { [actorId: string]: Actor };\n  coreWorkerStats: CoreWorkerStats[];\n}) => {\n  const actors = {} as { [actorId: string]: Actor };\n  (coreWorkerStats || [])\n    .filter((e) => actorMap[e.actorId])\n    .forEach((e) => (actors[e.actorId] = actorMap[e.actorId]));\n\n  if (!Object.values(actors).length) {\n    return <p>The Worker Haven't Had Related Actor Yet.</p>;\n  }\n\n  return (\n    <TableContainer>\n      <ActorTable actors={actors} />\n    </TableContainer>\n  );\n};\n\nconst RayletWorkerTable = ({\n  workers = [],\n  actorMap,\n  mini,\n}: {\n  workers: Worker[];\n  actorMap: { [actorId: string]: Actor };\n  mini?: boolean;\n}) => {\n  const { changeFilter, filterFunc } = useFilter();\n  const [key, setKey] = useState(\"\");\n  const { nodeMapByIp, ipLogMap } = useContext(GlobalContext);\n  const open = () => setKey(`ON${Math.random()}`);\n  const close = () => setKey(`OFF${Math.random()}`);\n\n  return (\n    <React.Fragment>\n      {!mini && (\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <SearchInput\n            label=\"Pid\"\n            onChange={(value) => changeFilter(\"pid\", value)}\n          />\n          <Button onClick={open}>Expand All</Button>\n          <Button onClick={close}>Collapse All</Button>\n        </div>\n      )}{\" \"}\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"Pid\",\n              \"CPU\",\n              \"CPU Times\",\n              \"Memory\",\n              \"CMD Line\",\n              \"Create Time\",\n              \"Log\",\n              \"Ops\",\n              \"IP\",\n              \"Tasks\",\n              \"Objects\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {workers\n            .filter(filterFunc)\n            .sort((aWorker, bWorker) => {\n              const a =\n                (aWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              const b =\n                (bWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              return b - a;\n            })\n            .map(\n              ({\n                pid,\n                cpuPercent,\n                cpuTimes,\n                memoryInfo,\n                cmdline,\n                createTime,\n                coreWorkerStats = [],\n                language,\n              }) => (\n                <ExpandableTableRow\n                  expandComponent={\n                    <WorkerDetailTable\n                      actorMap={actorMap}\n                      coreWorkerStats={coreWorkerStats}\n                    />\n                  }\n                  length={\n                    (coreWorkerStats || []).filter((e) => actorMap[e.actorId])\n                      .length\n                  }\n                  key={pid}\n                  stateKey={key}\n                >\n                  <TableCell align=\"center\">{pid}</TableCell>\n                  <TableCell align=\"center\">\n                    <PercentageBar num={Number(cpuPercent)} total={100}>\n                      {cpuPercent}%\n                    </PercentageBar>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(cpuTimes || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{val}%\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(memoryInfo || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{memoryConverter(val)}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\" style={{ lineBreak: \"anywhere\" }}>\n                    {cmdline && longTextCut(cmdline.filter((e) => e).join(\" \"))}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {dayjs(createTime * 1000).format(\"YYYY/MM/DD HH:mm:ss\")}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Grid container spacing={2}>\n                      {ipLogMap[coreWorkerStats[0]?.ipAddress] && (\n                        <Grid item>\n                          <Link\n                            target=\"_blank\"\n                            to={`/log/${encodeURIComponent(\n                              ipLogMap[coreWorkerStats[0]?.ipAddress],\n                            )}?fileName=${\n                              coreWorkerStats[0].jobId || \"\"\n                            }-${pid}`}\n                          >\n                            Log\n                          </Link>\n                        </Grid>\n                      )}\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {language === \"JAVA\" ? (\n                      <div>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstack/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstack\n                        </Button>{\" \"}\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jmap/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jmap\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstat/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstat\n                        </Button>\n                      </div>\n                    ) : (\n                      \"N/A\"\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {nodeMapByIp[coreWorkerStats[0]?.ipAddress] ? (\n                      <Link\n                        target=\"_blank\"\n                        to={`/node/${\n                          nodeMapByIp[coreWorkerStats[0]?.ipAddress]\n                        }`}\n                      >\n                        {coreWorkerStats[0]?.ipAddress}\n                      </Link>\n                    ) : (\n                      coreWorkerStats[0]?.ipAddress\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div>\n                      Pending tasks: {coreWorkerStats[0]?.numPendingTasks}\n                    </div>\n                    <div>\n                      Executed tasks: {coreWorkerStats[0]?.numExecutedTasks}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div>\n                      ObjectRefs in scope:{\" \"}\n                      {coreWorkerStats[0]?.numObjectRefsInScope}\n                    </div>\n                    <div>\n                      Objects in local memory store:{\" \"}\n                      {coreWorkerStats[0]?.numLocalObjects}\n                    </div>\n                    <div>\n                      Objects in plasma store: {coreWorkerStats[0]?.numInPlasma}\n                    </div>\n                    <div>\n                      Object store Memory used (MiB):{\" \"}\n                      {coreWorkerStats[0]?.usedObjectStoreMemory}\n                    </div>\n                  </TableCell>\n                </ExpandableTableRow>\n              ),\n            )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default RayletWorkerTable;\n","export const memoryConverter = (bytes: number) => {\n  if (bytes < 1024) {\n    return `${bytes.toFixed(4)}KB`;\n  }\n\n  if (bytes < 1024 ** 2) {\n    return `${(bytes / 1024 ** 1).toFixed(2)}KB`;\n  }\n\n  if (bytes < 1024 ** 3) {\n    return `${(bytes / 1024 ** 2).toFixed(2)}MB`;\n  }\n\n  if (bytes < 1024 ** 4) {\n    return `${(bytes / 1024 ** 3).toFixed(2)}GB`;\n  }\n\n  if (bytes < 1024 ** 5) {\n    return `${(bytes / 1024 ** 4).toFixed(2)}TB`;\n  }\n\n  if (bytes < 1024 ** 6) {\n    return `${(bytes / 1024 ** 5).toFixed(2)}TB`;\n  }\n\n  return \"\";\n};\n"],"names":["DurationText","durationText","startTime","endTime","useState","setRerenderCounter","endTimeToRender","Date","duration","dayjs","diff","refreshInterval","asMinutes","format","asHours","asDays","asMonths","asYears","useEffect","timeout","setInterval","counter","clearInterval","Typography","rowStyles","makeStyles","theme","createStyles","expandCollapseIcon","color","palette","text","secondary","fontSize","verticalAlign","idCol","display","width","overflow","textOverflow","whiteSpace","OverflowCol","helpInfo","marginLeft","spacing","API_REFRESH_INTERVAL_MS","actors","workers","pageNo","setPageNo","useFilter","changeFilter","filterFunc","pageSize","setPageSize","ipLogMap","useContext","GlobalContext","actorList","Object","values","filter","list","slice","classes","columns","label","style","flex","alignItems","margin","options","Array","from","Set","map","e","state","onInputChange","_","value","trim","renderInput","params","address","ipAddress","size","InputProps","onChange","target","endAdornment","position","defaultValue","Math","min","Number","page","num","count","ceil","length","type","align","justifyContent","className","actorId","actorClass","jobId","pid","name","numRestarts","exitDetail","requiredResources","coreWorkerStats","expandComponent","actorMap","mini","title","arrow","interactive","status","to","encodeURIComponent","href","rel","orange","entries","key","val","join","useStyle","container","background","border","padding","height","lineHeight","boxSizing","borderRadius","displayBar","paper","right","transition","borderTopLeftRadius","borderBottomLeftRadius","zIndex","primary","textAlign","props","total","per","round","max","children","useStyles","search","marginTop","SearchInput","SearchSelect","select","SelectProps","stateMap","forEach","item","suffix","s","root","backgroundColor","StyledTooltip","tooltip","useHelpInfoStyles","helpIcon","grey","HelpInfo","longTextCut","len","Tooltip","ExpandableTableRow","stateKey","otherProps","React","isExpanded","setIsExpanded","startsWith","TableRow","TableCell","IconButton","onClick","KeyboardArrowDown","KeyboardArrowRight","colSpan","WorkerDetailTable","TableContainer","ActorTable","setKey","nodeMapByIp","Button","random","Table","TableHead","col","TableBody","sort","aWorker","bWorker","a","cpuPercent","cpuTimes","memoryInfo","cmdline","createTime","language","PercentageBar","maxHeight","memoryConverter","lineBreak","Grid","window","open","numPendingTasks","numExecutedTasks","numObjectRefsInScope","numLocalObjects","numInPlasma","usedObjectStoreMemory","bytes","toFixed"],"sourceRoot":""}