from typing import (
    Any,
    Iterable,
    overload,
)
from psql2py import core
import psycopg2
import dataclasses


{% for statement in statements %}
_{{statement.function_name}}_STATEMENT = r"""
{{statement.sql}}
"""

{% if statement.column_types is none -%}
{{statement.row_name()}} = tuple
{%- else -%}
@dataclasses.dataclass
class {{statement.row_name()}}:
    {%- for column_type in statement.column_types %}
    {{column_type.name}}: {{column_type.type_}}
    {%- endfor -%}
{%- endif %}

@overload
def {{statement.function_name}}(
    connection: "psycopg2.connection",
    {%- if statement.args is none %}
    **kwargs: object
    {%- else -%}
    {%- if statement.args|length > 0 %}
    *,
    {%- for arg in statement.args %}
    {{arg.name}}: {% if arg.type_ is none -%}Any{%- else -%}{{arg.type_}}{%- endif %},
    {%- endfor -%}
    {%- endif -%}
    {%- endif %}
) -> Iterable[{{statement.row_name()}}]:
    ...

def {{statement.function_name}}(connection, **kwargs):
    """{{statement.docstring|indent(4)}}
    """
    for row in core.execute(connection, _{{statement.function_name}}_STATEMENT, kwargs):
        yield {{statement.row_name()}}(*row)


{% endfor -%}
