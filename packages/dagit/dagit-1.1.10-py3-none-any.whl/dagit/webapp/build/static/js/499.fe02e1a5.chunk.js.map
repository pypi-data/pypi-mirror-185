{"version":3,"file":"static/js/499.fe02e1a5.chunk.js","mappings":"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","sources":["../../core/src/instance/InstanceConfig.tsx","../../core/src/nav/InstanceWarningIcon.tsx","../../core/src/nav/WorkspaceStatus.tsx","../../core/src/instance/InstanceTabs.tsx","../../core/src/instance/useCanSeeConfig.tsx","../../core/src/ui/TabLink.tsx"],"sourcesContent":["import 'codemirror/addon/search/searchcursor';\n\nimport {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  PageHeader,\n  Spinner,\n  Code,\n  Heading,\n  StyledReadOnlyCodeMirror,\n  Subheading,\n} from '@dagster-io/ui';\nimport * as codemirror from 'codemirror';\nimport * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {graphql} from '../graphql';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\n\nconst InstanceConfigStyle = createGlobalStyle`\n  .react-codemirror2 .CodeMirror.cm-s-instance-config {\n    box-shadow: 0 1px 0 ${Colors.KeylineGray};\n    height: 100%;\n  }\n\n  .react-codemirror2 .CodeMirror.cm-s-instance-config {\n    .config-highlight {\n      background-color: ${Colors.Yellow200};\n    }\n`;\n\nexport const InstanceConfig = React.memo(() => {\n  useTrackPageView();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery(INSTANCE_CONFIG_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const config = data?.instance.info;\n\n  const onEditorDidMount = (editor: codemirror.Editor) => {\n    const documentHash = document.location.hash;\n    if (documentHash) {\n      const target = new RegExp(`^${documentHash.slice(1)}:`);\n      const cursor = editor.getSearchCursor(target);\n      const found = cursor.findNext();\n      if (found) {\n        editor.markText(cursor.from(), cursor.to(), {className: 'config-highlight'});\n        editor.scrollIntoView(cursor.from());\n      }\n    }\n  };\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <InstanceConfigStyle />\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"config\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>\n          Dagster version: <Code style={{fontSize: '16px'}}>{data.version}</Code>\n        </Subheading>\n      </Box>\n      <StyledReadOnlyCodeMirror\n        editorDidMount={onEditorDidMount}\n        value={config || ''}\n        options={{lineNumbers: true, mode: 'yaml'}}\n        theme={['instance-config']}\n      />\n    </>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConfig;\n\nexport const INSTANCE_CONFIG_QUERY = graphql(`\n  query InstanceConfigQuery {\n    version\n    instance {\n      info\n    }\n  }\n`);\n","import {Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {useQuery} from '@apollo/client';\n\nimport {graphql} from '../graphql';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery(INSTANCE_CONFIG_HAS_INFO);\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = graphql(`\n  query InstanceConfigHasInfo {\n    instance {\n      hasInfo\n    }\n  }\n`);\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n"],"names":["InstanceConfigStyle","createGlobalStyle","Colors","InstanceConfig","React","useTrackPageView","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONFIG_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","config","instance","info","title","tabs","tab","padding","vertical","horizontal","border","side","width","color","style","fontSize","version","editorDidMount","editor","documentHash","document","location","hash","target","RegExp","slice","cursor","getSearchCursor","findNext","markText","from","to","className","scrollIntoView","value","options","lineNumbers","mode","theme","purpose","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","content","position","modifiers","offset","enabled","Icon","name","WorkspaceStatus","placeholder","codeLocations","type","Tooltip","placement","Spinner","fillColor","InstanceTabs","props","healthTitle","canSeeConfig","useCanSeeConfig","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","icon","bottom","QueryRefresh","INSTANCE_CONFIG_HAS_INFO","hasInfo","styled","rest","containerProps","getTabA11yProps","getTabContent","titleText","undefined","tabCSS"],"sourceRoot":""}