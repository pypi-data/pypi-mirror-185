{"version":3,"file":"static/js/924.41a9d264.chunk.js","mappings":"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","sources":["../../core/src/instance/useCanSeeConfig.tsx","../../core/src/runs/RunListTabs.tsx","../../core/src/runs/RunsPageHeader.tsx","../../core/src/runs/RunsRoot.tsx","../../core/src/ui/Loading.tsx","../../core/src/ui/StickyTableContainer.tsx","../../core/src/ui/TabLink.tsx","../../ui/src/components/Alert.tsx","../../ui/src/components/Page.tsx","../../../node_modules/lodash/_arrayAggregator.js","../../../node_modules/lodash/_baseAggregator.js","../../../node_modules/lodash/_createAggregator.js","../../../node_modules/lodash/isEqual.js","../../../node_modules/lodash/partition.js"],"sourcesContent":["import {useQuery} from '@apollo/client';\n\nimport {graphql} from '../graphql';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery(INSTANCE_CONFIG_HAS_INFO);\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = graphql(`\n  query InstanceConfigHasInfo {\n    instance {\n      hasInfo\n    }\n  }\n`);\n","import {Tabs, TokenizingFieldValue} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useLocation} from 'react-router-dom';\n\nimport {graphql} from '../graphql';\nimport {RunStatus} from '../graphql/graphql';\nimport {TabLink} from '../ui/TabLink';\n\nimport {doneStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\n\ninterface Props {\n  queuedCount: number | null;\n  inProgressCount: number | null;\n}\n\nexport const RunListTabs: React.FC<Props> = React.memo(({queuedCount, inProgressCount}) => {\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  return (\n    <Tabs selectedTabId={selectedTab} id=\"run-tabs\">\n      <TabLink title=\"All runs\" to={urlForStatus([])} id=\"all\" />\n      <TabLink\n        title=\"Queued\"\n        count={queuedCount ?? 'indeterminate'}\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n      />\n      <TabLink\n        title=\"In progress\"\n        count={inProgressCount ?? 'indeterminate'}\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n      />\n      <TabLink title=\"Done\" to={urlForStatus(Array.from(doneStatuses))} id=\"done\" />\n      <TabLink title=\"Scheduled\" to=\"/runs/scheduled\" id=\"scheduled\" />\n    </Tabs>\n  );\n});\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(doneStatuses, statusTokens)) {\n    return 'done';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = graphql(`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`);\n","import {useQuery} from '@apollo/client';\nimport {PageHeader, Heading, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  QueryRefreshState,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\n\nimport {RunListTabs, RUN_TABS_COUNT_QUERY} from './RunListTabs';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsFilterForSearchTokens, useQueryPersistedRunFilters} from './RunsFilterInput';\n\ninterface Props {\n  refreshStates: QueryRefreshState[];\n}\n\nexport const RunsPageHeader = (props: Props) => {\n  const {refreshStates} = props;\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n\n  const runCountResult = useQuery(RUN_TABS_COUNT_QUERY, {\n    variables: {\n      queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n      inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n    },\n  });\n\n  const {data: countData} = runCountResult;\n  const {queuedCount, inProgressCount} = React.useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const countRefreshState = useQueryRefreshAtInterval(runCountResult, FIFTEEN_SECONDS);\n\n  const refreshState = useMergedRefresh(countRefreshState, ...refreshStates);\n\n  return (\n    <PageHeader\n      title={<Heading>Runs</Heading>}\n      tabs={\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n          <RunListTabs queuedCount={queuedCount} inProgressCount={inProgressCount} />\n          <Box padding={{bottom: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n          </Box>\n        </Box>\n      }\n    />\n  );\n};\n","import {ApolloError, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Page,\n  Tag,\n  tokenToString,\n} from '@dagster-io/ui';\nimport partition from 'lodash/partition';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {graphql} from '../graphql';\nimport {RunsRootQueryQuery, RunsRootQueryQueryVariables} from '../graphql/graphql';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {InstancePageContext} from '../instance/InstancePageContext';\nimport {useCanSeeConfig} from '../instance/useCanSeeConfig';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\n\nimport {useSelectedRunsTab} from './RunListTabs';\nimport {RunTable} from './RunTable';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {\n  RunFilterTokenType,\n  RunsFilterInput,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n} from './RunsFilterInput';\nimport {RunsPageHeader} from './RunsPageHeader';\nimport {useCursorPaginatedQuery} from './useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 25;\n\nexport const RunsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Runs');\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n  const canSeeConfig = useCanSeeConfig();\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQueryQuery,\n    RunsRootQueryQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.runId;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter,\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const currentTab = useSelectedRunsTab(filterTokens);\n  const staticStatusTags = currentTab !== 'all';\n  const [statusTokens, nonStatusTokens] = partition(\n    filterTokens,\n    (token) => token.token === 'status',\n  );\n\n  const setFilterTokensWithStatus = React.useCallback(\n    (tokens: RunFilterToken[]) => {\n      if (staticStatusTags) {\n        setFilterTokens([...statusTokens, ...tokens]);\n      } else {\n        setFilterTokens(tokens);\n      }\n    },\n    [setFilterTokens, staticStatusTags, statusTokens],\n  );\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!nonStatusTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokensWithStatus([...nonStatusTokens, token]);\n      }\n    },\n    [nonStatusTokens, setFilterTokensWithStatus],\n  );\n\n  const enabledFilters = React.useMemo(() => {\n    const filters: RunFilterTokenType[] = ['tag', 'snapshotId', 'id', 'job', 'pipeline'];\n\n    if (!staticStatusTags) {\n      filters.push('status');\n    }\n\n    return filters;\n  }, [staticStatusTags]);\n\n  const mutableTokens = React.useMemo(() => {\n    if (staticStatusTags) {\n      return filterTokens.filter((token) => token.token !== 'status');\n    }\n    return filterTokens;\n  }, [filterTokens, staticStatusTags]);\n\n  return (\n    <Page>\n      <RunsPageHeader refreshStates={[refreshState]} />\n      {currentTab === 'queued' && canSeeConfig ? (\n        <Box\n          flex={{direction: 'column', gap: 8}}\n          padding={{horizontal: 24, vertical: 16}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Alert\n            intent=\"info\"\n            title={<Link to=\"/config#run_coordinator\">View queue configuration</Link>}\n          />\n          <QueueDaemonAlert />\n        </Box>\n      ) : null}\n      <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n        <Loading\n          queryResult={queryResult}\n          allowStaleData\n          renderError={(error: ApolloError) => {\n            // In this case, a 400 is most likely due to invalid run filters, which are a GraphQL\n            // validation error but surfaced as a 400.\n            const badRequest = !!(\n              error?.networkError &&\n              'statusCode' in error.networkError &&\n              error.networkError.statusCode === 400\n            );\n            return (\n              <Box\n                flex={{direction: 'column', gap: 32}}\n                padding={{vertical: 8, left: 24, right: 12}}\n              >\n                <RunsFilterInput\n                  tokens={mutableTokens}\n                  onChange={setFilterTokensWithStatus}\n                  loading={queryResult.loading}\n                  enabledFilters={enabledFilters}\n                />\n                <NonIdealState\n                  icon=\"warning\"\n                  title={badRequest ? 'Invalid run filters' : 'Unexpected error'}\n                  description={\n                    badRequest\n                      ? 'The specified run filters are not valid. Please check the filters and try again.'\n                      : 'An unexpected error occurred. Check the console for details.'\n                  }\n                />\n              </Box>\n            );\n          }}\n        >\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={pipelineRunsOrError.results.slice(0, PAGE_SIZE)}\n                    onAddTag={onAddTag}\n                    filter={filter}\n                    actionBarComponents={\n                      <Box flex={{direction: 'column', gap: 8}}>\n                        {currentTab !== 'all' ? (\n                          <Box flex={{direction: 'row', gap: 8}}>\n                            {filterTokens\n                              .filter((token) => token.token === 'status')\n                              .map(({token, value}) => (\n                                <Tag key={token}>{`${token}:${value}`}</Tag>\n                              ))}\n                          </Box>\n                        ) : null}\n                        <RunsFilterInput\n                          tokens={mutableTokens}\n                          onChange={setFilterTokensWithStatus}\n                          loading={queryResult.loading}\n                          enabledFilters={enabledFilters}\n                        />\n                      </Box>\n                    }\n                  />\n                </StickyTableContainer>\n                {pipelineRunsOrError.results.length > 0 ? (\n                  <div style={{marginTop: '16px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </RunsQueryRefetchContext.Provider>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunsRoot;\n\nconst RUNS_ROOT_QUERY = graphql(`\n  query RunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n`);\n\nconst QueueDaemonAlert = () => {\n  const {data} = useQuery(QUEUE_DAEMON_STATUS_QUERY);\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const status = data?.instance.daemonHealth.daemonStatus;\n  if (status?.required && !status?.healthy) {\n    return (\n      <Alert\n        intent=\"warning\"\n        title=\"The queued run coordinator is not healthy.\"\n        description={\n          <div>\n            View <Link to=\"/health\">{pageTitle}</Link> for details.\n          </div>\n        }\n      />\n    );\n  }\n  return null;\n};\n\nconst QUEUE_DAEMON_STATUS_QUERY = graphql(`\n  query QueueDaemonStatusQuery {\n    instance {\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"QUEUED_RUN_COORDINATOR\") {\n          id\n          daemonType\n          healthy\n          required\n        }\n      }\n    }\n  }\n`);\n","import {ApolloError, QueryResult} from '@apollo/client';\nimport {Box, NonIdealState, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\ninterface ILoadingProps<TData> {\n  queryResult: QueryResult<TData, any>;\n  children: (data: TData) => React.ReactNode;\n  renderError?: (error: ApolloError) => React.ReactNode;\n  allowStaleData?: boolean;\n  purpose: 'section' | 'page';\n}\n\nconst BLANK_LOADING_DELAY_MSEC = 500;\n\nexport const Loading = <TData extends Record<string, any>>(props: ILoadingProps<TData>) => {\n  const {children, purpose, allowStaleData = false, renderError} = props;\n  const {error, data, loading} = props.queryResult;\n\n  const [blankLoading, setBlankLoading] = React.useState(true);\n  const isLoading = !data || (loading && !allowStaleData) || Object.keys(data as any).length === 0;\n\n  React.useEffect(() => {\n    let timer: ReturnType<typeof setTimeout> | undefined;\n\n    // Wait a brief moment so that we don't awkwardly flash the loading bar.\n    // This is often enough time for data to become available.\n    if (isLoading) {\n      timer = setTimeout(() => setBlankLoading(false), BLANK_LOADING_DELAY_MSEC);\n    } else {\n      setBlankLoading(true);\n    }\n\n    return () => {\n      timer && clearTimeout(timer);\n    };\n  }, [isLoading]);\n\n  // either error.networkError or error.graphQLErrors is set,\n  // so check that the error is not just a transient network error\n  if (error) {\n    if (renderError) {\n      return <>{renderError(error)}</>;\n    }\n    if (!error.networkError) {\n      return (\n        <Box padding={64} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"error\" title=\"GraphQL Error - see console for details\" />\n        </Box>\n      );\n    }\n  }\n\n  if (isLoading) {\n    return blankLoading ? null : <LoadingSpinner purpose={purpose} />;\n  }\n\n  return <>{children(data as TData)}</>;\n};\n\nexport const LoadingSpinner: React.FC<{purpose: 'page' | 'section'}> = ({purpose}) => {\n  const isPage = purpose === 'page';\n  return (\n    <Box\n      padding={64}\n      flex={{\n        grow: isPage ? 1 : undefined,\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n      style={isPage ? {height: '100%'} : undefined}\n    >\n      <Spinner purpose={purpose} />\n    </Box>\n  );\n};\n\nLoading.defaultProps = {\n  purpose: 'page',\n};\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  $top: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {Group} from './Group';\nimport {IconName, Icon} from './Icon';\n\nexport type AlertIntent = 'info' | 'warning' | 'error' | 'success';\n\ninterface Props {\n  intent: AlertIntent;\n  title: React.ReactNode;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  onClose?: () => void;\n}\n\nexport const Alert: React.FC<Props> = (props) => {\n  const {intent, title, description, onClose} = props;\n\n  const {backgroundColor, borderColor, icon, iconColor, textColor} = React.useMemo(() => {\n    switch (intent) {\n      case 'warning':\n        return {\n          backgroundColor: Colors.Yellow50,\n          borderColor: Colors.Yellow500,\n          icon: 'warning',\n          iconColor: Colors.Yellow500,\n          textColor: Colors.Yellow700,\n        };\n      case 'error':\n        return {\n          backgroundColor: Colors.Red50,\n          borderColor: Colors.Red500,\n          icon: 'error',\n          iconColor: Colors.Red500,\n          textColor: Colors.Red700,\n        };\n      case 'success':\n        return {\n          backgroundColor: Colors.Green50,\n          borderColor: Colors.Green500,\n          icon: 'done',\n          iconColor: Colors.Green500,\n          textColor: Colors.Green700,\n        };\n      case 'info':\n      default:\n        return {\n          backgroundColor: Colors.Blue50,\n          borderColor: Colors.Blue500,\n          icon: 'info',\n          iconColor: Colors.Blue500,\n          textColor: Colors.Blue700,\n        };\n    }\n  }, [intent]);\n\n  return (\n    <AlertContainer\n      background={backgroundColor}\n      $borderColor={borderColor}\n      $textColor={textColor}\n      padding={{horizontal: 16, vertical: 12}}\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n        <Group direction=\"row\" spacing={12} alignItems=\"flex-start\">\n          {props.icon || <Icon name={icon as IconName} color={iconColor} />}\n          <Group direction=\"column\" spacing={8}>\n            <AlertTitle>{title}</AlertTitle>\n            {description ? <AlertDescription>{description}</AlertDescription> : null}\n          </Group>\n        </Group>\n        {!!onClose ? (\n          <ButtonWrapper onClick={onClose}>\n            <Icon name=\"close\" color={textColor} />\n          </ButtonWrapper>\n        ) : null}\n      </Box>\n    </AlertContainer>\n  );\n};\n\nAlert.defaultProps = {\n  intent: 'info',\n};\n\nconst ButtonWrapper = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  flex-direction: column;\n  height: fit-content;\n`;\n\nconst AlertContainer = styled(Box)<{$borderColor: string; $textColor: string}>`\n  box-shadow: inset 4px 0 ${({$borderColor}) => $borderColor};\n  color: ${({$textColor}) => $textColor};\n\n  a:link,\n  a:visited,\n  a:hover,\n  a:active {\n    color: ${({$textColor}) => $textColor};\n    text-decoration: underline;\n  }\n`;\n\nconst AlertTitle = styled.div`\n  font-weight: 600;\n`;\n\nconst AlertDescription = styled.div`\n  font-weight: 400;\n`;\n","import styled from 'styled-components/macro';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n"],"names":["useCanSeeConfig","data","useQuery","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","RunListTabs","React","queuedCount","inProgressCount","useQueryPersistedRunFilters","filterTokens","selectedTab","useSelectedRunsTab","urlForStatus","statuses","tokensMinusStatus","filter","token","statusTokens","map","status","value","runsPathWithFilters","selectedTabId","id","title","to","count","Array","from","queuedStatuses","inProgressStatuses","doneStatuses","pathname","useLocation","Set","isEqual","RUN_TABS_COUNT_QUERY","RunsPageHeader","props","refreshStates","runsFilterForSearchTokens","runCountResult","variables","queuedFilter","inProgressFilter","countData","__typename","countRefreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refreshState","useMergedRefresh","tabs","flex","direction","justifyContent","alignItems","padding","bottom","RunsRoot","useTrackPageView","useDocumentTitle","setFilterTokens","canSeeConfig","useCursorPaginatedQuery","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","runId","getResultArray","query","RUNS_ROOT_QUERY","pageSize","queryResult","paginationProps","currentTab","staticStatusTags","partition","nonStatusTokens","setFilterTokensWithStatus","tokens","onAddTag","tokenAsString","tokenToString","some","enabledFilters","filters","push","mutableTokens","gap","horizontal","vertical","border","side","width","color","Colors","intent","QueueDaemonAlert","refetch","allowStaleData","renderError","error","badRequest","networkError","statusCode","left","right","onChange","loading","icon","description","message","$top","slice","actionBarComponents","length","style","marginTop","QUEUE_DAEMON_STATUS_QUERY","pageTitle","InstancePageContext","daemonHealth","daemonStatus","required","healthy","Loading","children","purpose","blankLoading","setBlankLoading","isLoading","Object","keys","timer","setTimeout","clearTimeout","LoadingSpinner","isPage","grow","undefined","height","defaultProps","StickyTableContainer","styled","TabLink","rest","containerProps","getTabA11yProps","content","getTabContent","titleText","tabCSS","Alert","onClose","backgroundColor","borderColor","iconColor","textColor","AlertContainer","background","$borderColor","$textColor","spacing","name","AlertTitle","AlertDescription","ButtonWrapper","onClick","Box","Page","module","exports","array","setter","iteratee","accumulator","index","baseEach","require","collection","key","arrayAggregator","baseAggregator","baseIteratee","isArray","initializer","func","baseIsEqual","other","createAggregator","result"],"sourceRoot":""}