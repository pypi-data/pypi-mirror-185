{"version":3,"file":"static/js/23.ba96e7f7.chunk.js","mappings":"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","sources":["../../core/src/runs/NavitationBlock.tsx","../../core/src/hooks/useOnBeforeUnload.tsx","../../core/src/runs/RunStats.tsx","../../core/src/runs/RunStatusDots.tsx","../../core/src/runs/TerminationDialog.tsx","../../core/src/workspace/useRepositoryForRun.ts","../../ui/src/components/CursorControls.tsx"],"sourcesContent":["import * as React from 'react';\nimport {Prompt} from 'react-router-dom';\n\nimport {useOnBeforeUnload} from '../hooks/useOnBeforeUnload';\n\ninterface Props {\n  message: string;\n}\n\nexport const NavigationBlock = (props: Props) => {\n  useOnBeforeUnload();\n  return <Prompt message={props.message} />;\n};\n","import * as React from 'react';\n\nexport const useOnBeforeUnload = () => {\n  React.useEffect(() => {\n    const handler = (e: BeforeUnloadEvent) => {\n      e.preventDefault();\n      e.returnValue = '';\n    };\n\n    window.addEventListener('beforeunload', handler);\n    return () => {\n      window.removeEventListener('beforeunload', handler);\n    };\n  }, []);\n};\n","import {useQuery} from '@apollo/client';\nimport {Box, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {graphql} from '../graphql';\n\nexport const RunStats = ({runId}: {runId: string}) => {\n  const stats = useQuery(RUN_STATS_QUERY, {\n    variables: {runId},\n  });\n\n  if (stats.loading || !stats.data) {\n    return (\n      <RunStatsDetailsContainer>\n        <Box padding={24} flex={{justifyContent: 'center'}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </RunStatsDetailsContainer>\n    );\n  }\n\n  const result = stats.data.pipelineRunOrError;\n\n  if (result.__typename !== 'Run') {\n    return <PythonErrorInfo error={result} />;\n  }\n  if (result.stats.__typename !== 'RunStatsSnapshot') {\n    return <PythonErrorInfo error={result.stats} />;\n  }\n\n  const runPath = `/runs/${runId}`;\n  return (\n    <RunStatsDetailsContainer>\n      <Link\n        to={`${runPath}?logs=type:STEP_SUCCESS`}\n      >{`${result.stats.stepsSucceeded} steps succeeded`}</Link>\n      <Link to={`${runPath}?logs=type:STEP_FAILURE`}>\n        {`${result.stats.stepsFailed} steps failed`}\n      </Link>\n      <Link\n        to={`${runPath}?logs=type:ASSET_MATERIALIZATION`}\n      >{`${result.stats.materializations} materializations`}</Link>\n      <Link\n        to={`${runPath}?logs=type:STEP_EXPECTATION_RESULT`}\n      >{`${result.stats.expectations} expectations passed`}</Link>\n    </RunStatsDetailsContainer>\n  );\n};\n\nconst RUN_STATS_QUERY = graphql(`\n  query RunStatsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      __typename\n      ...PythonErrorFragment\n      ... on RunNotFoundError {\n        message\n      }\n      ... on Run {\n        id\n        runId\n        pipelineName\n        stats {\n          ... on RunStatsSnapshot {\n            id\n            stepsSucceeded\n            stepsFailed\n            expectations\n            materializations\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n`);\n\nconst RunStatsDetailsContainer = styled.div`\n  min-width: 200px;\n  padding: 12px;\n  color: white;\n  font-size: 12px;\n  & > a {\n    display: block;\n  }\n`;\n","import {Colors, Popover, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled, {css, keyframes} from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/graphql';\n\nimport {RunStats} from './RunStats';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\n\nconst RUN_STATUS_COLORS = {\n  QUEUED: Colors.Blue200,\n  NOT_STARTED: Colors.Gray600,\n  STARTING: Colors.Gray400,\n  MANAGED: Colors.Gray400,\n  STARTED: Colors.Blue500,\n  SUCCESS: Colors.Green500,\n  FAILURE: Colors.Red500,\n  CANCELING: Colors.Red500,\n  CANCELED: Colors.Red500,\n\n  // Not technically a RunStatus, but useful.\n  SCHEDULED: Colors.Blue200,\n};\n\nexport const RunStatusWithStats: React.FC<RunStatusProps & {runId: string}> = React.memo(\n  ({runId, ...rest}) => (\n    <Popover\n      position=\"bottom\"\n      interactionKind=\"hover\"\n      content={<RunStats runId={runId} />}\n      hoverOpenDelay={100}\n    >\n      <RunStatusIndicator {...rest} />\n    </Popover>\n  ),\n);\n\ninterface RunStatusProps {\n  status: RunStatus | 'SCHEDULED';\n  size?: number;\n}\n\nexport const RunStatusIndicator: React.FC<RunStatusProps> = React.memo(({status, size}) => {\n  if (status === 'STARTED') {\n    return <Spinner purpose=\"caption-text\" />;\n  }\n  if (status === 'SCHEDULED') {\n    return <RunStatusDot status={status} size={size || 12} />;\n  }\n  return (\n    <RunStatusDot\n      status={status}\n      size={size || 12}\n      pulse={inProgressStatuses.has(status) || queuedStatuses.has(status)}\n    />\n  );\n});\n\nconst pulseAnimation = keyframes`\n  0% {\n    filter: brightness(1);\n  }\n\n  50% {\n    filter: brightness(0.7);\n  }\n\n  100% {\n    filter: brightness(1);\n  }\n`;\n\nexport const RunStatusDot = styled.div<{\n  status: RunStatus | 'SCHEDULED';\n  size: number;\n  pulse?: boolean;\n}>`\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n  border-radius: ${({size}) => size / 2}px;\n  transition: filter 200ms linear;\n  ${({pulse}) =>\n    pulse\n      ? css`\n          animation: ${pulseAnimation} 2s infinite;\n        `\n      : null}\n\n  background: ${({status}) => RUN_STATUS_COLORS[status]};\n  &:hover {\n    animation: none;\n    filter: brightness(0.7);\n  }\n`;\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  Mono,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {TerminateMutation, TerminateRunPolicy} from '../graphql/graphql';\n\nimport {NavigationBlock} from './NavitationBlock';\nimport {TERMINATE_MUTATION} from './RunUtils';\n\nexport interface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (terminationState: TerminationState) => void;\n  // A map from the run ID to its `canTerminate` value\n  selectedRuns: {[id: string]: boolean};\n}\n\nconst refineToError = (data: TerminateMutation | null | undefined) => {\n  if (data?.terminatePipelineExecution.__typename === 'TerminateRunSuccess') {\n    throw new ErrorEvent('Not an error!');\n  }\n  return data?.terminatePipelineExecution;\n};\n\ntype Error = ReturnType<typeof refineToError> | undefined;\n\nexport type TerminationState = {completed: number; errors: {[id: string]: Error}};\n\ntype TerminationDialogState = {\n  mustForce: boolean;\n  frozenRuns: SelectedRuns;\n  step: 'initial' | 'terminating' | 'completed';\n  termination: TerminationState;\n};\n\ntype SelectedRuns = {[id: string]: boolean};\n\nconst initializeState = (selectedRuns: SelectedRuns): TerminationDialogState => {\n  return {\n    // If any selected runs have `canTerminate`, we don't necessarily have to force.\n    mustForce: !Object.keys(selectedRuns).some((id) => selectedRuns[id]),\n    frozenRuns: selectedRuns,\n    step: 'initial',\n    termination: {completed: 0, errors: {}},\n  };\n};\n\ntype TerminationDialogAction =\n  | {type: 'reset'; frozenRuns: SelectedRuns}\n  | {type: 'toggle-force-terminate'; checked: boolean}\n  | {type: 'start'}\n  | {type: 'termination-success'}\n  | {type: 'termination-error'; id: string; error: Error}\n  | {type: 'complete'};\n\nconst terminationDialogReducer = (\n  prevState: TerminationDialogState,\n  action: TerminationDialogAction,\n): TerminationDialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initializeState(action.frozenRuns);\n    case 'toggle-force-terminate':\n      return {...prevState, mustForce: action.checked};\n    case 'start':\n      return {...prevState, step: 'terminating'};\n    case 'termination-success': {\n      const {termination} = prevState;\n      return {\n        ...prevState,\n        step: 'terminating',\n        termination: {...termination, completed: termination.completed + 1},\n      };\n    }\n    case 'termination-error': {\n      const {termination} = prevState;\n      return {\n        ...prevState,\n        step: 'terminating',\n        termination: {\n          ...termination,\n          completed: termination.completed + 1,\n          errors: {...termination.errors, [action.id]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const TerminationDialog = (props: Props) => {\n  const {isOpen, onClose, onComplete, selectedRuns} = props;\n\n  // Freeze the selected IDs, since the list may change as runs continue processing and\n  // terminating. We want to preserve the list we're given.\n  const frozenRuns = React.useRef<SelectedRuns>(selectedRuns);\n\n  const [state, dispatch] = React.useReducer(\n    terminationDialogReducer,\n    frozenRuns.current,\n    initializeState,\n  );\n\n  const count = Object.keys(state.frozenRuns).length;\n\n  // If the dialog is newly open, update state to match the frozen list.\n  React.useEffect(() => {\n    if (isOpen) {\n      dispatch({type: 'reset', frozenRuns: frozenRuns.current});\n    }\n  }, [isOpen]);\n\n  // If the dialog is not open, update the ref so that the frozen list will be entered\n  // into state the next time the dialog opens.\n  React.useEffect(() => {\n    if (!isOpen) {\n      frozenRuns.current = selectedRuns;\n    }\n  }, [isOpen, selectedRuns]);\n\n  const [terminate] = useMutation(TERMINATE_MUTATION);\n  const policy = state.mustForce\n    ? TerminateRunPolicy.MARK_AS_CANCELED_IMMEDIATELY\n    : TerminateRunPolicy.SAFE_TERMINATE;\n\n  const mutate = async () => {\n    dispatch({type: 'start'});\n\n    const runList = Object.keys(state.frozenRuns);\n    for (let ii = 0; ii < runList.length; ii++) {\n      const runId = runList[ii];\n      const {data} = await terminate({variables: {runId, terminatePolicy: policy}});\n\n      if (data?.terminatePipelineExecution.__typename === 'TerminateRunSuccess') {\n        dispatch({type: 'termination-success'});\n      } else {\n        dispatch({type: 'termination-error', id: runId, error: refineToError(data)});\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete(state.termination);\n  };\n\n  const onToggleForce = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({type: 'toggle-force-terminate', checked: event.target.checked});\n  };\n\n  const showCheckbox = Object.keys(state.frozenRuns).some((id) => state.frozenRuns[id]);\n\n  const progressContent = () => {\n    switch (state.step) {\n      case 'initial':\n        if (!count) {\n          return (\n            <Group direction=\"column\" spacing={16}>\n              <div>No runs selected for termination.</div>\n              <div>The runs you selected may already have finished executing.</div>\n            </Group>\n          );\n        }\n\n        return (\n          <Group direction=\"column\" spacing={16}>\n            <div>\n              {`${count} ${\n                count === 1 ? 'run' : 'runs'\n              } will be terminated. Do you wish to continue?`}\n            </div>\n            <div>\n              {showCheckbox ? (\n                <>\n                  <Checkbox\n                    checked={state.mustForce}\n                    size=\"small\"\n                    label=\"Force termination immediately\"\n                    onChange={onToggleForce}\n                  />\n                  {state.mustForce ? (\n                    <Box flex={{display: 'flex', direction: 'row', gap: 8}} margin={{top: 8}}>\n                      <Icon name=\"warning\" color={Colors.Yellow500} />\n                      <div>\n                        <strong>Warning:</strong> computational resources created by runs may not be\n                        cleaned up.\n                      </div>\n                    </Box>\n                  ) : null}\n                </>\n              ) : (\n                <Group direction=\"row\" spacing={8}>\n                  <Icon name=\"warning\" color={Colors.Yellow500} />\n                  <div>\n                    <strong>Warning:</strong> computational resources created by runs may not be\n                    cleaned up.\n                  </div>\n                </Group>\n              )}\n            </div>\n          </Group>\n        );\n      case 'terminating':\n      case 'completed':\n        const value = count > 0 ? state.termination.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <div>{state.mustForce ? 'Forcing termination…' : 'Terminating…'}</div>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'terminating' ? (\n              <NavigationBlock message=\"Termination in progress, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    switch (state.step) {\n      case 'initial':\n        if (!count) {\n          return (\n            <Button intent=\"none\" onClick={onClose}>\n              OK\n            </Button>\n          );\n        }\n\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"danger\" onClick={mutate}>\n              {`${state.mustForce ? 'Force termination for' : 'Terminate'} ${`${count} ${\n                count === 1 ? 'run' : 'runs'\n              }`}`}\n            </Button>\n          </>\n        );\n      case 'terminating':\n        return (\n          <Button intent=\"danger\" disabled>\n            {state.mustForce\n              ? `Forcing termination for ${`${count} ${count === 1 ? 'run' : 'runs'}...`}`\n              : `Terminating ${`${count} ${count === 1 ? 'run' : 'runs'}...`}`}\n          </Button>\n        );\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'terminating') {\n      return <div>Please do not close the window or navigate away during termination.</div>;\n    }\n\n    const errors = state.termination.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.termination.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.Green500} />\n            <div>\n              {state.mustForce\n                ? `Successfully forced termination for ${successCount}\n                ${successCount === 1 ? 'run' : `runs`}.`\n                : `Successfully requested termination for ${successCount}\n              ${successCount === 1 ? 'run' : `runs`}.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.Yellow500} />\n              <div>\n                {state.mustForce\n                  ? `Could not force termination for ${errorCount} ${\n                      errorCount === 1 ? 'run' : 'runs'\n                    }:`\n                  : `Could not request termination for ${errorCount} ${\n                      errorCount === 1 ? 'run' : 'runs'\n                    }:`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((runId) => (\n                <li key={runId}>\n                  <Group direction=\"row\" spacing={8}>\n                    <Mono>{runId.slice(0, 8)}</Mono>\n                    {errors[runId] ? <div>{errors[runId]?.message}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'terminating';\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      title=\"Terminate runs\"\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import * as React from 'react';\n\nimport {RunFragmentForRepositoryMatchFragment} from '../graphql/graphql';\n\nimport {DagsterRepoOption, useRepositoryOptions} from './WorkspaceContext';\nimport {findRepoContainingPipeline, repoContainsPipeline} from './findRepoContainingPipeline';\n\ntype MatchType = {\n  match: DagsterRepoOption;\n  type: 'origin-and-snapshot' | 'origin-only' | 'snapshot-only' | 'pipeline-name-only';\n};\n\n/**\n * Given a Run fragment, find the repository that contains its pipeline.\n */\nexport const useRepositoryForRun = (\n  run: RunFragmentForRepositoryMatchFragment | null | undefined,\n): MatchType | null => {\n  const {options} = useRepositoryOptions();\n\n  const repoMatch = React.useMemo(() => {\n    if (!run) {\n      return null;\n    }\n\n    const pipelineName = run.pipelineName;\n    // Try to match the pipeline name within the specified origin, if possible.\n    const origin = run.repositoryOrigin;\n\n    if (!origin) {\n      return null;\n    }\n\n    const location = origin?.repositoryLocationName;\n    const name = origin?.repositoryName;\n\n    const match = options.find(\n      (option) => option.repository.name === name && option.repositoryLocation.name === location,\n    );\n\n    // The origin repo is loaded. Verify that a pipeline with this name exists and return the match if so.\n    return match && repoContainsPipeline(match, pipelineName) ? match : null;\n  }, [options, run]);\n\n  const snapshotMatches = React.useMemo(() => {\n    if (!run) {\n      return null;\n    }\n\n    const pipelineName = run.pipelineName;\n    // When jobs are subsetted (with an opSelection or assetSelection), only their\n    // parentPipelineSnapshotId (the id of the pipelineSnapshot that they were subsetted from) will\n    // be found in the repository, so look for that instead.\n    const snapshotId = run.parentPipelineSnapshotId ?? run.pipelineSnapshotId;\n\n    // Find the repository that contains the specified pipeline name and snapshot ID, if any.\n    if (pipelineName && snapshotId) {\n      const snapshotMatches = findRepoContainingPipeline(options, pipelineName, snapshotId);\n      if (snapshotMatches.length) {\n        return snapshotMatches;\n      }\n    }\n\n    return null;\n  }, [options, run]);\n\n  const pipelineNameMatches = React.useMemo(() => {\n    if (!run) {\n      return null;\n    }\n\n    const pipelineName = run.pipelineName;\n\n    // There is no origin repo. Find any repos that might contain a matching pipeline name.\n    const possibleMatches = findRepoContainingPipeline(options, pipelineName);\n    return possibleMatches.length ? possibleMatches : null;\n  }, [options, run]);\n\n  if (repoMatch) {\n    if (snapshotMatches) {\n      const repoAndSnapshotMatch = snapshotMatches.find(\n        (repoOption) =>\n          repoOption.repository.name === repoMatch.repository.name &&\n          repoOption.repositoryLocation.name === repoMatch.repositoryLocation.name,\n      );\n      if (repoAndSnapshotMatch) {\n        return {match: repoAndSnapshotMatch, type: 'origin-and-snapshot'};\n      }\n    }\n\n    return {match: repoMatch, type: 'origin-only'};\n  }\n\n  if (snapshotMatches) {\n    return {match: snapshotMatches[0], type: 'snapshot-only'};\n  }\n\n  if (pipelineNameMatches) {\n    return {match: pipelineNameMatches[0], type: 'pipeline-name-only'};\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Button} from './Button';\nimport {Icon} from './Icon';\n\nexport interface CursorPaginationProps {\n  hasPrevCursor: boolean;\n  hasNextCursor: boolean;\n  popCursor: () => void;\n  advanceCursor: () => void;\n  reset: () => void;\n}\n\nexport const CursorPaginationControls: React.FC<CursorPaginationProps> = ({\n  hasPrevCursor,\n  hasNextCursor,\n  popCursor,\n  advanceCursor,\n}) => {\n  return (\n    <CursorControlsContainer>\n      <Button disabled={!hasPrevCursor} icon={<Icon name=\"arrow_back\" />} onClick={popCursor}>\n        Previous\n      </Button>\n      <Button\n        disabled={!hasNextCursor}\n        rightIcon={<Icon name=\"arrow_forward\" />}\n        onClick={advanceCursor}\n      >\n        Next\n      </Button>\n    </CursorControlsContainer>\n  );\n};\n\nexport const CursorHistoryControls: React.FC<CursorPaginationProps> = ({\n  hasPrevCursor,\n  hasNextCursor,\n  popCursor,\n  advanceCursor,\n}) => {\n  return (\n    <CursorControlsContainer>\n      <Button icon={<Icon name=\"arrow_back\" />} disabled={!hasPrevCursor} onClick={popCursor}>\n        <span className=\"hideable-button-text\">Newer</span>\n      </Button>\n      <Button\n        rightIcon={<Icon name=\"arrow_forward\" />}\n        disabled={!hasNextCursor}\n        onClick={advanceCursor}\n      >\n        <span className=\"hideable-button-text\">Older</span>\n      </Button>\n    </CursorControlsContainer>\n  );\n};\n\nexport const CursorControlsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  margin-top: 16px;\n`;\n"],"names":["NavigationBlock","props","React","handler","e","preventDefault","returnValue","window","addEventListener","removeEventListener","message","RunStats","runId","stats","useQuery","RUN_STATS_QUERY","variables","loading","data","RunStatsDetailsContainer","padding","flex","justifyContent","purpose","result","pipelineRunOrError","__typename","error","runPath","to","stepsSucceeded","stepsFailed","materializations","expectations","styled","RUN_STATUS_COLORS","QUEUED","Colors","NOT_STARTED","STARTING","MANAGED","STARTED","SUCCESS","FAILURE","CANCELING","CANCELED","SCHEDULED","RunStatusWithStats","rest","position","interactionKind","content","hoverOpenDelay","RunStatusIndicator","status","size","RunStatusDot","pulse","inProgressStatuses","queuedStatuses","pulseAnimation","keyframes","css","refineToError","terminatePipelineExecution","ErrorEvent","initializeState","selectedRuns","mustForce","Object","keys","some","id","frozenRuns","step","termination","completed","errors","terminationDialogReducer","prevState","action","type","checked","TerminationDialog","isOpen","onClose","onComplete","current","state","dispatch","count","length","useMutation","TERMINATE_MUTATION","terminate","policy","TerminateRunPolicy","mutate","runList","ii","terminatePolicy","onToggleForce","event","target","showCheckbox","canQuicklyClose","title","canEscapeKeyClose","canOutsideClickClose","direction","spacing","label","onChange","display","gap","margin","top","name","color","value","intent","Math","max","animate","progressContent","errorCount","successCount","alignItems","map","slice","completionContent","onClick","disabled","buttons","useRepositoryForRun","run","options","useRepositoryOptions","repoMatch","pipelineName","origin","repositoryOrigin","location","repositoryLocationName","repositoryName","match","find","option","repository","repositoryLocation","repoContainsPipeline","snapshotMatches","snapshotId","parentPipelineSnapshotId","pipelineSnapshotId","findRepoContainingPipeline","pipelineNameMatches","possibleMatches","repoAndSnapshotMatch","repoOption","CursorPaginationControls","hasPrevCursor","hasNextCursor","popCursor","advanceCursor","CursorControlsContainer","icon","rightIcon","CursorHistoryControls","className"],"sourceRoot":""}