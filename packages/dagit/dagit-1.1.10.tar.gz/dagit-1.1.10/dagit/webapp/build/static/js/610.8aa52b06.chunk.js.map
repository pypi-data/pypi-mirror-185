{"version":3,"file":"static/js/610.8aa52b06.chunk.js","mappings":"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","sources":["../../core/src/pipelines/PipelineExplorerRoot.tsx","../../core/src/pipelines/PipelineRunsRoot.tsx","../../core/src/snapshots/SnapshotNav.tsx","../../core/src/snapshots/SnapshotRoot.tsx","../../core/src/ui/StickyTableContainer.tsx"],"sourcesContent":["import {useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {graphql} from '../graphql';\nimport {PipelineExplorerRootQueryQuery} from '../graphql/graphql';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {buildPipelineSelector} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explodeCompositesInHandleGraph} from './CompositeSupport';\nimport {GraphExplorer, GraphExplorerOptions} from './GraphExplorer';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {ExplorerPath, explorerPathFromString, explorerPathToString} from './PipelinePathUtils';\n\nexport const PipelineExplorerSnapshotRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const explorerPath = explorerPathFromString(params['0']);\n  const {pipelineName, snapshotId} = explorerPath;\n  const history = useHistory();\n\n  useDocumentTitle(`Snapshot: ${pipelineName}${snapshotId ? `@${snapshotId.slice(0, 8)}` : ''}`);\n\n  return (\n    <PipelineExplorerContainer\n      explorerPath={explorerPath}\n      onChangeExplorerPath={(path, mode) => {\n        history[mode](`/snapshots/${explorerPathToString(path)}`);\n      }}\n      onNavigateToSourceAssetNode={({assetKey}) => {\n        history.push(assetDetailsPathForKey(assetKey));\n      }}\n    />\n  );\n};\n\nexport const PipelineExplorerContainer: React.FC<{\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n  repoAddress?: RepoAddress;\n  isGraph?: boolean;\n}> = ({\n  explorerPath,\n  repoAddress,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode,\n  isGraph = false,\n}) => {\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: explorerPath.explodeComposites ?? false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const pipelineSelector = buildPipelineSelector(repoAddress || null, explorerPath.pipelineName);\n\n  const pipelineResult = useQuery(PIPELINE_EXPLORER_ROOT_QUERY, {\n    variables: {\n      snapshotPipelineSelector: explorerPath.snapshotId ? undefined : pipelineSelector,\n      snapshotId: explorerPath.snapshotId ? explorerPath.snapshotId : undefined,\n      rootHandleID: parentNames.join('.'),\n      requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n    },\n  });\n\n  return (\n    <Loading<PipelineExplorerRootQueryQuery> queryResult={pipelineResult}>\n      {({pipelineSnapshotOrError: result}) => {\n        if (result.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph={isGraph}\n              result={result}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n        const assetNodesPresent = result.solidHandles.some(\n          (h) => h.solid.definition.assetNodes.length > 0,\n        );\n        if (options.preferAssetRendering && assetNodesPresent) {\n          return (\n            <AssetGraphExplorer\n              options={options}\n              setOptions={setOptions}\n              fetchOptions={{pipelineSelector}}\n              explorerPath={explorerPath}\n              onChangeExplorerPath={onChangeExplorerPath}\n              onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n            />\n          );\n        }\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={onChangeExplorerPath}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={isGraph}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const PIPELINE_EXPLORER_ROOT_QUERY = graphql(`\n  query PipelineExplorerRootQuery(\n    $snapshotPipelineSelector: PipelineSelector\n    $snapshotId: String\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    pipelineSnapshotOrError(\n      snapshotId: $snapshotId\n      activePipelineSelector: $snapshotPipelineSelector\n    ) {\n      ... on PipelineSnapshot {\n        id\n        name\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n        ...GraphExplorerFragment\n\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n            definition {\n              assetNodes {\n                id\n                ...GraphExplorerAssetNodeFragment\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n`);\n","import {\n  Box,\n  CursorHistoryControls,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {graphql} from '../graphql';\nimport {PipelineRunsRootQueryQuery, PipelineRunsRootQueryQueryVariables} from '../graphql/graphql';\nimport {RunTable} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterTokenType,\n  RunsFilterInput,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {useJobTitle} from './useJobTitle';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = ['status', 'tag'];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = React.useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQueryQuery,\n    PipelineRunsRootQueryQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.runId;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n            const runs = pipelineRunsOrError.results;\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n            return (\n              <>\n                <Box\n                  flex={{alignItems: 'flex-start', justifyContent: 'space-between'}}\n                  padding={{top: 8, horizontal: 24}}\n                >\n                  <Box flex={{direction: 'row', gap: 8}}>\n                    {permanentTokens.map(({token, value}) => (\n                      <Tag key={token}>{`${token}:${value}`}</Tag>\n                    ))}\n                  </Box>\n                  <QueryRefreshCountdown refreshState={refreshState} />\n                </Box>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <RunsFilterInput\n                        enabledFilters={ENABLED_FILTERS}\n                        tokens={filterTokens}\n                        onChange={setFilterTokens}\n                        loading={queryResult.loading}\n                      />\n                    }\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = graphql(`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n`);\n","import {useQuery} from '@apollo/client';\nimport {PageHeader, Tabs, Tag, Heading, FontFamily} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {graphql} from '../graphql';\nimport {explorerPathToString, ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useActivePipelineForName} from '../workspace/WorkspaceContext';\nimport {workspacePipelinePathGuessRepo} from '../workspace/workspacePath';\n\nconst SNAPSHOT_PARENT_QUERY = graphql(`\n  query SnapshotQuery($snapshotId: String!) {\n    pipelineSnapshotOrError(snapshotId: $snapshotId) {\n      ... on PipelineSnapshot {\n        id\n        parentSnapshotId\n      }\n    }\n  }\n`);\n\ninterface SnapshotNavProps {\n  activeTab?: string;\n  explorerPath: ExplorerPath;\n}\n\nexport const SnapshotNav = (props: SnapshotNavProps) => {\n  const {activeTab = '', explorerPath} = props;\n  const {pipelineName, snapshotId = ''} = explorerPath;\n  const explorerPathString = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  const currentPipelineState = useActivePipelineForName(pipelineName);\n  const isJob = !!currentPipelineState?.isJob;\n  const currentSnapshotID = currentPipelineState?.pipelineSnapshotId;\n\n  const {data, loading} = useQuery(SNAPSHOT_PARENT_QUERY, {\n    variables: {snapshotId},\n  });\n\n  const tag = () => {\n    if (loading) {\n      return (\n        <Tag intent=\"none\" minimal>\n          ...\n        </Tag>\n      );\n    }\n\n    if (\n      !currentSnapshotID ||\n      (currentSnapshotID !== snapshotId &&\n        data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n        data?.pipelineSnapshotOrError?.parentSnapshotId !== currentSnapshotID)\n    ) {\n      return (\n        <Tag intent=\"warning\" minimal>\n          Snapshot\n        </Tag>\n      );\n    }\n\n    return (\n      <Tag intent=\"success\" minimal>\n        Current\n      </Tag>\n    );\n  };\n\n  const tabs = [\n    {\n      text: 'Definition',\n      pathComponent: '',\n      href: `/snapshots/${explorerPathString}`,\n    },\n    {\n      text: 'Runs',\n      pathComponent: 'runs',\n      href: `/snapshots/${explorerPathString}runs`,\n    },\n  ];\n\n  return (\n    <PageHeader\n      title={\n        <Heading style={{fontFamily: FontFamily.monospace, fontSize: '20px'}}>\n          {explorerPath.snapshotId?.slice(0, 8)}\n        </Heading>\n      }\n      tags={\n        <>\n          <Tag icon=\"schema\">\n            Snapshot of{' '}\n            <Link to={workspacePipelinePathGuessRepo(explorerPath.pipelineName, isJob)}>\n              {explorerPath.pipelineName}\n            </Link>\n          </Tag>\n          {tag()}\n        </>\n      }\n      tabs={\n        <Tabs selectedTabId={activeTab}>\n          {tabs.map((tab) => {\n            const {href, text, pathComponent} = tab;\n            return <TabLink key={text} id={pathComponent} title={text} to={href} />;\n          })}\n        </Tabs>\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport {Route, Switch, useParams} from 'react-router-dom';\n\nimport {PipelineExplorerSnapshotRoot} from '../pipelines/PipelineExplorerRoot';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {PipelineRunsRoot} from '../pipelines/PipelineRunsRoot';\n\nimport {SnapshotNav} from './SnapshotNav';\n\nexport const SnapshotRoot = () => {\n  const {pipelinePath, tab} = useParams<{\n    pipelinePath: string;\n    tab?: string;\n  }>();\n  const explorerPath = explorerPathFromString(pipelinePath);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <SnapshotNav activeTab={tab} explorerPath={explorerPath} />\n      <Switch>\n        <Route path=\"/snapshots/:pipelinePath/runs\">\n          <PipelineRunsRoot />\n        </Route>\n        <Route path=\"/snapshots/(/?.*)\">\n          <PipelineExplorerSnapshotRoot />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default SnapshotRoot;\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  $top: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n"],"names":["PipelineExplorerSnapshotRoot","useTrackPageView","params","useParams","explorerPath","explorerPathFromString","pipelineName","snapshotId","history","useHistory","useDocumentTitle","slice","PipelineExplorerContainer","onChangeExplorerPath","path","mode","explorerPathToString","onNavigateToSourceAssetNode","assetKey","push","assetDetailsPathForKey","repoAddress","isGraph","React","explodeComposites","preferAssetRendering","options","setOptions","parentNames","opNames","length","pipelineSelector","buildPipelineSelector","pipelineResult","useQuery","PIPELINE_EXPLORER_ROOT_QUERY","variables","snapshotPipelineSelector","undefined","rootHandleID","join","requestScopeHandleID","queryResult","result","pipelineSnapshotOrError","__typename","parentHandle","solidHandle","displayedHandles","explodeCompositesInHandleGraph","solidHandles","assetNodesPresent","some","h","solid","definition","assetNodes","fetchOptions","container","handles","getInvocations","definitionName","filter","s","name","map","handleID","ENABLED_FILTERS","PipelineRunsRoot","props","pipelinePath","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","permanentTokens","token","value","Boolean","allTokens","repoToken","DagsterTag","repoAddressAsTag","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","runId","getResultArray","data","paginationProps","onAddTag","tokenAsString","tokenToString","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refetch","allowStaleData","padding","vertical","icon","title","description","message","displayed","hasNextCursor","hasPrevCursor","flex","alignItems","justifyContent","top","horizontal","direction","gap","$top","actionBarComponents","enabledFilters","tokens","onChange","loading","style","marginTop","SNAPSHOT_PARENT_QUERY","SnapshotNav","activeTab","explorerPathString","currentPipelineState","useActivePipelineForName","currentSnapshotID","pipelineSnapshotId","tabs","text","pathComponent","href","PageHeader","fontFamily","FontFamily","fontSize","tags","Tag","to","workspacePipelinePathGuessRepo","intent","minimal","parentSnapshotId","tag","Tabs","selectedTabId","tab","TabLink","id","SnapshotRoot","display","flexDirection","minWidth","width","height","StickyTableContainer","styled","Colors"],"sourceRoot":""}