dataset:
  method: 'QLIPP'
  # Reconstruction Method 'QLIPP' or 'PhaseFromBF'

  mode: '2D'
  # Mode for reconstruction, '2D' or '3D'

  data_dir: '/path/to/raw/data'
  # (str) path to the raw data directory (folder which holds .tif files) or the root .zarr file

  save_dir: '/path/to/save/directory'
  # (str) path to the directory in which the data will be saved

  data_save_name: 'Test_Data'
  # (str) Name of the zarr dataset that will be written.

  positions: [1]
  # (str or list) Positions within the dataset that are to be analyzed.
  ##   'all'
  ##   [!!python/tuple [0, N]] for pos 0 through N
  ##   [0, 1, 5] for pos 0, 1, and 5
  ##   [!!python/tuple [0, 15], [19, 25]] for pos 0 through 15, 19, and 25

  timepoints: [0]
  # (str or list) timepoints within the dataset that are to be analyzed.
  ##   'all'
  ##   [!!python/tuple [0, N]] for timepoint 0 through N
  ##   [0, 1, 5] for pos 0, 1, and 5
  ##   [!!python/tuple [0, 15], [19, 25]] for timepoints 0 through 15, 19, and 25

  background: './pytest_temp/pipeline_test/2022_08_04_recOrder_pytest_20x_04NA/BG'
  # (str) Background folder within the experiment folder

  calibration_metadata: './pytest_temp/pipeline_test/2022_08_04_recOrder_pytest_20x_04NA/calibration_metadata.txt'
  # (str) path to the qlipp calibration metadata file

pre_processing:
  denoise:
    use: False
    channels: ['S0', 'S1', 'S2', 'S3'] # Choose which channels to denoise: S0, S1, S2, S3 or BF
    threshold: [0.1, 0.1, 0.1, 0.1] # Must match length of channels
    level: [1, 1, 1, 1] # must match length of channels


processing:
  output_channels: ['Retardance', 'Orientation', 'Brightfield', 'Phase2D', 'S0', 'S1', 'S2', 'S3']

  # (list) Any combination of the following values.
  #    'Retardance', 'Orientation','Brightfield', 'Phase3D'. 'S0', 'S1', 'S2', 'S3'
  #     order of the channels specifies the order in which they will be written

  background_correction: 'local_fit'
  # (str) Background correction method, one of the following
  ##   'None': no background correction will be performed
  ##   'local': for estimating background with scipy uniform filter
  ##   'local_fit': for estimating background with polynomial fit
  ##   'global': for normal background subtraction with the provided background

  use_gpu: False
  # (bool) Option to use GPU processing if True (require cupy to be installed)

  gpu_id: 0
  # (int) ID of GPU to be used

  ########################################
  #    PHASE RECONSTRUCTION PARAMETERS   #
  ########################################

  wavelength: 532
  # (int) wavelength of the illumination in nm

  pixel_size: 6.5
  # (float) Camera pixel size in the unit of um

  magnification: 20
  # (float) Magnification of the objective

  NA_objective: 0.55
  # (float) Numerical aperture of the objective

  NA_condenser: 0.4
  # (float) Numerical aperture of the condenser

  n_objective_media: 1.0
  # (float) Refractive index of the objective immersion oil

  focus_zidx: 40
  # (int) Index of the focused z slice of the dataset for 2D phase reconstruction

  pad_z: 0
  # (int) Number of z slices padded above and below the dataset for 3D phase reconstruction to avoid boundary artifacts

  ## Denoiser parameters ##
  phase_denoiser_2D: 'Tikhonov'
    # (str) Options of denoiser for 2D phase reconstruction
    ##   'Tikhonov' or 'TV' (total variation)

  #### 2D Tikhonov parameter ####
  # if noise is higher raise the regularization parameter an order of magnitude to see if the recon is better

  Tik_reg_abs_2D: 1.0e-4
  # (float) Tikhonov regularization parameter for 2D absorption
  ##   1.0e-3 should work generally when noise is low

  Tik_reg_ph_2D: 1.0e-4
  # (float) Tikhonov regularization parameter for 2D phase
  ##   1.0e-3 should work generally when noise is low

  rho_2D: 1
  # (float) rho parameters in the 2D ADMM formulation
  ##   1 is generally good, no need to tune

  itr_2D: 50
  # (int) Number of iterations for 2D TV denoiser
  ##   50 is generally good, no need to tune

  TV_reg_abs_2D: 1.0e-4
  # (float) TV regularization parameter for 2D absorption
  ##   1e-4 is generally good

  TV_reg_ph_2D: 1.0e-4
  # (float) TV regularization parameter for 2D phase
  ##   1e-4 is generally good

  # -------- 3D ---------

  phase_denoiser_3D: 'Tikhonov'
  # (str) Options of denoiser for 3D phase reconstruction
  ##   'Tikhonov' or 'TV' (total variation)

  #### 3D Tikhonov parameters ####
  # if noise is higher raise an order of magnitude to see if the recon is better

  Tik_reg_ph_3D: 1.0e-4
  # (float) Tikhonov regularization parameter for 3D phase
  ##   1.0e-3 to 1.0e-4 should work generally when noise is low

  #### 3D TV parameters ####
  # For more noisy data, raise TV_reg to enforce stronger denoising effect

  rho_3D: 1.0e-3
  # (float) rho parameters in the 2D ADMM formulation
  ##   1.0e-3 is generally good, no need to tune

  itr_3D: 50
  # (int) Number of iterations for 3D TV denoiser
  ##   50 is generally good, no need to tune

  TV_reg_ph_3D: 5.0e-5
  # (float) TV regularization parameter for 3D phase
  ##   5.0e-5 is generally good