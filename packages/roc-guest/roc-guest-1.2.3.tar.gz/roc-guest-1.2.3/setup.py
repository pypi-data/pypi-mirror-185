# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['roc',
 'roc.guest',
 'roc.guest.models',
 'roc.guest.models.meb_gse',
 'roc.guest.models.meb_gse_data',
 'roc.guest.models.versions',
 'roc.guest.tasks',
 'roc.guest.tests']

package_data = \
{'': ['*'], 'roc.guest': ['scripts/*', 'templates/*']}

install_requires = \
['Jinja2>=3.0,<4.0',
 'mysqlclient>=1.4.6,<2.0.0',
 'poppy-core',
 'poppy-pop',
 'roc-film>=1.0,<2.0',
 'roc-rpl>=1.0,<2.0']

setup_kwargs = {
    'name': 'roc-guest',
    'version': '1.2.3',
    'description': 'Gse data ReqUESTer (GUEST): Plugin to handle data products from/to ground tests (MEB GSE, ADS GSE)',
    'long_description': 'GUEST PLUGIN README\n===================\n\n[![pipeline status](https://gitlab.obspm.fr/ROC/Pipelines/Plugins/GUEST/badges/develop/pipeline.svg)](https://gitlab.obspm.fr/ROC/Pipelines/Plugins/GUEST/pipelines)\n\n\nINTRODUCTION\n-------------\n\nThis directory contains the source files of the RPW Gse data ReqUESTer (GUEST), a plugin used to handle data from GSE for RPW/Solar Orbiter (MEB GSE, ADS GSE).\n\nGUEST is designed to be run in an instance of the ROC Ground Test SGSE (RGTS).\n\nGUEST is developed with and run under the POPPY framework.\n\nCONTENT\n--------\n\n::\n\n    roc/                    plugin source files\n    .editorconfig           EditorConfig config file\n    .gitignore              .gitignore file\n    .pre-commit-config.yaml pre-commit config file\n    bump_descriptor.py      Python script to synchronize roc/film/descriptor.json content with the pyproject.toml data\n    poetry.lock             used by poetry package\n    pyproject.toml          pyproject.toml file (PEP518)\n    README.rst              readme file\n    setup.py                setup.py (required for editable mode. Automatically generated by dephell)\n\nHOWTO\n------\n\nHow to install the plugin?\n..........................\n\nThe roc.guest plugin is designed to be installed and run inside an instance of the ROC RGTS pipeline.\nHowever it can be installed manually, by entering:\n\n.. code::\n\n    python -m pip install /path_to_plugin\n\nN.B. To install the plugin in editable mode, run the command:\n\n.. code::\n\n    python -m pip install -e /path_to_plugin\n\nThe editable mode can only used if the setup.py file exits. Use the dephell module to generate it from the pyproject.toml file (dephell deps convert).\n\nWhat to do before committing a new version of the plugin?\n...........................................................\n\nFirst update metadata (version) in the plugin `pyproject.toml` file.\n\nThen be sure the descriptor.json and the setup.py files are up-to-date.\n\nTo update the descriptor file, just run the command\n\n.. code::\n\n    python bump_descriptor.py -m <message>\n\nWhere `<message>` is a change log for new version.\n\nHow to call the plugin?\n..........................\n\nThe roc.guest plugin can only by called from a POPPy-like pipeline (i.e, RGTS).\n\nThe main command is\n\n.. code::\n\n    python manage.py guest\n\nNotes:\n\n* The :code:`manage.py` file is inside the pipeline root directory (depending of the pipeline installation the alias :code:`pop` can be also used).\n* The command below will return the help message if no sub-command is passed\n',
    'author': 'Xavier Bonnin',
    'author_email': 'xavier.bonnin@obspm.fr',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://gitlab.obspm.fr/ROC/Pipelines/Plugins/GUEST',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4',
}


setup(**setup_kwargs)
