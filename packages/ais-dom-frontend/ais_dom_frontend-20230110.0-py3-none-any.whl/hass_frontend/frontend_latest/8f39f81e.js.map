{"version":3,"file":"8f39f81e.js","mappings":";;AAeA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;;ACpEA;AACA;;;AAMA;;AAIA;;;AAIA;AACA;;AAEA;AAIA;AACA;AACA;AACA;;;AAGA;;AAEA;AAIA;AA1FA;;;;;AAiGA;AACA;AAlGA;;;;;;;AA4GA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAgFA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/entities/entity-aliases/dialog-entity-aliases.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiDeleteOutline, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-area-picker\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../../components/ha-textfield\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EntityAliasesDialogParams } from \"./show-dialog-entity-aliases\";\n\n@customElement(\"dialog-entity-aliases\")\nclass DialogEntityAliases extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _params?: EntityAliasesDialogParams;\n\n  @state() private _aliases!: string[];\n\n  @state() private _submitting = false;\n\n  public async showDialog(params: EntityAliasesDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._aliases =\n      this._params.entity.aliases?.length > 0\n        ? this._params.entity.aliases\n        : [\"\"];\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const entityId = this._params.entity.entity_id;\n    const stateObj = entityId ? this.hass.states[entityId] : undefined;\n\n    const name = (stateObj && computeStateName(stateObj)) || entityId;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.aliases.heading\",\n          { name }\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert> `\n            : \"\"}\n          <div class=\"form\">\n            ${this._aliases.map(\n              (alias, index) => html`\n                <div class=\"layout horizontal center-center row\">\n                  <ha-textfield\n                    dialogInitialFocus=${index}\n                    .index=${index}\n                    class=\"flex-auto\"\n                    .label=${this.hass!.localize(\n                      \"ui.dialogs.entity_registry.editor.aliases.input_label\",\n                      { number: index + 1 }\n                    )}\n                    .value=${alias}\n                    ?data-last=${index === this._aliases.length - 1}\n                    @input=${this._editAlias}\n                    @keydown=${this._keyDownAlias}\n                  ></ha-textfield>\n                  <ha-icon-button\n                    .index=${index}\n                    slot=\"navigationIcon\"\n                    label=${this.hass!.localize(\n                      \"ui.dialogs.entity_registry.editor.aliases.remove_alias\",\n                      { number: index + 1 }\n                    )}\n                    @click=${this._removeAlias}\n                    .path=${mdiDeleteOutline}\n                  ></ha-icon-button>\n                </div>\n              `\n            )}\n            <div class=\"layout horizontal center-center\">\n              <mwc-button @click=${this._addAlias}>\n                ${this.hass!.localize(\n                  \"ui.dialogs.entity_registry.editor.aliases.add_alias\"\n                )}\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </mwc-button>\n            </div>\n          </div>\n        </div>\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this.closeDialog}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.aliases.save\"\n          )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _addAlias() {\n    this._aliases = [...this._aliases, \"\"];\n    await this.updateComplete;\n    const field = this.shadowRoot?.querySelector(`ha-textfield[data-last]`) as\n      | HaTextField\n      | undefined;\n    field?.focus();\n  }\n\n  private async _editAlias(ev: Event) {\n    const index = (ev.target as any).index;\n    this._aliases[index] = (ev.target as any).value;\n  }\n\n  private async _keyDownAlias(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      ev.stopPropagation();\n      this._addAlias();\n    }\n  }\n\n  private async _removeAlias(ev: Event) {\n    const index = (ev.target as any).index;\n    const aliases = [...this._aliases];\n    aliases.splice(index, 1);\n    this._aliases = aliases;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    const noEmptyAliases = this._aliases\n      .map((alias) => alias.trim())\n      .filter((alias) => alias);\n\n    try {\n      await this._params!.updateEntry({\n        aliases: noEmptyAliases,\n      });\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.aliases.unknown_error\"\n        );\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        .row {\n          margin-bottom: 8px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        ha-icon-button {\n          display: block;\n        }\n        mwc-button {\n          margin-left: 8px;\n        }\n        #alias_input {\n          margin-top: 8px;\n        }\n        .alias {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n          --mdc-icon-button-size: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-aliases\": DialogEntityAliases;\n  }\n}\n"],"names":[],"sourceRoot":""}