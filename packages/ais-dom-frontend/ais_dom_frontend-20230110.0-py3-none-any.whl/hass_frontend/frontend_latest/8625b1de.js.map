{"version":3,"file":"8625b1de.js","mappings":";;;;;;AAsBA;;;;AAKA;AC4FA;AACA;AACA;AAoCA;AACA;AAGA;;;AAGA;AAEA;AACA;;AAEA;AAKA;AAOA;AACA;AACA;;AAMA;AAGA;AAOA;AACA;;AAIA;AAIA;;AAgBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;;;;;;;;;;AAWA;;;;;;;AASA;;AAEA;;;;AAIA;;AAIA;;;;;AAMA;AAMA;;;AAGA;;;;AAOA;;;AAOA","sources":["webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/config/blueprint/ha-blueprint-overview.ts"],"sourcesContent":["import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import {\n  mdiDelete,\n  mdiDownload,\n  mdiHelpCircle,\n  mdiRobot,\n  mdiShareVariant,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport { showAutomationEditor } from \"../../../data/automation\";\nimport {\n  BlueprintDomain,\n  BlueprintMetaData,\n  Blueprints,\n  deleteBlueprint,\n} from \"../../../data/blueprint\";\nimport { showScriptEditor } from \"../../../data/script\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showAddBlueprintDialog } from \"./show-dialog-import-blueprint\";\n\ninterface BlueprintMetaDataPath extends BlueprintMetaData {\n  path: string;\n  error: boolean;\n}\n\nconst createNewFunctions = {\n  automation: (blueprintMeta: BlueprintMetaDataPath) => {\n    showAutomationEditor({\n      alias: blueprintMeta.name,\n      use_blueprint: { path: blueprintMeta.path },\n    });\n  },\n  script: (blueprintMeta: BlueprintMetaDataPath) => {\n    showScriptEditor({\n      alias: blueprintMeta.name,\n      use_blueprint: { path: blueprintMeta.path },\n    });\n  },\n};\n\n@customElement(\"ha-blueprint-overview\")\nclass HaBlueprintOverview extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public blueprints!: Record<\n    string,\n    Blueprints\n  >;\n\n  private _processedBlueprints = memoizeOne(\n    (blueprints: Record<string, Blueprints>) => {\n      const result: any[] = [];\n      Object.entries(blueprints).forEach(([type, typeBlueprints]) =>\n        Object.entries(typeBlueprints).forEach(([path, blueprint]) => {\n          if (\"error\" in blueprint) {\n            result.push({\n              name: blueprint.error,\n              type,\n              error: true,\n              path,\n            });\n          } else {\n            result.push({\n              ...blueprint.metadata,\n              type,\n              error: false,\n              path,\n            });\n          }\n        })\n      );\n      return result;\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow, _language): DataTableColumnContainer => ({\n      name: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.name\"\n        ),\n        main: true,\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        template: narrow\n          ? (name, entity: any) =>\n              html`\n                ${name}<br />\n                <div class=\"secondary\">${entity.path}</div>\n              `\n          : undefined,\n      },\n      type: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.type\"\n        ),\n        template: (type: BlueprintDomain) =>\n          html`${this.hass.localize(\n            `ui.panel.config.blueprint.overview.types.${type}`\n          )}`,\n        sortable: true,\n        filterable: true,\n        hidden: narrow,\n        direction: \"asc\",\n        width: \"10%\",\n      },\n      path: {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.headers.file_name\"\n        ),\n        sortable: true,\n        filterable: true,\n        hidden: narrow,\n        direction: \"asc\",\n        width: \"25%\",\n      },\n      create: {\n        title: \"\",\n        width: narrow ? undefined : \"20%\",\n        type: narrow ? \"icon-button\" : undefined,\n        template: (_, blueprint: BlueprintMetaDataPath) =>\n          blueprint.error\n            ? \"\"\n            : narrow\n            ? html`<ha-icon-button\n                .blueprint=${blueprint}\n                .label=${this.hass.localize(\n                  `ui.panel.config.blueprint.overview.create_${blueprint.domain}`\n                )}\n                @click=${this._createNew}\n                .path=${mdiRobot}\n              >\n              </ha-icon-button>`\n            : html`<mwc-button\n                .blueprint=${blueprint}\n                @click=${this._createNew}\n              >\n                ${this.hass.localize(\n                  `ui.panel.config.blueprint.overview.create_${blueprint.domain}`\n                )}\n              </mwc-button>`,\n      },\n      share: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : html`<ha-icon-button\n                .blueprint=${blueprint}\n                .disabled=${!blueprint.source_url}\n                .label=${this.hass.localize(\n                  blueprint.source_url\n                    ? \"ui.panel.config.blueprint.overview.share_blueprint\"\n                    : \"ui.panel.config.blueprint.overview.share_blueprint_no_url\"\n                )}\n                .path=${mdiShareVariant}\n                @click=${this._share}\n              ></ha-icon-button>`,\n      },\n      delete: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_, blueprint: any) =>\n          blueprint.error\n            ? \"\"\n            : html` <ha-icon-button\n                .blueprint=${blueprint}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.blueprint.overview.delete_blueprint\"\n                )}\n                .path=${mdiDelete}\n                @click=${this._delete}\n              ></ha-icon-button>`,\n      },\n    })\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (this.route.path === \"/import\") {\n      const url = extractSearchParam(\"blueprint_url\");\n      navigate(\"/config/blueprint/dashboard\", { replace: true });\n      if (url) {\n        this._addBlueprint(url);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._processedBlueprints(this.blueprints)}\n        id=\"entity_id\"\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.blueprint.overview.no_blueprints\"\n        )}\n        hasFab\n        .appendRow=${html` <div\n          class=\"mdc-data-table__cell\"\n          style=\"width: 100%; text-align: center;\"\n          role=\"cell\"\n        >\n          <a\n            href=\"https://www.home-assistant.io/get-blueprints\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            <mwc-button\n              >${this.hass.localize(\n                \"ui.panel.config.blueprint.overview.discover_more\"\n              )}</mwc-button\n            >\n          </a>\n        </div>`}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.blueprint.overview.add_blueprint\"\n          )}\n          extended\n          @click=${this._addBlueprintClicked}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiDownload}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.blueprint.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.blueprint.overview.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(\n              this.hass,\n              \"/docs/automation/using_blueprints/\"\n            )}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.blueprint.overview.learn_more\"\n            )}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private _addBlueprint(url?: string) {\n    showAddBlueprintDialog(this, {\n      url,\n      importedCallback: () => this._reload(),\n    });\n  }\n\n  private _addBlueprintClicked(): void {\n    this._addBlueprint();\n  }\n\n  private _reload() {\n    fireEvent(this, \"reload-blueprints\");\n  }\n\n  private _createNew = (ev) => {\n    const blueprint = ev.currentTarget.blueprint as BlueprintMetaDataPath;\n    createNewFunctions[blueprint.domain](blueprint);\n  };\n\n  private _share = (ev) => {\n    const blueprint = ev.currentTarget.blueprint;\n    const params = new URLSearchParams();\n    params.append(\"redirect\", \"blueprint_import\");\n    params.append(\"blueprint_url\", blueprint.source_url);\n    window.open(\n      `https://my.home-assistant.io/create-link/?${params.toString()}`\n    );\n  };\n\n  private _delete = async (ev) => {\n    const blueprint = ev.currentTarget.blueprint;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.confirm_delete_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.blueprint.overview.confirm_delete_text\",\n          { name: blueprint.name }\n        ),\n        confirmText: this.hass!.localize(\"ui.common.delete\"),\n        dismissText: this.hass!.localize(\"ui.common.cancel\"),\n        destructive: true,\n      }))\n    ) {\n      return;\n    }\n    await deleteBlueprint(this.hass, blueprint.domain, blueprint.path);\n    fireEvent(this, \"reload-blueprints\");\n  };\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-blueprint-overview\": HaBlueprintOverview;\n  }\n}\n"],"names":[],"sourceRoot":""}