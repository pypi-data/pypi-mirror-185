from typing import ClassVar, List, Optional, Union

from typing import overload
import numpy
import pydrake.common._module_py
import pydrake.math
import pydrake.symbolic

class Deterministic(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    value: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Deterministic) -> None: ...
    @overload
    def __init__(self, value: float) -> None: ...
    def __copy__(self) -> Deterministic: ...
    def __deepcopy__(self, arg0: dict) -> Deterministic: ...

class DeterministicVectorX(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    value: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DeterministicVectorX) -> None: ...
    @overload
    def __init__(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> DeterministicVectorX: ...
    def __deepcopy__(self, arg0: dict) -> DeterministicVectorX: ...

class Distribution:
    def __init__(self, *args, **kwargs) -> None: ...
    def Mean(self) -> float: ...
    def Sample(self, generator: pydrake.common._module_py.RandomGenerator) -> float: ...
    def ToSymbolic(self) -> pydrake.symbolic.Expression: ...

class DistributionVector:
    def __init__(self, *args, **kwargs) -> None: ...
    def Mean(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def Sample(self, generator: pydrake.common._module_py.RandomGenerator) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def ToSymbolic(self) -> numpy.ndarray[object[m,1]]: ...

class Gaussian(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    mean: float
    stddev: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Gaussian) -> None: ...
    @overload
    def __init__(self, mean: float, stddev: float) -> None: ...
    def __copy__(self) -> Gaussian: ...
    def __deepcopy__(self, arg0: dict) -> Gaussian: ...

class GaussianVectorX(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    mean: numpy.ndarray[numpy.float64[m,1]]
    stddev: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GaussianVectorX) -> None: ...
    @overload
    def __init__(self, mean: numpy.ndarray[numpy.float64[m,1]], stddev: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> GaussianVectorX: ...
    def __deepcopy__(self, arg0: dict) -> GaussianVectorX: ...

class Rotation:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Rotation) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix_[float]) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.math.RollPitchYaw_[float]) -> None: ...
    def GetDeterministicValue(self) -> pydrake.math.RotationMatrix_[float]: ...
    def IsDeterministic(self) -> bool: ...
    def ToSymbolic(self) -> pydrake.math.RotationMatrix_[Expression]: ...
    def set_rpy_deg(self, rpy_deg: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> Rotation: ...
    def __deepcopy__(self, arg0: dict) -> Rotation: ...

class Transform:
    base_frame: Optional[str]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Transform) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform_[float]) -> None: ...
    def GetDeterministicValue(self) -> pydrake.math.RigidTransform_[float]: ...
    def IsDeterministic(self) -> bool: ...
    def Sample(self, generator: pydrake.common._module_py.RandomGenerator) -> pydrake.math.RigidTransform_[float]: ...
    def ToSymbolic(self) -> pydrake.math.RigidTransform_[Expression]: ...
    def set_rotation_rpy_deg(self, rpy_deg: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    def __copy__(self) -> Transform: ...
    def __deepcopy__(self, arg0: dict) -> Transform: ...

class Uniform(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    max: float
    min: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Uniform) -> None: ...
    @overload
    def __init__(self, min: float, max: float) -> None: ...
    def __copy__(self) -> Uniform: ...
    def __deepcopy__(self, arg0: dict) -> Uniform: ...

class UniformDiscrete(Distribution):
    __fields__: ClassVar[tuple] = ...  # read-only
    values: List[float]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformDiscrete) -> None: ...
    @overload
    def __init__(self, values: List[float]) -> None: ...
    def __copy__(self) -> UniformDiscrete: ...
    def __deepcopy__(self, arg0: dict) -> UniformDiscrete: ...

class UniformVectorX(DistributionVector):
    __fields__: ClassVar[tuple] = ...  # read-only
    max: numpy.ndarray[numpy.float64[m,1]]
    min: numpy.ndarray[numpy.float64[m,1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: UniformVectorX) -> None: ...
    @overload
    def __init__(self, min: numpy.ndarray[numpy.float64[m,1]], max: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def __copy__(self) -> UniformVectorX: ...
    def __deepcopy__(self, arg0: dict) -> UniformVectorX: ...

@overload
def GetDeterministicValue(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> float: ...
@overload
def GetDeterministicValue(vec: Union[numpy.ndarray[numpy.float64[m,1]],DeterministicVectorX,GaussianVectorX,UniformVectorX,Deterministic,Gaussian,Uniform]) -> numpy.ndarray[numpy.float64[m,1]]: ...
@overload
def IsDeterministic(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> bool: ...
@overload
def IsDeterministic(vec: Union[numpy.ndarray[numpy.float64[m,1]],DeterministicVectorX,GaussianVectorX,UniformVectorX,Deterministic,Gaussian,Uniform]) -> bool: ...
def Mean(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> float: ...
def Sample(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete], generator: pydrake.common._module_py.RandomGenerator) -> float: ...
def ToDistribution(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> Distribution: ...
def ToDistributionVector(vec: Union[numpy.ndarray[numpy.float64[m,1]],DeterministicVectorX,GaussianVectorX,UniformVectorX,Deterministic,Gaussian,Uniform]) -> DistributionVector: ...
def ToSymbolic(var: Union[float,Deterministic,Gaussian,Uniform,UniformDiscrete]) -> pydrake.symbolic.Expression: ...
