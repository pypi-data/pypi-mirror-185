from typing import ClassVar

from typing import overload
import numpy
import pydrake.autodiffutils
import pydrake.common._module_py
import pydrake.common.cpp_template
import pydrake.symbolic
Polynomial_: pydrake.common.cpp_template.TemplateClass

class Polynomial:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[float], tol: float = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> bool: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[float]: ...
    def GetCoefficients(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: float = ...) -> Polynomial_[float]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[float]: ...
    def __eq__(self, arg0: Polynomial_[float]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[float]: ...
    def __neg__(self) -> Polynomial_[float]: ...
    def __radd__(self, arg0: float) -> Polynomial_[float]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[float]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[float]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[float]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[float]: ...

class Polynomial_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[AutoDiffXd], tol: pydrake.autodiffutils.AutoDiffXd = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> bool: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[AutoDiffXd]: ...
    def GetCoefficients(self) -> numpy.ndarray[object[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: pydrake.autodiffutils.AutoDiffXd = ...) -> Polynomial_[AutoDiffXd]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[AutoDiffXd]) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __eq__(self, arg0: Polynomial_[AutoDiffXd]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[AutoDiffXd]) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __neg__(self) -> Polynomial_[AutoDiffXd]: ...
    def __radd__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[AutoDiffXd]) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...

class Polynomial_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.symbolic.Expression) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[Expression], tol: pydrake.symbolic.Expression = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> pydrake.symbolic.Formula: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[Expression]: ...
    def GetCoefficients(self) -> numpy.ndarray[object[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: pydrake.symbolic.Expression = ...) -> Polynomial_[Expression]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[Expression]) -> Polynomial_[Expression]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __eq__(self, arg0: Polynomial_[Expression]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[Expression]) -> Polynomial_[Expression]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __neg__(self) -> Polynomial_[Expression]: ...
    def __radd__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[Expression]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[Expression]) -> Polynomial_[Expression]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[Expression]: ...

class Polynomial_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[float], tol: float = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> bool: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[float]: ...
    def GetCoefficients(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: float = ...) -> Polynomial_[float]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[float]: ...
    def __eq__(self, arg0: Polynomial_[float]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[float]: ...
    def __neg__(self) -> Polynomial_[float]: ...
    def __radd__(self, arg0: float) -> Polynomial_[float]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[float]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[float]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[float]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[float]: ...

class _TemporaryName_N5drake10PolynomialIN5Eigen14AutoDiffScalarINS1_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[AutoDiffXd], tol: pydrake.autodiffutils.AutoDiffXd = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> bool: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[AutoDiffXd]: ...
    def GetCoefficients(self) -> numpy.ndarray[object[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: pydrake.autodiffutils.AutoDiffXd = ...) -> Polynomial_[AutoDiffXd]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[AutoDiffXd]) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __eq__(self, arg0: Polynomial_[AutoDiffXd]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[AutoDiffXd]) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __neg__(self) -> Polynomial_[AutoDiffXd]: ...
    def __radd__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[AutoDiffXd]) -> Polynomial_[AutoDiffXd]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[AutoDiffXd]: ...

class _TemporaryName_N5drake10PolynomialINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: pydrake.symbolic.Expression) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[Expression], tol: pydrake.symbolic.Expression = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> pydrake.symbolic.Formula: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[Expression]: ...
    def GetCoefficients(self) -> numpy.ndarray[object[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: pydrake.symbolic.Expression = ...) -> Polynomial_[Expression]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[Expression]) -> Polynomial_[Expression]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __eq__(self, arg0: Polynomial_[Expression]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[Expression]) -> Polynomial_[Expression]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __neg__(self) -> Polynomial_[Expression]: ...
    def __radd__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[Expression]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[Expression]) -> Polynomial_[Expression]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[Expression]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[Expression]: ...

class _TemporaryName_N5drake10PolynomialIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def CoefficientsAlmostEqual(self, other: Polynomial_[float], tol: float = ..., tol_type: pydrake.common._module_py.ToleranceType = ...) -> bool: ...
    def Derivative(self, derivative_order: int = ...) -> Polynomial_[float]: ...
    def GetCoefficients(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def GetDegree(self) -> int: ...
    def GetNumberOfCoefficients(self) -> int: ...
    def Integral(self, integration_constant: float = ...) -> Polynomial_[float]: ...
    def IsAffine(self) -> bool: ...
    @overload
    def __add__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __add__(self, arg0: float) -> Polynomial_[float]: ...
    def __eq__(self, arg0: Polynomial_[float]) -> bool: ...
    @overload
    def __mul__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __mul__(self, arg0: float) -> Polynomial_[float]: ...
    def __neg__(self) -> Polynomial_[float]: ...
    def __radd__(self, arg0: float) -> Polynomial_[float]: ...
    def __rmul__(self, arg0: float) -> Polynomial_[float]: ...
    def __rsub__(self, arg0: float) -> Polynomial_[float]: ...
    @overload
    def __sub__(self, arg0: Polynomial_[float]) -> Polynomial_[float]: ...
    @overload
    def __sub__(self, arg0: float) -> Polynomial_[float]: ...
    def __truediv__(self, arg0: float) -> Polynomial_[float]: ...
