from typing import Any, ClassVar, List

from typing import overload
import PixelType
import numpy
import pydrake.autodiffutils
import pydrake.common.cpp_param
import pydrake.common.cpp_template
import pydrake.common.eigen_geometry
import pydrake.geometry
import pydrake.geometry.render
import pydrake.math
import pydrake.multibody.math
import pydrake.multibody.optimization
import pydrake.multibody.plant
import pydrake.multibody.tree
import pydrake.perception
import pydrake.solvers
import pydrake.symbolic
import pydrake.systems.framework
import pydrake.systems.sensors
List: pydrake.common.cpp_param._Generic
Value: pydrake.common.cpp_template.TemplateClass
_AbstractValue_Make: function

class AbstractValue:
    Make: ClassVar[function] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> AbstractValue: ...
    def SetFrom(self, arg0: AbstractValue) -> None: ...
    def get_mutable_value(self, *args, **kwargs) -> None: ...
    def get_value(self, *args, **kwargs) -> None: ...
    def set_value(self, *args, **kwargs) -> None: ...
    def __copy__(self) -> AbstractValue: ...
    def __deepcopy__(self, arg0: dict) -> AbstractValue: ...

class Value[AbstractParameterIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.AbstractParameterIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.AbstractParameterIndex: ...
    def get_value(self) -> pydrake.systems.framework.AbstractParameterIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.AbstractParameterIndex) -> None: ...

class Value[AbstractStateIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.AbstractStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.AbstractStateIndex: ...
    def get_value(self) -> pydrake.systems.framework.AbstractStateIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.AbstractStateIndex) -> None: ...

class Value[BasicVector_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.BasicVector_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.systems.framework.BasicVector_[AutoDiffXd]: ...
    @overload
    def set_value(self, arg0: pydrake.systems.framework.BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def set_value(self, value: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...

class Value[BasicVector_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.BasicVector_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.BasicVector_[Expression]: ...
    def get_value(self) -> pydrake.systems.framework.BasicVector_[Expression]: ...
    @overload
    def set_value(self, arg0: pydrake.systems.framework.BasicVector_[Expression]) -> None: ...
    @overload
    def set_value(self, value: pydrake.symbolic.Expression) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...

class Value[BasicVector_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.BasicVector_[float]: ...
    def get_value(self) -> pydrake.systems.framework.BasicVector_[float]: ...
    @overload
    def set_value(self, arg0: pydrake.systems.framework.BasicVector_[float]) -> None: ...
    @overload
    def set_value(self, value: float) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class Value[BodyIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.BodyIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.BodyIndex: ...
    def get_value(self) -> pydrake.multibody.tree.BodyIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.BodyIndex) -> None: ...

class Value[CacheIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.CacheIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.CacheIndex: ...
    def get_value(self) -> pydrake.systems.framework.CacheIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.CacheIndex) -> None: ...

class Value[ClpSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.ClpSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.ClpSolverDetails: ...
    def get_value(self) -> pydrake.solvers.ClpSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.ClpSolverDetails) -> None: ...

class Value[ConstraintIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.ConstraintIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.ConstraintIndex: ...
    def get_value(self) -> pydrake.multibody.tree.ConstraintIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.ConstraintIndex) -> None: ...

class Value[ContactResults_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ContactResults_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ContactResults_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.plant.ContactResults_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.plant.ContactResults_[AutoDiffXd]) -> None: ...

class Value[ContactResults_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ContactResults_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ContactResults_[Expression]: ...
    def get_value(self) -> pydrake.multibody.plant.ContactResults_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.plant.ContactResults_[Expression]) -> None: ...

class Value[ContactResults_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ContactResults_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ContactResults_[float]: ...
    def get_value(self) -> pydrake.multibody.plant.ContactResults_[float]: ...
    def set_value(self, arg0: pydrake.multibody.plant.ContactResults_[float]) -> None: ...

class Value[ContactWrench](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.optimization.ContactWrench) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.optimization.ContactWrench: ...
    def get_value(self) -> pydrake.multibody.optimization.ContactWrench: ...
    def set_value(self, arg0: pydrake.multibody.optimization.ContactWrench) -> None: ...

class Value[ContinuousStateIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.ContinuousStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.ContinuousStateIndex: ...
    def get_value(self) -> pydrake.systems.framework.ContinuousStateIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.ContinuousStateIndex) -> None: ...

class Value[CoulombFriction_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.CoulombFriction_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.CoulombFriction_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.plant.CoulombFriction_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.plant.CoulombFriction_[AutoDiffXd]) -> None: ...

class Value[CoulombFriction_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.CoulombFriction_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.CoulombFriction_[Expression]: ...
    def get_value(self) -> pydrake.multibody.plant.CoulombFriction_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.plant.CoulombFriction_[Expression]) -> None: ...

class Value[CoulombFriction_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.CoulombFriction_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.CoulombFriction_[float]: ...
    def get_value(self) -> pydrake.multibody.plant.CoulombFriction_[float]: ...
    def set_value(self, arg0: pydrake.multibody.plant.CoulombFriction_[float]) -> None: ...

class Value[CsdpSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.CsdpSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.CsdpSolverDetails: ...
    def get_value(self) -> pydrake.solvers.CsdpSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.CsdpSolverDetails) -> None: ...

class Value[DependencyTicket](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.DependencyTicket) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.DependencyTicket: ...
    def get_value(self) -> pydrake.systems.framework.DependencyTicket: ...
    def set_value(self, arg0: pydrake.systems.framework.DependencyTicket) -> None: ...

class Value[DiscreteStateIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.DiscreteStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.DiscreteStateIndex: ...
    def get_value(self) -> pydrake.systems.framework.DiscreteStateIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.DiscreteStateIndex) -> None: ...

class Value[ExternallyAppliedSpatialForce_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]) -> None: ...

class Value[ExternallyAppliedSpatialForce_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]: ...
    def get_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]) -> None: ...

class Value[ExternallyAppliedSpatialForce_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]: ...
    def get_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]: ...
    def set_value(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]) -> None: ...

class Value[ForceElementIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.ForceElementIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.ForceElementIndex: ...
    def get_value(self) -> pydrake.multibody.tree.ForceElementIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.ForceElementIndex) -> None: ...

class Value[FrameIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.FrameIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.FrameIndex: ...
    def get_value(self) -> pydrake.multibody.tree.FrameIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.FrameIndex) -> None: ...

class Value[FramePoseVector_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.FramePoseVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.FramePoseVector_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.geometry.FramePoseVector_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.geometry.FramePoseVector_[AutoDiffXd]) -> None: ...

class Value[FramePoseVector_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.FramePoseVector_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.FramePoseVector_[Expression]: ...
    def get_value(self) -> pydrake.geometry.FramePoseVector_[Expression]: ...
    def set_value(self, arg0: pydrake.geometry.FramePoseVector_[Expression]) -> None: ...

class Value[FramePoseVector_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.FramePoseVector_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.FramePoseVector_[float]: ...
    def get_value(self) -> pydrake.geometry.FramePoseVector_[float]: ...
    def set_value(self, arg0: pydrake.geometry.FramePoseVector_[float]) -> None: ...

class Value[GurobiSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.GurobiSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.GurobiSolverDetails: ...
    def get_value(self) -> pydrake.solvers.GurobiSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.GurobiSolverDetails) -> None: ...

class Value[HydroelasticContactInfo_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_[AutoDiffXd]) -> None: ...

class Value[HydroelasticContactInfo_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_[Expression]: ...
    def get_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_[Expression]) -> None: ...

class Value[HydroelasticContactInfo_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_[float]: ...
    def get_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_[float]: ...
    def set_value(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_[float]) -> None: ...

class Value[Image[PixelType.kDepth16U]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.Image[PixelType.kDepth16U]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.Image[PixelType.kDepth16U]: ...
    def get_value(self) -> pydrake.systems.sensors.Image[PixelType.kDepth16U]: ...
    def set_value(self, arg0: pydrake.systems.sensors.Image[PixelType.kDepth16U]) -> None: ...

class Value[Image[PixelType.kDepth32F]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.Image[PixelType.kDepth32F]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.Image[PixelType.kDepth32F]: ...
    def get_value(self) -> pydrake.systems.sensors.Image[PixelType.kDepth32F]: ...
    def set_value(self, arg0: pydrake.systems.sensors.Image[PixelType.kDepth32F]) -> None: ...

class Value[Image[PixelType.kLabel16I]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.Image[PixelType.kLabel16I]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.Image[PixelType.kLabel16I]: ...
    def get_value(self) -> pydrake.systems.sensors.Image[PixelType.kLabel16I]: ...
    def set_value(self, arg0: pydrake.systems.sensors.Image[PixelType.kLabel16I]) -> None: ...

class Value[Image[PixelType.kRgba8U]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.Image[PixelType.kRgba8U]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.Image[PixelType.kRgba8U]: ...
    def get_value(self) -> pydrake.systems.sensors.Image[PixelType.kRgba8U]: ...
    def set_value(self, arg0: pydrake.systems.sensors.Image[PixelType.kRgba8U]) -> None: ...

class Value[InputPortIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.InputPortIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.InputPortIndex: ...
    def get_value(self) -> pydrake.systems.framework.InputPortIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.InputPortIndex) -> None: ...

class Value[IpoptSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.IpoptSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.IpoptSolverDetails: ...
    def get_value(self) -> pydrake.solvers.IpoptSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.IpoptSolverDetails) -> None: ...

class Value[Isometry3_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.common.eigen_geometry.Isometry3_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.common.eigen_geometry.Isometry3_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.common.eigen_geometry.Isometry3_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.common.eigen_geometry.Isometry3_[AutoDiffXd]) -> None: ...

class Value[Isometry3_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.common.eigen_geometry.Isometry3_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.common.eigen_geometry.Isometry3_[Expression]: ...
    def get_value(self) -> pydrake.common.eigen_geometry.Isometry3_[Expression]: ...
    def set_value(self, arg0: pydrake.common.eigen_geometry.Isometry3_[Expression]) -> None: ...

class Value[Isometry3_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.common.eigen_geometry.Isometry3_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.common.eigen_geometry.Isometry3_[float]: ...
    def get_value(self) -> pydrake.common.eigen_geometry.Isometry3_[float]: ...
    def set_value(self, arg0: pydrake.common.eigen_geometry.Isometry3_[float]) -> None: ...

class Value[JointActuatorIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.JointActuatorIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.JointActuatorIndex: ...
    def get_value(self) -> pydrake.multibody.tree.JointActuatorIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.JointActuatorIndex) -> None: ...

class Value[JointIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.JointIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.JointIndex: ...
    def get_value(self) -> pydrake.multibody.tree.JointIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.JointIndex) -> None: ...

class Value[ModelInstanceIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.ModelInstanceIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    def get_value(self) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.ModelInstanceIndex) -> None: ...

class Value[MosekSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.MosekSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.MosekSolverDetails: ...
    def get_value(self) -> pydrake.solvers.MosekSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.MosekSolverDetails) -> None: ...

class Value[NloptSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.NloptSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.NloptSolverDetails: ...
    def get_value(self) -> pydrake.solvers.NloptSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.NloptSolverDetails) -> None: ...

class Value[NumericParameterIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.NumericParameterIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.NumericParameterIndex: ...
    def get_value(self) -> pydrake.systems.framework.NumericParameterIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.NumericParameterIndex) -> None: ...

class Value[OsqpSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.OsqpSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.OsqpSolverDetails: ...
    def get_value(self) -> pydrake.solvers.OsqpSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.OsqpSolverDetails) -> None: ...

class Value[OutputPortIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.OutputPortIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.OutputPortIndex: ...
    def get_value(self) -> pydrake.systems.framework.OutputPortIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.OutputPortIndex) -> None: ...

class Value[PointCloud](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.perception.PointCloud) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.perception.PointCloud: ...
    def get_value(self) -> pydrake.perception.PointCloud: ...
    def set_value(self, arg0: pydrake.perception.PointCloud) -> None: ...

class Value[QueryObject_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.QueryObject_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.QueryObject_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.geometry.QueryObject_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.geometry.QueryObject_[AutoDiffXd]) -> None: ...

class Value[QueryObject_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.QueryObject_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.QueryObject_[Expression]: ...
    def get_value(self) -> pydrake.geometry.QueryObject_[Expression]: ...
    def set_value(self, arg0: pydrake.geometry.QueryObject_[Expression]) -> None: ...

class Value[QueryObject_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.QueryObject_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.QueryObject_[float]: ...
    def get_value(self) -> pydrake.geometry.QueryObject_[float]: ...
    def set_value(self, arg0: pydrake.geometry.QueryObject_[float]) -> None: ...

class Value[RenderLabel](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.render.RenderLabel) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.render.RenderLabel: ...
    def get_value(self) -> pydrake.geometry.render.RenderLabel: ...
    def set_value(self, arg0: pydrake.geometry.render.RenderLabel) -> None: ...

class Value[Rgba](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.Rgba) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.Rgba: ...
    def get_value(self) -> pydrake.geometry.Rgba: ...
    def set_value(self, arg0: pydrake.geometry.Rgba) -> None: ...

class Value[RigidTransform_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RigidTransform_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.math.RigidTransform_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.math.RigidTransform_[AutoDiffXd]) -> None: ...

class Value[RigidTransform_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RigidTransform_[Expression]: ...
    def get_value(self) -> pydrake.math.RigidTransform_[Expression]: ...
    def set_value(self, arg0: pydrake.math.RigidTransform_[Expression]) -> None: ...

class Value[RigidTransform_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RigidTransform_[float]: ...
    def get_value(self) -> pydrake.math.RigidTransform_[float]: ...
    def set_value(self, arg0: pydrake.math.RigidTransform_[float]) -> None: ...

class Value[RotationMatrix_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RotationMatrix_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.math.RotationMatrix_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.math.RotationMatrix_[AutoDiffXd]) -> None: ...

class Value[RotationMatrix_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RotationMatrix_[Expression]: ...
    def get_value(self) -> pydrake.math.RotationMatrix_[Expression]: ...
    def set_value(self, arg0: pydrake.math.RotationMatrix_[Expression]) -> None: ...

class Value[RotationMatrix_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RotationMatrix_[float]: ...
    def get_value(self) -> pydrake.math.RotationMatrix_[float]: ...
    def set_value(self, arg0: pydrake.math.RotationMatrix_[float]) -> None: ...

class Value[ScsSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.ScsSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.ScsSolverDetails: ...
    def get_value(self) -> pydrake.solvers.ScsSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.ScsSolverDetails) -> None: ...

class Value[SnoptSolverDetails](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.SnoptSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.SnoptSolverDetails: ...
    def get_value(self) -> pydrake.solvers.SnoptSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.SnoptSolverDetails) -> None: ...

class Value[SpatialAcceleration_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]) -> None: ...

class Value[SpatialAcceleration_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialAcceleration_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialAcceleration_[Expression]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialAcceleration_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialAcceleration_[Expression]) -> None: ...

class Value[SpatialAcceleration_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialAcceleration_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialAcceleration_[float]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialAcceleration_[float]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialAcceleration_[float]) -> None: ...

class Value[SpatialForce_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialForce_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialForce_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialForce_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialForce_[AutoDiffXd]) -> None: ...

class Value[SpatialForce_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialForce_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialForce_[Expression]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialForce_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialForce_[Expression]) -> None: ...

class Value[SpatialForce_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialForce_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialForce_[float]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialForce_[float]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialForce_[float]) -> None: ...

class Value[SpatialMomentum_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]) -> None: ...

class Value[SpatialMomentum_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialMomentum_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialMomentum_[Expression]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialMomentum_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialMomentum_[Expression]) -> None: ...

class Value[SpatialMomentum_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialMomentum_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialMomentum_[float]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialMomentum_[float]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialMomentum_[float]) -> None: ...

class Value[SpatialVelocity_[AutoDiffXd]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]) -> None: ...

class Value[SpatialVelocity_[Expression]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialVelocity_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialVelocity_[Expression]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialVelocity_[Expression]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialVelocity_[Expression]) -> None: ...

class Value[SpatialVelocity_[float]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialVelocity_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialVelocity_[float]: ...
    def get_value(self) -> pydrake.multibody.math.SpatialVelocity_[float]: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialVelocity_[float]) -> None: ...

class Value[SubsystemIndex](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.SubsystemIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.SubsystemIndex: ...
    def get_value(self) -> pydrake.systems.framework.SubsystemIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.SubsystemIndex) -> None: ...

class Value[bool](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> bool: ...
    def set_value(self, arg0: bool) -> None: ...

class Value[float](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> float: ...
    def set_value(self, arg0: float) -> None: ...

class Value[list[ExternallyAppliedSpatialForce_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[AutoDiffXd]]) -> None: ...

class Value[list[ExternallyAppliedSpatialForce_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[Expression]]) -> None: ...

class Value[list[ExternallyAppliedSpatialForce_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]]: ...
    def set_value(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_[float]]) -> None: ...

class Value[list[RigidTransform_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RigidTransform_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RigidTransform_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.math.RigidTransform_[AutoDiffXd]]) -> None: ...

class Value[list[RigidTransform_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RigidTransform_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RigidTransform_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.math.RigidTransform_[Expression]]) -> None: ...

class Value[list[RigidTransform_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RigidTransform_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RigidTransform_[float]]: ...
    def set_value(self, arg0: List[pydrake.math.RigidTransform_[float]]) -> None: ...

class Value[list[RotationMatrix_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RotationMatrix_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RotationMatrix_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.math.RotationMatrix_[AutoDiffXd]]) -> None: ...

class Value[list[RotationMatrix_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RotationMatrix_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RotationMatrix_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.math.RotationMatrix_[Expression]]) -> None: ...

class Value[list[RotationMatrix_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RotationMatrix_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RotationMatrix_[float]]: ...
    def set_value(self, arg0: List[pydrake.math.RotationMatrix_[float]]) -> None: ...

class Value[list[SpatialAcceleration_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_[AutoDiffXd]]) -> None: ...

class Value[list[SpatialAcceleration_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialAcceleration_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_[Expression]]) -> None: ...

class Value[list[SpatialAcceleration_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialAcceleration_[float]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_[float]]) -> None: ...

class Value[list[SpatialForce_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialForce_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialForce_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialForce_[AutoDiffXd]]) -> None: ...

class Value[list[SpatialForce_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialForce_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialForce_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialForce_[Expression]]) -> None: ...

class Value[list[SpatialForce_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialForce_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialForce_[float]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialForce_[float]]) -> None: ...

class Value[list[SpatialMomentum_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialMomentum_[AutoDiffXd]]) -> None: ...

class Value[list[SpatialMomentum_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialMomentum_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialMomentum_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialMomentum_[Expression]]) -> None: ...

class Value[list[SpatialMomentum_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialMomentum_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialMomentum_[float]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialMomentum_[float]]) -> None: ...

class Value[list[SpatialVelocity_[AutoDiffXd]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialVelocity_[AutoDiffXd]]) -> None: ...

class Value[list[SpatialVelocity_[Expression]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialVelocity_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialVelocity_[Expression]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialVelocity_[Expression]]) -> None: ...

class Value[list[SpatialVelocity_[float]]](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialVelocity_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialVelocity_[float]]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialVelocity_[float]]) -> None: ...

class Value[object](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: object) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> object: ...
    def get_value(self) -> object: ...
    def set_value(self, arg0: object) -> None: ...

class Value[str](AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> str: ...
    def set_value(self, arg0: str) -> None: ...

class _TemporaryName_N5drake5ValueINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> str: ...
    def set_value(self, arg0: str) -> None: ...

class _TemporaryName_N5drake5ValueIbEE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> bool: ...
    def set_value(self, arg0: bool) -> None: ...

class _TemporaryName_N5drake5ValueIdEE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> float: ...
    def set_value(self, arg0: float) -> None: ...

class _TemporaryName_N5drake7pydrake12_GLOBAL__N_113PyObjectValueE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: object) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> object: ...
    def get_value(self) -> object: ...
    def set_value(self, arg0: object) -> None: ...
