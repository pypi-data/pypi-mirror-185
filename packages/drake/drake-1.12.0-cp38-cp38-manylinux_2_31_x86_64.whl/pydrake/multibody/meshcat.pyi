from typing import Any, ClassVar, List, Optional, Union

from typing import overload
import numpy
import pydrake.common.cpp_template
import pydrake.geometry
import pydrake.multibody.plant
import pydrake.systems.framework
ContactVisualizer_: pydrake.common.cpp_template.TemplateClass
JointSliders_: pydrake.common.cpp_template.TemplateClass

class ContactVisualizer(pydrake.systems.framework.LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams = ...) -> None: ...
    def AddToBuilder(self, *args, **kwargs) -> Any: ...
    @overload
    def Delete(self) -> None: ...
    @overload
    def Delete(self, std) -> Any: ...
    def contact_results_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...

class ContactVisualizerParams:
    __fields__: ClassVar[tuple] = ...  # read-only
    _pybind11_del_orig: ClassVar[None] = ...
    color: pydrake.geometry.Rgba
    delete_on_initialization_event: bool
    force_threshold: float
    hydro_force_color: pydrake.geometry.Rgba
    hydro_moment_color: pydrake.geometry.Rgba
    moment_threshold: float
    newton_meters_per_meter: float
    newtons_per_meter: float
    prefix: str
    publish_period: float
    radius: float
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> ContactVisualizerParams: ...
    def __deepcopy__(self, arg0: dict) -> ContactVisualizerParams: ...
    def __del__(self, *args, **kwargs) -> Any: ...

class ContactVisualizer_[AutoDiffXd](pydrake.systems.framework.LeafSystem_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams = ...) -> None: ...
    def AddToBuilder(self, *args, **kwargs) -> Any: ...
    @overload
    def Delete(self) -> None: ...
    @overload
    def Delete(self, std) -> Any: ...
    def contact_results_input_port(self) -> pydrake.systems.framework.InputPort_[AutoDiffXd]: ...
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort_[AutoDiffXd]: ...

class ContactVisualizer_[float](pydrake.systems.framework.LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams = ...) -> None: ...
    def AddToBuilder(self, *args, **kwargs) -> Any: ...
    @overload
    def Delete(self) -> None: ...
    @overload
    def Delete(self, std) -> Any: ...
    def contact_results_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...

class JointSliders(pydrake.systems.framework.LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, plant: pydrake.multibody.plant.MultibodyPlant_[float], initial_value: Optional[numpy.ndarray[numpy.float64[m,1]]] = ..., lower_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., upper_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., step: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, diagram: pydrake.systems.framework.Diagram_[float], timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetPositions(self, q: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class JointSliders_[AutoDiffXd](pydrake.systems.framework.LeafSystem_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, plant: pydrake.multibody.plant.MultibodyPlant_[AutoDiffXd], initial_value: Optional[numpy.ndarray[numpy.float64[m,1]]] = ..., lower_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., upper_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., step: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, diagram: pydrake.systems.framework.Diagram_[AutoDiffXd], timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetPositions(self, q: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class JointSliders_[float](pydrake.systems.framework.LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, plant: pydrake.multibody.plant.MultibodyPlant_[float], initial_value: Optional[numpy.ndarray[numpy.float64[m,1]]] = ..., lower_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., upper_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., step: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, diagram: pydrake.systems.framework.Diagram_[float], timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetPositions(self, q: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class _HydroelasticContactVisualizer:
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams) -> None: ...
    def Delete(self) -> None: ...
    def Update(self, items: List[_HydroelasticContactVisualizerItem]) -> None: ...

class _HydroelasticContactVisualizerItem:
    body_A: Any
    body_B: Any
    centroid_W: Any
    faces: Any
    force_C_W: Any
    moment_C_W: Any
    p_WV: Any
    pressure: Any
    def __init__(self, body_A: str, body_B: str, centroid_W: numpy.ndarray[numpy.float64[3,1]], force_C_W: numpy.ndarray[numpy.float64[3,1]], moment_C_W: numpy.ndarray[numpy.float64[3,1]], p_WV: numpy.ndarray[numpy.float64[3,n]], faces: numpy.ndarray[numpy.int32[3,n]], pressure: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class _PointContactVisualizer:
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams) -> None: ...
    def Update(self, items: List[_PointContactVisualizerItem]) -> None: ...

class _PointContactVisualizerItem:
    body_A: Any
    body_B: Any
    contact_force: Any
    contact_point: Any
    def __init__(self, body_A: str, body_B: str, contact_force: numpy.ndarray[numpy.float64[3,1]], contact_point: numpy.ndarray[numpy.float64[3,1]]) -> None: ...

class _TemporaryName_N5drake9multibody7meshcat12JointSlidersIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(pydrake.systems.framework.LeafSystem_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, plant: pydrake.multibody.plant.MultibodyPlant_[AutoDiffXd], initial_value: Optional[numpy.ndarray[numpy.float64[m,1]]] = ..., lower_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., upper_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., step: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, diagram: pydrake.systems.framework.Diagram_[AutoDiffXd], timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetPositions(self, q: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class _TemporaryName_N5drake9multibody7meshcat12JointSlidersIdEE(pydrake.systems.framework.LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, plant: pydrake.multibody.plant.MultibodyPlant_[float], initial_value: Optional[numpy.ndarray[numpy.float64[m,1]]] = ..., lower_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., upper_limit: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., step: Union[None,float,numpy.ndarray[numpy.float64[m,1]]] = ..., decrement_keycodes: List[str] = ..., increment_keycodes: List[str] = ...) -> None: ...
    def Delete(self) -> None: ...
    def Run(self, diagram: pydrake.systems.framework.Diagram_[float], timeout: Optional[float] = ..., stop_button_keycode: str = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetPositions(self, q: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class _TemporaryName_N5drake9multibody7meshcat17ContactVisualizerIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(pydrake.systems.framework.LeafSystem_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams = ...) -> None: ...
    def AddToBuilder(self, *args, **kwargs) -> Any: ...
    @overload
    def Delete(self) -> None: ...
    @overload
    def Delete(self, std) -> Any: ...
    def contact_results_input_port(self) -> pydrake.systems.framework.InputPort_[AutoDiffXd]: ...
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort_[AutoDiffXd]: ...

class _TemporaryName_N5drake9multibody7meshcat17ContactVisualizerIdEE(pydrake.systems.framework.LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, meshcat: pydrake.geometry.Meshcat, params: ContactVisualizerParams = ...) -> None: ...
    def AddToBuilder(self, *args, **kwargs) -> Any: ...
    @overload
    def Delete(self) -> None: ...
    @overload
    def Delete(self, std) -> Any: ...
    def contact_results_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
    def query_object_input_port(self) -> pydrake.systems.framework.InputPort_[float]: ...
