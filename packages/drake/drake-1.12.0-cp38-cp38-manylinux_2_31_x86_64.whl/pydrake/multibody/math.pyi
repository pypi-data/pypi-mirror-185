from typing import Any, ClassVar, List

from typing import overload
import numpy
import pydrake.autodiffutils
import pydrake.common.cpp_template
import pydrake.common.value
import pydrake.math
import pydrake.symbolic
SpatialAcceleration_: pydrake.common.cpp_template.TemplateClass
SpatialForce_: pydrake.common.cpp_template.TemplateClass
SpatialMomentum_: pydrake.common.cpp_template.TemplateClass
SpatialVelocity_: pydrake.common.cpp_template.TemplateClass
_add_repr_functions: function
_indented_repr: function
_remove_float_suffix: function
_spatial_vector_repr: function

class SpatialAcceleration:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[numpy.float64[3,1]], a: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_[float], acceleration_of_moving_frame: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialAcceleration_[float]: ...
    def SetZero(self) -> SpatialAcceleration_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_[float]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __copy__(self) -> SpatialAcceleration_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __imul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __isub__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __mul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __neg__(self) -> SpatialAcceleration_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...

class SpatialAcceleration_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[AutoDiffXd], acceleration_of_moving_frame: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[AutoDiffXd]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...

class SpatialAcceleration_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[Expression], acceleration_of_moving_frame: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def SetZero(self) -> SpatialAcceleration_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[Expression]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def __copy__(self) -> SpatialAcceleration_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_[Expression]: ...
    def __isub__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_[Expression]: ...
    def __neg__(self) -> SpatialAcceleration_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...

class SpatialAcceleration_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[numpy.float64[3,1]], a: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_[float], acceleration_of_moving_frame: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialAcceleration_[float]: ...
    def SetZero(self) -> SpatialAcceleration_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_[float]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __copy__(self) -> SpatialAcceleration_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __imul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __isub__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __mul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __neg__(self) -> SpatialAcceleration_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...

class SpatialForce:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[numpy.float64[3,1]], f: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialForce_[float]: ...
    def SetZero(self) -> SpatialForce_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialForce_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[float]) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __copy__(self) -> SpatialForce_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __imul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __isub__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __neg__(self) -> SpatialForce_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...

class SpatialForce_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialForce_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialForce_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialForce_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...

class SpatialForce_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialForce_[Expression]: ...
    def SetZero(self) -> SpatialForce_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[Expression]) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...
    def __copy__(self) -> SpatialForce_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_[Expression]: ...
    def __isub__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_[Expression]: ...
    def __neg__(self) -> SpatialForce_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...

class SpatialForce_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[numpy.float64[3,1]], f: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialForce_[float]: ...
    def SetZero(self) -> SpatialForce_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialForce_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[float]) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __copy__(self) -> SpatialForce_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __imul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __isub__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __neg__(self) -> SpatialForce_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...

class SpatialMomentum:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[numpy.float64[3,1]], l: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialMomentum_[float]: ...
    def SetZero(self) -> SpatialMomentum_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialMomentum_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[float]) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __copy__(self) -> SpatialMomentum_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __imul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __isub__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __neg__(self) -> SpatialMomentum_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...

class SpatialMomentum_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialMomentum_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialMomentum_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialMomentum_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...

class SpatialMomentum_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialMomentum_[Expression]: ...
    def SetZero(self) -> SpatialMomentum_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[Expression]) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...
    def __copy__(self) -> SpatialMomentum_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_[Expression]: ...
    def __isub__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_[Expression]: ...
    def __neg__(self) -> SpatialMomentum_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...

class SpatialMomentum_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[numpy.float64[3,1]], l: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialMomentum_[float]: ...
    def SetZero(self) -> SpatialMomentum_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialMomentum_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[float]) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __copy__(self) -> SpatialMomentum_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __imul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __isub__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __neg__(self) -> SpatialMomentum_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...

class SpatialVelocity:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[numpy.float64[3,1]], v: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialVelocity_[float]: ...
    def SetZero(self) -> SpatialVelocity_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialVelocity_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    @overload
    def dot(self, force) -> float: ...
    @overload
    def dot(self, momentum) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __copy__(self) -> SpatialVelocity_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __imul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __isub__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __neg__(self) -> SpatialVelocity_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...

class SpatialVelocity_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialVelocity_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialVelocity_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialVelocity_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...

class SpatialVelocity_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialVelocity_[Expression]: ...
    def SetZero(self) -> SpatialVelocity_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    @overload
    def dot(self, force) -> pydrake.symbolic.Expression: ...
    @overload
    def dot(self, momentum) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def __copy__(self) -> SpatialVelocity_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_[Expression]: ...
    def __isub__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_[Expression]: ...
    def __neg__(self) -> SpatialVelocity_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...

class SpatialVelocity_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[numpy.float64[3,1]], v: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialVelocity_[float]: ...
    def SetZero(self) -> SpatialVelocity_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialVelocity_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    @overload
    def dot(self, force) -> float: ...
    @overload
    def dot(self, momentum) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __copy__(self) -> SpatialVelocity_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __imul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __isub__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __neg__(self) -> SpatialVelocity_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...

class _TemporaryName_N5drake5ValueINS_9multibody12SpatialForceIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialForce_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialForce_[AutoDiffXd]: ...
    def get_value(self) -> SpatialForce_[AutoDiffXd]: ...
    def set_value(self, arg0: SpatialForce_[AutoDiffXd]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody12SpatialForceINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialForce_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialForce_[Expression]: ...
    def get_value(self) -> SpatialForce_[Expression]: ...
    def set_value(self, arg0: SpatialForce_[Expression]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody12SpatialForceIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialForce_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialForce_[float]: ...
    def get_value(self) -> SpatialForce_[float]: ...
    def set_value(self, arg0: SpatialForce_[float]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialMomentumIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialMomentum_[AutoDiffXd]: ...
    def get_value(self) -> SpatialMomentum_[AutoDiffXd]: ...
    def set_value(self, arg0: SpatialMomentum_[AutoDiffXd]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialMomentumINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialMomentum_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialMomentum_[Expression]: ...
    def get_value(self) -> SpatialMomentum_[Expression]: ...
    def set_value(self, arg0: SpatialMomentum_[Expression]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialMomentumIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialMomentum_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialMomentum_[float]: ...
    def get_value(self) -> SpatialMomentum_[float]: ...
    def set_value(self, arg0: SpatialMomentum_[float]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialVelocityIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialVelocity_[AutoDiffXd]: ...
    def get_value(self) -> SpatialVelocity_[AutoDiffXd]: ...
    def set_value(self, arg0: SpatialVelocity_[AutoDiffXd]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialVelocityINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialVelocity_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialVelocity_[Expression]: ...
    def get_value(self) -> SpatialVelocity_[Expression]: ...
    def set_value(self, arg0: SpatialVelocity_[Expression]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody15SpatialVelocityIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialVelocity_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialVelocity_[float]: ...
    def get_value(self) -> SpatialVelocity_[float]: ...
    def set_value(self, arg0: SpatialVelocity_[float]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody19SpatialAccelerationIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    def get_value(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    def set_value(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody19SpatialAccelerationINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialAcceleration_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialAcceleration_[Expression]: ...
    def get_value(self) -> SpatialAcceleration_[Expression]: ...
    def set_value(self, arg0: SpatialAcceleration_[Expression]) -> None: ...

class _TemporaryName_N5drake5ValueINS_9multibody19SpatialAccelerationIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SpatialAcceleration_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SpatialAcceleration_[float]: ...
    def get_value(self) -> SpatialAcceleration_[float]: ...
    def set_value(self, arg0: SpatialAcceleration_[float]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody12SpatialForceIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialForce_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialForce_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[SpatialForce_[AutoDiffXd]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody12SpatialForceINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialForce_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialForce_[Expression]]: ...
    def set_value(self, arg0: List[SpatialForce_[Expression]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody12SpatialForceIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialForce_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialForce_[float]]: ...
    def set_value(self, arg0: List[SpatialForce_[float]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialMomentumIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialMomentum_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialMomentum_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[SpatialMomentum_[AutoDiffXd]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialMomentumINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialMomentum_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialMomentum_[Expression]]: ...
    def set_value(self, arg0: List[SpatialMomentum_[Expression]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialMomentumIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialMomentum_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialMomentum_[float]]: ...
    def set_value(self, arg0: List[SpatialMomentum_[float]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialVelocityIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialVelocity_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialVelocity_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[SpatialVelocity_[AutoDiffXd]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialVelocityINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialVelocity_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialVelocity_[Expression]]: ...
    def set_value(self, arg0: List[SpatialVelocity_[Expression]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody15SpatialVelocityIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialVelocity_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialVelocity_[float]]: ...
    def set_value(self, arg0: List[SpatialVelocity_[float]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody19SpatialAccelerationIN5Eigen14AutoDiffScalarINS4_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEESaIS9_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialAcceleration_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialAcceleration_[AutoDiffXd]]: ...
    def set_value(self, arg0: List[SpatialAcceleration_[AutoDiffXd]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody19SpatialAccelerationINS_8symbolic10ExpressionEEESaIS6_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialAcceleration_[Expression]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialAcceleration_[Expression]]: ...
    def set_value(self, arg0: List[SpatialAcceleration_[Expression]]) -> None: ...

class _TemporaryName_N5drake5ValueISt6vectorINS_9multibody19SpatialAccelerationIdEESaIS4_EEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[SpatialAcceleration_[float]]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[SpatialAcceleration_[float]]: ...
    def set_value(self, arg0: List[SpatialAcceleration_[float]]) -> None: ...

class _TemporaryName_N5drake9multibody12SpatialForceIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialForce_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialForce_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialForce_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialForce_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[AutoDiffXd]) -> SpatialForce_[AutoDiffXd]: ...

class _TemporaryName_N5drake9multibody12SpatialForceINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[object[3,1]], f: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialForce_[Expression]: ...
    def SetZero(self) -> SpatialForce_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialForce_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[Expression]) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...
    def __copy__(self) -> SpatialForce_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_[Expression]: ...
    def __isub__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_[Expression]: ...
    def __neg__(self) -> SpatialForce_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialForce_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[Expression]) -> SpatialForce_[Expression]: ...

class _TemporaryName_N5drake9multibody12SpatialForceIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, tau: numpy.ndarray[numpy.float64[3,1]], f: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, F: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialForce_[float]: ...
    def SetZero(self) -> SpatialForce_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialForce_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[float]) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __copy__(self) -> SpatialForce_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialForce_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __imul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __isub__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __neg__(self) -> SpatialForce_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialForce_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialForce_[float]) -> SpatialForce_[float]: ...

class _TemporaryName_N5drake9multibody15SpatialMomentumIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialMomentum_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialMomentum_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialMomentum_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialMomentum_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[AutoDiffXd]) -> SpatialMomentum_[AutoDiffXd]: ...

class _TemporaryName_N5drake9multibody15SpatialMomentumINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[object[3,1]], l: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[object[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialMomentum_[Expression]: ...
    def SetZero(self) -> SpatialMomentum_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialMomentum_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[Expression]) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...
    def __copy__(self) -> SpatialMomentum_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_[Expression]: ...
    def __isub__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_[Expression]: ...
    def __neg__(self) -> SpatialMomentum_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialMomentum_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[Expression]) -> SpatialMomentum_[Expression]: ...

class _TemporaryName_N5drake9multibody15SpatialMomentumIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h: numpy.ndarray[numpy.float64[3,1]], l: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, L: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialMomentum_[float]: ...
    def SetZero(self) -> SpatialMomentum_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialMomentum_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, velocity: SpatialVelocity_[float]) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __copy__(self) -> SpatialMomentum_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialMomentum_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __imul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __isub__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __neg__(self) -> SpatialMomentum_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialMomentum_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialMomentum_[float]) -> SpatialMomentum_[float]: ...

class _TemporaryName_N5drake9multibody15SpatialVelocityIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialVelocity_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialVelocity_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialVelocity_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialVelocity_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[AutoDiffXd]) -> SpatialVelocity_[AutoDiffXd]: ...

class _TemporaryName_N5drake9multibody15SpatialVelocityINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[object[3,1]], v: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialVelocity_[Expression]: ...
    def SetZero(self) -> SpatialVelocity_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]]) -> SpatialVelocity_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    @overload
    def dot(self, force) -> pydrake.symbolic.Expression: ...
    @overload
    def dot(self, momentum) -> pydrake.symbolic.Expression: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def __copy__(self) -> SpatialVelocity_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_[Expression]: ...
    def __isub__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_[Expression]: ...
    def __neg__(self) -> SpatialVelocity_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialVelocity_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[Expression]) -> SpatialVelocity_[Expression]: ...

class _TemporaryName_N5drake9multibody15SpatialVelocityIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: numpy.ndarray[numpy.float64[3,1]], v: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, V: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameVelocity(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialVelocity_[float]: ...
    def SetZero(self) -> SpatialVelocity_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialVelocity_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    @overload
    def dot(self, force) -> float: ...
    @overload
    def dot(self, momentum) -> float: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __copy__(self) -> SpatialVelocity_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialVelocity_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __imul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __isub__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...
    def __matmul__(self, *args, **kwargs) -> Any: ...
    def __mul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __neg__(self) -> SpatialVelocity_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialVelocity_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialVelocity_[float]) -> SpatialVelocity_[float]: ...

class _TemporaryName_N5drake9multibody19SpatialAccelerationIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[AutoDiffXd], acceleration_of_moving_frame: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def SetZero(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[AutoDiffXd]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[AutoDiffXd]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __copy__(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __imul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __isub__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __mul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __neg__(self) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __rmul__(self, arg0: pydrake.autodiffutils.AutoDiffXd) -> SpatialAcceleration_[AutoDiffXd]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[AutoDiffXd]) -> SpatialAcceleration_[AutoDiffXd]: ...

class _TemporaryName_N5drake9multibody19SpatialAccelerationINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[object[3,1]], a: numpy.ndarray[object[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[object[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]], velocity_of_moving_frame: SpatialVelocity_[Expression], acceleration_of_moving_frame: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def SetZero(self) -> SpatialAcceleration_[Expression]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[object[3,1]], angular_velocity_of_this_frame: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[Expression]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[object[3,1]]) -> SpatialAcceleration_[Expression]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[object[6,1]]: ...
    def rotational(self) -> numpy.ndarray[object[3,1]]: ...
    def translational(self) -> numpy.ndarray[object[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def __copy__(self) -> SpatialAcceleration_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[Expression]: ...
    def __getstate__(self) -> numpy.ndarray[object[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def __imul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_[Expression]: ...
    def __isub__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...
    def __mul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_[Expression]: ...
    def __neg__(self) -> SpatialAcceleration_[Expression]: ...
    def __rmul__(self, arg0: pydrake.symbolic.Expression) -> SpatialAcceleration_[Expression]: ...
    def __setstate__(self, arg0: numpy.ndarray[object[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[Expression]) -> SpatialAcceleration_[Expression]: ...

class _TemporaryName_N5drake9multibody19SpatialAccelerationIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alpha: numpy.ndarray[numpy.float64[3,1]], a: numpy.ndarray[numpy.float64[3,1]]) -> None: ...
    @overload
    def __init__(self, A: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def ComposeWithMovingFrameAcceleration(self, position_of_moving_frame: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]], velocity_of_moving_frame: SpatialVelocity_[float], acceleration_of_moving_frame: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def Rotate(self, R_FE: pydrake.math.RotationMatrix_[float]) -> SpatialAcceleration_[float]: ...
    def SetZero(self) -> SpatialAcceleration_[float]: ...
    @overload
    def Shift(self, offset: numpy.ndarray[numpy.float64[3,1]], angular_velocity_of_this_frame: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_[float]: ...
    @overload
    def Shift(self) -> Any: ...
    @overload
    def ShiftWithZeroAngularVelocity(self, offset: numpy.ndarray[numpy.float64[3,1]]) -> SpatialAcceleration_[float]: ...
    @overload
    def ShiftWithZeroAngularVelocity(self) -> Any: ...
    def Zero(self, *args, **kwargs) -> Any: ...
    def get_coeffs(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def rotational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def translational(self) -> numpy.ndarray[numpy.float64[3,1]]: ...
    def __add__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __copy__(self) -> SpatialAcceleration_[float]: ...
    def __deepcopy__(self, arg0: dict) -> SpatialAcceleration_[float]: ...
    def __getstate__(self) -> numpy.ndarray[numpy.float64[6,1]]: ...
    def __iadd__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __imul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __isub__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
    def __mul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __neg__(self) -> SpatialAcceleration_[float]: ...
    def __rmul__(self, arg0: float) -> SpatialAcceleration_[float]: ...
    def __setstate__(self, arg0: numpy.ndarray[numpy.float64[6,1]]) -> None: ...
    def __sub__(self, arg0: SpatialAcceleration_[float]) -> SpatialAcceleration_[float]: ...
