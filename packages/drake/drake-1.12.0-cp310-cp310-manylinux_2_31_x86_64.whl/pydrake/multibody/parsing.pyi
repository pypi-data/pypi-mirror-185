from typing import Any, ClassVar, Dict, List, Optional

from typing import overload
import numpy
import pydrake.common.schema
import pydrake.geometry
import pydrake.math
import pydrake.multibody.plant
import pydrake.multibody.tree

class AddCollisionFilterGroup:
    __fields__: ClassVar[tuple] = ...  # read-only
    ignored_collision_filter_groups: List[str]
    members: List[str]
    name: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddCollisionFilterGroup: ...
    def __deepcopy__(self, arg0: dict) -> AddCollisionFilterGroup: ...

class AddDirectives:
    __fields__: ClassVar[tuple] = ...  # read-only
    file: str
    model_namespace: Optional[str]
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddDirectives: ...
    def __deepcopy__(self, arg0: dict) -> AddDirectives: ...

class AddFrame:
    __fields__: ClassVar[tuple] = ...  # read-only
    X_PF: pydrake.common.schema.Transform
    name: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddFrame: ...
    def __deepcopy__(self, arg0: dict) -> AddFrame: ...

class AddModel:
    __fields__: ClassVar[tuple] = ...  # read-only
    default_free_body_pose: Dict[str,pydrake.common.schema.Transform]
    default_joint_positions: Dict[str,numpy.ndarray[numpy.float64[m,1]]]
    file: str
    name: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddModel: ...
    def __deepcopy__(self, arg0: dict) -> AddModel: ...

class AddModelInstance:
    __fields__: ClassVar[tuple] = ...  # read-only
    name: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddModelInstance: ...
    def __deepcopy__(self, arg0: dict) -> AddModelInstance: ...

class AddWeld:
    __fields__: ClassVar[tuple] = ...  # read-only
    X_PC: Optional[pydrake.common.schema.Transform]
    child: str
    parent: str
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddWeld: ...
    def __deepcopy__(self, arg0: dict) -> AddWeld: ...

class ModelDirective:
    __fields__: ClassVar[tuple] = ...  # read-only
    add_collision_filter_group: Optional[AddCollisionFilterGroup]
    add_directives: Optional[AddDirectives]
    add_frame: Optional[AddFrame]
    add_model: Optional[AddModel]
    add_model_instance: Optional[AddModelInstance]
    add_weld: Optional[AddWeld]
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> ModelDirective: ...
    def __deepcopy__(self, arg0: dict) -> ModelDirective: ...

class ModelDirectives:
    __fields__: ClassVar[tuple] = ...  # read-only
    directives: List[ModelDirective]
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> ModelDirectives: ...
    def __deepcopy__(self, arg0: dict) -> ModelDirectives: ...

class ModelInstanceInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def X_PC(self) -> pydrake.math.RigidTransform_[float]: ...
    @property
    def child_frame_name(self) -> str: ...
    @property
    def model_instance(self) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    @property
    def model_name(self) -> str: ...
    @property
    def model_path(self) -> str: ...
    @property
    def parent_frame_name(self) -> WARNING: ...

class PackageMap:
    def __init__(self) -> None: ...
    def Add(self, package_name: str, package_path: str) -> None: ...
    def AddMap(self, other_map: PackageMap) -> None: ...
    def AddPackageXml(self, filename: str) -> None: ...
    def Contains(self, package_name: str) -> bool: ...
    def GetPackageNames(self) -> List[str]: ...
    def GetPath(self, package_name: str) -> str: ...
    def MakeEmpty(self, *args, **kwargs) -> Any: ...
    def PopulateFromEnvironment(self, environment_variable: str) -> None: ...
    def PopulateFromFolder(self, path: str) -> None: ...
    def PopulateFromRosPackagePath(self) -> None: ...
    def Remove(self, package_name: str) -> None: ...
    def size(self) -> int: ...

class Parser:
    def __init__(self, plant: pydrake.multibody.plant.MultibodyPlant_[float], scene_graph: pydrake.geometry.SceneGraph_[float] = ...) -> None: ...
    def AddAllModelsFromFile(self, file_name: str) -> List[pydrake.multibody.tree.ModelInstanceIndex]: ...
    def AddModelFromFile(self, file_name: str, model_name: str = ...) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    def AddModelFromString(self, file_contents: str, file_type: str, model_name: str = ...) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    def AddModels(self, file_name: str) -> List[pydrake.multibody.tree.ModelInstanceIndex]: ...
    def AddModelsFromString(self, file_contents: str, file_type: str) -> List[pydrake.multibody.tree.ModelInstanceIndex]: ...
    def SetStrictParsing(self) -> None: ...
    def package_map(self) -> PackageMap: ...
    def plant(self) -> pydrake.multibody.plant.MultibodyPlant_[float]: ...

def GetScopedFrameByName(plant: pydrake.multibody.plant.MultibodyPlant_[float], full_name: str) -> pydrake.multibody.tree.Frame_[float]: ...
def GetScopedFrameName(plant: pydrake.multibody.plant.MultibodyPlant_[float], frame: pydrake.multibody.tree.Frame_[float]) -> str: ...
def LoadModelDirectives(filename: str) -> ModelDirectives: ...
def LoadModelDirectivesFromString(model_directives: str) -> ModelDirectives: ...
@overload
def ProcessModelDirectives(directives: ModelDirectives, parser: Parser) -> List[ModelInstanceInfo]: ...
@overload
def ProcessModelDirectives(directives: ModelDirectives, plant: pydrake.multibody.plant.MultibodyPlant_[float], parser: Parser = ...) -> List[ModelInstanceInfo]: ...
