Metadata-Version: 2.1
Name: tickterial
Version: 1.0.0
Summary: Download and cache tick data(material) from Dukascopy Bank SA
Author-email: sp3rtah <ngaira14nelson@gmail.com>
License: MIT License
        
        Copyright (c) 2022 sp3rtah
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/sp3rtah/autogram
Keywords: telegram,API,wrapper
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

<p style="text-align: center;">
	<img src="https://raw.githubusercontent.com/sp3rtah/tickterial/master/tickterial.png" alt="cover" title="logo"/>
<p>

## Download and cache tick data(material) from Dukascopy Bank SA


### NB: This is a module to be integrated with your code

# Usage
```python
import asyncio
from tickterial import DataCenter
from datetime import datetime

async def main():
    ct = DataCenter(timeout=30,use_cache=True)

    # download ticks for a single hour
    ticks = await ct.get_ticks('GBPUSD',datetime(2022,6,14,21)) # 2022-06-14 21:00
    out = struct.iter_unpack(ct.format,ticks.read())    # list of tuples
    for tick in out:
        print(tick)

    # bulk download ticks: More efficient for range downloads
    timerange = (datetime(2022,6,14),datetime(2022,6,14,8))     # 2022-06-14 00:00  to 2022-06-14 8:00
    generator = await ct.get_ticks_range('GBPUSD',timerange)

    for hour, stream in generator:
        print(f'Unpacking data for: {hour}')
        out = struct.iter_unpack(ct.format,stream.read())
        for tick in out:
            print(tick)

if __name__ == '__main__':
    asyncio.run(main())
```
