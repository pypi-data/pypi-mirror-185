# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_auth_service.role_service_pb2 as role__service__pb2


class AdminRoleStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
            "/AdminRole/GetUser",
            request_serializer=role__service__pb2.GetUserRequest.SerializeToString,
            response_deserializer=role__service__pb2.GetUserResponse.FromString,
        )
        self.GetUserList = channel.unary_unary(
            "/AdminRole/GetUserList",
            request_serializer=role__service__pb2.GetUserListRequest.SerializeToString,
            response_deserializer=role__service__pb2.GetUserListResponse.FromString,
        )


class AdminRoleServicer:
    """Missing associated documentation comment in .proto file."""

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetUserList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AdminRoleServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetUser": grpc.unary_unary_rpc_method_handler(
            servicer.GetUser,
            request_deserializer=role__service__pb2.GetUserRequest.FromString,
            response_serializer=role__service__pb2.GetUserResponse.SerializeToString,
        ),
        "GetUserList": grpc.unary_unary_rpc_method_handler(
            servicer.GetUserList,
            request_deserializer=role__service__pb2.GetUserListRequest.FromString,
            response_serializer=role__service__pb2.GetUserListResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("AdminRole", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AdminRole:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUser(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AdminRole/GetUser",
            role__service__pb2.GetUserRequest.SerializeToString,
            role__service__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetUserList(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AdminRole/GetUserList",
            role__service__pb2.GetUserListRequest.SerializeToString,
            role__service__pb2.GetUserListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
