#
# PySNMP MIB module FASTPATH-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://data/mibs/FASTPATH-SWITCHING-MIB
# Produced by pysmi-0.3.4 at Wed Jan 29 17:31:16 2020
# On host nerk platform Linux version 5.3.15-300.fc31.x86_64 by user spider
# Using Python version 3.7.5 (default, Oct 17 2019, 12:16:48) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
AgentPortMask, fastPath = mibBuilder.importSymbols("BROADCOM-REF-MIB", "AgentPortMask", "fastPath")
AgentLogSeverity, = mibBuilder.importSymbols("FASTPATH-LOGGING-MIB", "AgentLogSeverity")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanIndex, dot1qVlanIndex, VlanId, dot1qFdbId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex", "dot1qVlanIndex", "VlanId", "dot1qFdbId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, NotificationType, Gauge32, TimeTicks, Unsigned32, Counter64, Integer32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "Unsigned32", "Counter64", "Integer32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "iso")
TextualConvention, DisplayString, MacAddress, PhysAddress, TruthValue, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "PhysAddress", "TruthValue", "RowStatus", "DateAndTime")
fastPathSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1))
fastPathSwitching.setRevisions(('2014-12-12 00:00', '2014-11-11 00:00', '2014-04-09 00:00', '2013-11-08 00:00', '2013-10-15 00:00', '2013-09-10 00:00', '2013-07-05 00:00', '2013-01-29 00:00', '2013-01-07 00:00', '2013-01-04 00:00', '2011-09-19 00:00', '2010-12-19 00:00', '2009-11-19 00:00', '2010-01-14 00:00', '2009-07-23 00:00', '2009-07-07 00:00', '2009-02-11 00:00', '2007-05-23 00:00', '2003-11-21 00:00', '2003-02-06 18:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathSwitching.setRevisionsDescriptions(('Added objects agentSwitchBroadcastStormControlAction, agentSwitchMulticastStormControlAction, agentSwitchUnicastStormControlAction, agentSwitchStormControlType and agentSwitchStormControlAction in agentSwitchStormControlGroup. Added objects agentPortBroadcastControlAction, agentPortMulticastControlAction and agentPortUnicastControlAction in agentPortConfigTable Added agentSwitchStormControlTrap in fastPathSwitchingTraps.', 'Added agentSwitchDDisableAutoRecoveryTrap in fastPathSwitchingTraps. Added object agentPortDDisableReason in agentPortConfigTable.', 'Added group agentDynamicAuthorizationGroup to the agentConfigGroup to support Dynamic Authorization.', 'Added object agentUserAccessLevel and deprecated the object agentUserAccessMode in favor of agentUserAccessLevel.', 'Object support modifications for LinuxHost systems. Modified objects in agentServicePortConfigGroup that are dependent on the L7_FEAT_SERVICE_PORT_IPV6_CONFIG preprocessor flag.', 'Added object agentSnmpServerPortNum to agentSnmpConfigGroup. Added object agentTelnetMgmtPortNum to agentTelnetConfigGroup. Added object agentHTTPWebMgmtPortNum to agentHTTPConfigGroup.', 'Modified object description agentSwitchDVlanTagPrimaryTPid.', 'Modified objects in agentServicePortConfigGroup that are dependent on the L7_FEAT_SERVICE_PORT_IPV4_CONFIG preprocessor flag.', 'Added agentTransferDownloadDigitalSignatureVerifySelect in agentTransferDownloadGroup Updated agentTransferDownloadDataType and added agentDigitalSignatureConfigGroup to configure image and script digital signature validation', 'Added objects agentSwitchMbufsTotal and agentSwitchMbufsUsed in the group agentSwitchMbufGroup and added group agentSwitchMbufConfigGroup in the group agentConfigGroup to support Mbuf utilization rising and falling threshold configuration. Also added traps agentSwitchMbufRisingThresholdTrap and agentSwitchMbufFallingThresholdTrap in the fastPathSwitchingTraps.', 'Add agentTransferUploadFilename,agentTransferUploadRemoteFilename, agentTransferDownloadFilename length restrcted to 31 characters', 'Add agentSwitchCutThroughGroup', 'Add agentBufferUsageGroup', 'Added localization support.', 'Added CPU Utilization MIB', 'DVLAN changes', 'User can be created with user name extending upto 64 characters', 'Broadcom branding related changes.', 'Revisions made for new release.', 'Updated for release.',))
if mibBuilder.loadTexts: fastPathSwitching.setLastUpdated('201404090000Z')
if mibBuilder.loadTexts: fastPathSwitching.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathSwitching.setContactInfo(' Customer Support Postal: Broadcom Corporation 1030 Swabia Court Suite 400 Durham, NC 27703 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathSwitching.setDescription('The Broadcom Private MIB for FastPath Switching')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 1 through 8, the second octet specifying vlans 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered vlan, and the least significant bit represents the highest numbered vlan. Thus, each vlan supported is represented by a single bit within the value of this object. If that bit has a value of '1' then the associated port is in that vlan; the port is not included if the vlans bit has a value of '0'."
    status = 'current'

class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class Ipv6AddressPrefix(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address prefixes. This is a binary string of up to 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class Ipv6AddressIfIdentifier(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address interface identifiers. This is a binary string of up to 8 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class Ipv6IfIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero for each internetwork-layer interface in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each internetwork-layer interface must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class Ipv6IfIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the Ipv6IfIndex convention. The latter defines a greater than zero value used to identify an IPv6 interface in the managed system. This extension permits the additional value of zero. The value zero is object-specific and must therefore be defined as part of the description of any object which uses this syntax. Examples of the usage of zero might include situations where interface was unknown, or when none or all interfaces need to be referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class PortId(TextualConvention, OctetString):
    description = 'This data type is used to model port ids. This is a binary string of 2 octets.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySysDescription.setDescription("The switch's Inventory system description. ")
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineType.setDescription('Type of the Machine used in the Switch ')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineModel.setDescription("The switch's Machine Model. ")
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventorySerialNumber.setDescription('Serial number of the switch.')
agentInventoryFRUNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFRUNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryFRUNumber.setDescription('FRU Number of the switch')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setDescription("The switch's Inventory Maintenance Level")
agentInventoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryPartNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryPartNumber.setDescription("The switch's Inventory Part Number")
agentInventoryManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturer.setStatus('current')
if mibBuilder.loadTexts: agentInventoryManufacturer.setDescription('Name of the Manufacturer of this unit')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setDescription('Burned-In MAC Address')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setDescription('Operating System running on this unit')
agentInventoryNetworkProcessingDevice = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setStatus('current')
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setDescription('Network Processing Device for this unit')
agentInventoryAdditionalPackages = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setStatus('current')
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setDescription('Lists additional functional packages available on this unit.')
agentInventorySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setDescription('Lists the version of software loaded on this unit.')
agentInventoryHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryHardwareVersion.setDescription('Lists the version of hardware of this unit. This is a platform dependant string.')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotal.setDescription('The total number of traps sent since last reset.')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setDescription('The number of traps sent since last viewed.')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTable.setDescription('Agent Trap Log')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogEntry.setDescription('Agent trap log entry')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogIndex.setDescription('Unique index of trap entry')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogSystemTime.setDescription('System uptime when trap was sent. This entry shows how long the system has been up when the trap occurred.')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTrap.setDescription('Description of the trap sent.')
agentSupportedMibTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: agentSupportedMibTable.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibTable.setDescription('Supported MIB table')
agentSupportedMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSupportedMibIndex"))
if mibBuilder.loadTexts: agentSupportedMibEntry.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibEntry.setDescription('Supported MIB entry')
agentSupportedMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibIndex.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibIndex.setDescription('Unique index of the Supported MIB entry')
agentSupportedMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibName.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibName.setDescription('The name of the MIB (RFC or IEEE) that is supported.')
agentSupportedMibDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibDescription.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibDescription.setDescription('Description of the MIB (RFC or IEEE) that is supported.')
agentPortStatsRateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8))
agentPortStatsRateTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1), )
if mibBuilder.loadTexts: agentPortStatsRateTable.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateTable.setDescription('')
agentPortStatsRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPortStatsRateEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateEntry.setDescription('')
agentPortStatsRateBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 1), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateBitsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateBitsPerSecondRx.setDescription('The number of bits per second received. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 2), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateBitsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateBitsPerSecondTx.setDescription('The number of bits per second transmitted. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRatePacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRatePacketsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRatePacketsPerSecondRx.setDescription('The number of packets per second received. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRatePacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRatePacketsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRatePacketsPerSecondTx.setDescription('The number of packets per second transmitted. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateOverflowBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 5), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowBitsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateOverflowBitsPerSecondRx.setDescription('The counter in which stored the number of times the associated agentPortStatsRateBitsPerSecondRx counter has overflowed.')
agentPortStatsRateOverflowBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 6), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowBitsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateOverflowBitsPerSecondTx.setDescription('The counter in which stored the number of times the associated agentPortStatsRateBitsPerSecondTx counter has overflowed.')
agentPortStatsRateOverflowPacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowPacketsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateOverflowPacketsPerSecondRx.setDescription('The counter in which stored the number of times the associated agentPortStatsRatePacketsPerSecondRx counter has overflowed.')
agentPortStatsRateOverflowPacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateOverflowPacketsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateOverflowPacketsPerSecondTx.setDescription('The counter in which stored the number of times the associated agentPortStatsRatePacketsPerSecondTx counter has overflowed.')
agentPortStatsRateHCBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 9), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondRx.setDescription('The number of bits per second received. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateHCBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 10), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondTx.setDescription('The number of bits per second transmitted. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateHCPacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondRx.setDescription('The number of packets per second received. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateHCPacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 8, 1, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondTx.setDescription('The number of packets per second transmitted. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentSwitchCpuProcessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4))
agentSwitchCpuProcessMemFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 1), Integer32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setDescription(' The total memory free for utilization in KBytes.')
agentSwitchCpuProcessMemAvailable = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 2), Integer32().clone(2)).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setDescription(' The total memory available in KBytes.')
agentSwitchCpuProcessRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setDescription('The CPU Rising utilization threshold in percentage. A zero percent threshold indicates CPU Utilization Notification feature is disabled. A notification is triggered when the total CPU utilization exceeds this threshold over the configured Rising threshold interval. If the Rising threshold is configured to be less than the Falling threshold, the Falling threshold is set equal to the Rising threshold.')
agentSwitchCpuProcessRisingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setDescription('The CPU Rising threshold interval in seconds. The time interval is configured in multiples of 5 seconds. A zero Rising interval indicates CPU Utilization Notification feature is disabled.')
agentSwitchCpuProcessFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setDescription("The CPU Falling utilization threshold in percentage. Configuration of this object value is optional. Value '0' is not allowed for configuration, if the Rising threshold is non-zero. If the Falling threshold is configured to be greater than the Rising threshold, the Rising threshold is set equal to the Falling threshold. If the Falling threshold is not configured, it takes the same value as the Rising threshold. A notification is triggered when the total CPU utilization falls below this threshold over the configured Falling threshold interval.")
agentSwitchCpuProcessFallingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setDescription("The CPU Falling threshold interval in seconds. Configuration of this object value is optional. Value '0' is not allowed for configuration, if the Rising interval is non-zero. If the Falling interval is not configured, it takes the same value as the Rising interval. The time interval is configured in multiples of 5 seconds.")
agentSwitchCpuProcessFreeMemoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setDescription('The CPU Free Memory threshold in kilobytes. A zero threshold value indicates the CPU Free Memory Notification feature is disabled. Notifications are triggered when the CPU Free Memory falls below the configured threshold and when it rises to 10% above the configured threshold.')
agentSwitchCpuProcessTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8), )
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setDescription(' A table of Task and cpu utilization.')
agentSwitchCpuProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchCpuProcessIndex"))
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setDescription('Represents entry for a Task Table.')
agentSwitchCpuProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setDescription('Unique index of process table')
agentSwitchCpuProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setDescription('Name of the process')
agentSwitchCpuProcessPercentageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setDescription('CPU utilization per task in Percentage over a period of 5, 60, 300 seconds, and the Rising threshold period also in seconds, if configured.')
agentSwitchCpuProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setDescription('Process ID')
agentSwitchCpuProcessTotalUtilization = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setDescription('Total CPU utilization over a period of 5, 60, 300 seconds, and the Rising threshold period also in seconds, if configured.')
agentSwitchCpuCosQDropGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6))
agentSwitchCpuCosQDropTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: agentSwitchCpuCosQDropTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQDropTable.setDescription('Table lists the number of packets dropped at each CoS queue for the CPU.')
agentSwitchCpuCosQDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchCpuCosQIndex"))
if mibBuilder.loadTexts: agentSwitchCpuCosQDropEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQDropEntry.setDescription('Packet drop statistics for a CPU CoS queue.')
agentSwitchCpuCosQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentSwitchCpuCosQIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQIndex.setDescription('Unique index of a CPU CoS queue.')
agentSwitchCpuCosQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuCosQDrops.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuCosQDrops.setDescription('Number of packets dropped at this CPU CoS queue because the queue was full.')
agentSwitchMbufGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7))
agentSwitchMbufsTotal = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsTotal.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufsTotal.setDescription('Total number of message buffers in the system.')
agentSwitchMbufsFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsFree.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufsFree.setDescription('Number of message buffers currently available.')
agentSwitchMbufsUsed = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufsUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufsUsed.setDescription('Number of message buffers currently in use.')
agentSwitchMbufTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2), )
if mibBuilder.loadTexts: agentSwitchMbufTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufTable.setDescription('Table lists information about message buffer allocation for packets arriving at the CPU.')
agentSwitchMbufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchMbufPrio"))
if mibBuilder.loadTexts: agentSwitchMbufEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufEntry.setDescription('Information on a specific class of message buffers.')
agentSwitchMbufPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentSwitchMbufPrio.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufPrio.setDescription('Message buffer priority.')
agentSwitchMbufClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufClassName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufClassName.setDescription('Name of this class of message buffer.')
agentSwitchMbufAllocAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufAllocAttempts.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufAllocAttempts.setDescription('Number of times the system tried to allocate a message buffer allocation of this class.')
agentSwitchMbufAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMbufAllocFails.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufAllocFails.setDescription('Number of message buffer allocation failures for this class of message buffer.')
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionTable.setDescription("A table of the switch's login session")
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionEntry.setDescription('Login Session Entry')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIndex.setDescription('Agent Login Session Index of the switch')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionUserName.setDescription('Agent Login Session UserName of the switch')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setDescription('Agent Login Session IP Address of the switch')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("ssh", 3), ("http", 4), ("https", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setDescription('Agent Login Session Connection Type of the switch')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setDescription('Agent Login Session Idle Time of the switch')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setDescription('Agent Login Session Time of the switch')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionStatus.setDescription('Status of the user. active(1) - This connection is active. destroy(6) - Set to this value to disconnect this user.')
agentLoginSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setDescription('Type of address agentLoginSessionInetAddress is returning. Can be either unknown(0), ipv4(1), or ipv6 (2). Will return unknown(0) in the case of a serial login.')
agentLoginSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setDescription('Inet Address of the connecting the user is logging in with. Will return a zero-length string in the case of a serial login.')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setDescription('Telnet login timeout (minutes) Config telnet timeout will set the telnet session timeout value. A session is active as long as the session has not remained idle for the value set. Specify a value from 1 to 160. Note: Changing the timeout value for active sessions does not become effective until the session is reaccessed. Any keystroke will also activate the new timeout duration.')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMaxSessions.setDescription('Maximum number of Telnet Sessions Config telnet maxsessions is an integer value that specifies the maximum number of telnet sessions that can be established. If the value is 0, no Telnet session can be established.')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setDescription('Allow new telnet sessions (enable or disable) Config telnet disable means that no new Telnet sessions are to be established. Any already established session remains active until the session is ended or an abnormal network error ends it. ')
agentTelnetMgmtPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMgmtPortNum.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMgmtPortNum.setDescription("Get/Set the TCP port number that the telnet server listens to for incoming requests. The port number is an integer value from 1 to 65535. Before setting this object, check your system (e.g. using 'netstat') to make sure the desired port number is not currently being used by any other service. The default value for this object is 23. Note that existing telnet login sessions are not affected by a change in value of this object, although establishment of any new telnet sessions must use the new port number.")
agentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3))
agentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigCreate.setDescription("Create a new user. When set with a non-empty string, a new user with that name will be created. This object will only return an empty string. This string is limited to alpha-numeric strings (uncluding the '-' and '_' characters).")
agentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigTable.setDescription('User Config Table')
agentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentUserIndex"))
if mibBuilder.loadTexts: agentUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigEntry.setDescription('User Config Entry')
agentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentUserIndex.setDescription('Agent User Config Index')
agentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserName.setStatus('current')
if mibBuilder.loadTexts: agentUserName.setDescription("Agent User Name. This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserPassword.setDescription('Agent User Password This object will return an empty string even if a password is set.')
agentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("suspended", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAccessMode.setStatus('deprecated')
if mibBuilder.loadTexts: agentUserAccessMode.setDescription('Agent User Access Mode. This object is deprecated in favor of agentUserAccessLevel.')
agentUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserStatus.setDescription('Agent User Status. active(1) - This user account is active. destroy(6) - Set to this value to remove this user account.')
agentUserLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserLockoutStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserLockoutStatus.setDescription('Displays whether the user account is locked due to excessive failed login attempts.')
agentUserPasswordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setStatus('current')
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setDescription("Date and time when the user's password expires (past or present). Only valid when password aging is enabled.")
agentUserAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAccessLevel.setStatus('current')
if mibBuilder.loadTexts: agentUserAccessLevel.setDescription('Agent User Access Level. Supported values are 0, 1 and 15.')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSerialTimeout.setDescription('agentSerialTimeout specifies the maximum connect time(in minutes) without console activity. A value of 0 indicates that a console can be connected indefinitely. The time range is 0 to 160. ')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6), ("baud-57600", 7), ("baud-115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
if mibBuilder.loadTexts: agentSerialBaudrate.setDescription(' agentSerialBaudrate specifies the current baud rate at which the serial port will try to connect. The available values are 1200, 2400, 4800, 9600, 19200, 38400,57600, and 115200 baud. ')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
if mibBuilder.loadTexts: agentSerialCharacterSize.setDescription('agentSerialCharacterSize specifies the number of bits in a character. The number of bits is always 8.')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setDescription('agentSerialHardwareFlowControl specifies whether hardware flow-control is enabled or disabled. Hardware Flow Control is always disabled.')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialStopBits.setDescription(' agentSerialStopBits specifies the number of Stop bits per character. The number of Stop bits is always 1.')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
if mibBuilder.loadTexts: agentSerialParityType.setDescription(' agentSerialParityType specifies the Parity Method used on the Serial Port. The Parity Method is always None. ')
agentPasswordManagementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6))
agentPasswordManagementMinLength = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setDescription('Minimum length for user passwords All new local user passwords must be at least this many characters in length. ')
agentPasswordManagementHistory = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementHistory.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementHistory.setDescription('The number of previous passwords to store for prevention of password reuse. This ensures that each user does not reuse passwords often. A value of 0 indicates that no previous passwords will be stored. ')
agentPasswordManagementAging = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementAging.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementAging.setDescription('The maximum time that user passwords are valid, in days, from the time the password is set. Once a password expires, the user will be required to enter a new password following the first login after password expiration. A value of 0 indicates that passwords never expire. ')
agentPasswordManagementLockAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setDescription("The number of allowable failed local authentication attempts before the user's account is locked. A value of 0 indicates that user accounts will never be locked. ")
agentPasswordManagementPasswordStrengthCheck = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setDescription('Configures Password Strength Check feature.')
agentPasswordManagementStrengthMinUpperCase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setDescription('The number of minimum allowable uppercase letters in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMinLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setDescription('The number of minimum allowable lowercase letters in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMinNumericNumbers = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setDescription('The number of minimum allowable numeric numbers in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMinSpecialCharacters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setDescription('The number of minimum allowable special characters in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMaxConsecutiveCharacters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setDescription('The number of maximum consecutive characters can be present in a password. Maximum of 0 means disabling the restriction.')
agentPasswordManagementStrengthMaxRepeatedCharacters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setDescription('The number of maximum repeated characters can be present in a password. Maximum of 0 means disabling the restriction.')
agentPasswordManagementStrengthMinCharacterClasses = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setDescription('The number of minimum allowable character classes in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordMgmtLastPasswordSetResult = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setDescription('Retrieves the last password set Result.')
agentPasswordManagementStrengthExcludeKeywordTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15), )
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setDescription('Represents Password strength restricted keywords from the configurable password.')
agentPasswordManagementStrengthExcludeKeywordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentPasswordMgmtStrengthExcludeKeyword"))
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setDescription('Represents Password strength restricted keywords from the configurable password.')
agentPasswordMgmtStrengthExcludeKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setDescription('Specifies the given keyword string restricted from the configurable password.')
agentPasswordMgmtStrengthExcludeKeywordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 6, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setDescription('Create the Exclude Keyword Index and configure (Create or Destroy) the keyword to it.')
agentIASUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7))
agentIASUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigCreate.setDescription("Create a new user. When set with a non-empty string, a new user with that name will be created. This object will only return an empty string. This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentIASUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2), )
if mibBuilder.loadTexts: agentIASUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigTable.setDescription('A table for dot1x Client details and associated functionality.')
agentIASUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentIASUserIndex"))
if mibBuilder.loadTexts: agentIASUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigEntry.setDescription('Represents entry for port config table.')
agentIASUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: agentIASUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentIASUserIndex.setDescription('IAS user config index. ')
agentIASUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserName.setStatus('current')
if mibBuilder.loadTexts: agentIASUserName.setDescription("IAS user name. This string is limited to alpha-numeric strings (including '-' and '_' characters). ")
agentIASUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentIASUserPassword.setDescription('IAS user password.')
agentIASUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 7, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentIASUserStatus.setDescription('IAS User Status. active(1) - This user account is active. destroy(6) - Set to this value to remove this user account.')
agentCLIBannerMsgConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 8))
agentCLIBannerMessage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 1, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCLIBannerMessage.setStatus('current')
if mibBuilder.loadTexts: agentCLIBannerMessage.setDescription("Banner message string. To enter the banner message in multiple lines, separate each line by '\\r\\n'. The maximum printable characters is limited to 2000 characters.")
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigCreate.setDescription('Agent LAG Create. When this object is set with a non-empty string, a new LAG will be created if possible, with the entered string as its name. Get operation on this MIB object returns a null-value, as for the purpose of viewing the LAG name, the user should perform the traversal of agentLagSummaryConfigTable. For this reason the get operation on this object agentLagConfigCreate becomes insignificant. ')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setDescription("A summary table of the switch's LAG config entries")
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentLagSummaryLagIndex"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setDescription("Switch's LAG config entry")
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setDescription('Agent LAG IfIndex. This value corresponds with the LAG interface in the ifTable.')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryName.setDescription('Agent LAG Name. The associated name of the LAG used during creation. Duplicate names are not allowed.')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setDescription('Agent LAG FlushTimer.')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setDescription('Agent LAG LinkTrap. Configures sending Link Up/Down traps when the LAG interface goes Up or Down.')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setDescription('Agent LAG AdminMode. Administratively enables or disables this LAG interface.')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStpMode.setDescription('Agent LAG StpMode Administratively enables or disables STP on this interface.')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAddPort.setDescription('Agent LAG AddPort. Set to a non 0 value to add a port to the LAG. Values correspond to ifIndex values in the ifTable. Note: agentPortType for the port to be added must be full duplex and the same speed as previously added port(s), if any.')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setDescription('Agent LAG DeletePort. Set to a non 0 value to remove a port from the LAG. Values correspond to ifIndex values in the ifTable.')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStatus.setDescription('Agent LAG Status. active(1) - This LAG is enabled. destroy(6) - Set to this value to remove the LAG.')
agentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryType.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryType.setDescription('Agent LAG Type. static(1) - This LAG is staticly maintained. dynamic(2) - This LAG is dynamicly maintained.')
agentLagSummaryStaticCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStaticCapability.setDescription('Agent LAG Static Capability enable(1) - Static capability is enabled for this LAG interface disable(2) - Static capability is disabled for this LAG interface')
agentLagSummaryRateLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryRateLoadInterval.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryRateLoadInterval.setDescription('The length of time for which data is used to compute load statistics. The value is given in seconds, and must be a multiple of 30. The allowable range is 30 to 600 seconds.')
agentLagSummaryHashOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryHashOption.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryHashOption.setDescription('LAG Hashing Option. Valid values correspond to 1 (=Source MAC, VLAN, EtherType, and incoming port associated with the packet) 2 (=Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 3 (=Source/Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 4 (=Source IP and Source TCP/UDP fields of the packet) 5 (=Destination IP and Destination TCP/UDP Port fields of the packet) 6 (=Source/Destination IP and source/destination TCP/UDP Port fields of the packet) 7 (=Enhanced hashing mode) Support for particular options may vary by device.')
agentLagSummaryMinimumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryMinimumActiveLinks.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryMinimumActiveLinks.setDescription(' Agent LAG Threshold. This configures the threshold(i.e minimum number of active ports) value for trunk port .')
agentLagSummaryMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1518, 12288)).clone(1518)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryMtuValue.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryMtuValue.setDescription('Configures the MTU value for this LAG interface. The maximum value is dependent on the platform.')
agentLagSummaryPortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryPortCounter.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryPortCounter.setDescription('LAG port flap counter.')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setDescription("A detailed table of the switch's LAG config entries")
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setDescription("Switch's LAG config entry")
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setDescription('LAG index')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setDescription('LAG port index')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setDescription('LAG port speed. See agentPortType for a description and list of valid values.')
agentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setDescription('LAG port status. active(1) - Actively participating in the LAG. inactive(2) - Not participating in the LAG.')
agentLagDetailedPortCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortCounter.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortCounter.setDescription('LAG port flap counter.')
agentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setDescription('Agent LAG Static Capability. Configures whether Static LAGs are supported on this device.')
agentLagConfigGroupHashOption = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigGroupHashOption.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigGroupHashOption.setDescription('LAG Hashing Option. Valid values correspond to 1 (=Source MAC, VLAN, EtherType, and incoming port associated with the packet) 2 (=Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 3 (=Source/Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 4 (=Source IP and Source TCP/UDP fields of the packet) 5 (=Destination IP and Destination TCP/UDP Port fields of the packet) 6 (=Source/Destination IP and source/destination TCP/UDP Port fields of the packet) 7 (=Enhanced hashing mode) Support for particular options may vary by device. In BCM 53115 device only options 1 to 3 are support and only MAC address associated with the packet is used. ')
agentLagClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagClearCounters.setStatus('current')
if mibBuilder.loadTexts: agentLagClearCounters.setDescription('Clear LAG stats. Will always return 0 when read.')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIPAddress.setDescription("The switch's network ip address")
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSubnetMask.setDescription("The switch's network subnet mask")
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setDescription("The switch's network default gateway")
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setDescription("The switch's network Burned-In MAC address")
agentNetworkLocalAdminMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setDescription("The switch's network locally administered MAC address")
agentNetworkMacAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("burned-in", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkMacAddressType.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMacAddressType.setDescription("The switch's network Mac Address Type")
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setDescription("The switch's network config protocol")
agentNetworkConfigProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocolDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocolDhcpRenew.setDescription("The switch's network config protocol dhcp is renewed. Will always return 0 when read.")
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkWebMode.setDescription("The switch's network config protocol on next bootup This object has been obsoleted by agentHTTPWebMode.")
agentNetworkJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkJavaMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkJavaMode.setDescription('Configures the use of the Java interface through the Web. This object has been obsoleted by agentHTTPJavaMode.')
agentNetworkMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setDescription('The VLAN ID through which the switch can be managed using the agentNetworkIPAddress')
agentNetworkIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setDescription('The network port IPv6 administrative state')
agentNetworkIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 13), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setDescription('The network port IPv6 Gateway Address')
agentNetworkIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14), )
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setDescription('The list of IPv6 address prefixes for the network port.')
agentNetworkIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentNetworkIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix')
agentNetworkIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentNetworkIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentNetworkIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentNetworkIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setDescription('')
agentNetworkIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AddressAutoConfig.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddressAutoConfig.setDescription('The ipv6 address autoconfig allows the device to perform IPv6 stateless address auto-configuration to discover prefixes on the link and then to add the eui-64 based addresses to the network interface.')
agentNetworkIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6ConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6ConfigProtocol.setDescription("The switch's network IPv6 config protocol")
agentNetworkDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ClientDuid.setDescription(' The DHCPv6 Client unique DUID. This value cannot be modified')
agentNetworkStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18))
agentNetworkDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesReceived.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been received by the DHCPv6 client on the network port.')
agentNetworkDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesReceived.setDescription(' The no. of DHCPv6 messages of type REPLY that have been received by the DHCPv6 client on the network port.')
agentNetworkDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been discarded by the DHCPv6 client on the network port.')
agentNetworkDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type REPLY that have been discarded by the DHCPv6 client on the network port.')
agentNetworkDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6MalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6MalformedMessagesReceived.setDescription(' The no. of DHCPv6 messages received malformed by the DHCPv6 client on the network port.')
agentNetworkDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6SOLICITMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6SOLICITMessagesSent.setDescription(' The no. of DHCPv6 messages of type SOLICIT that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REQUESTMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REQUESTMessagesSent.setDescription(' The no. of DHCPv6 messages of type REQUEST that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6RENEWMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6RENEWMessagesSent.setDescription(' The no. of DHCPv6 messages of type RENEW that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REBINDMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REBINDMessagesSent.setDescription(' The no. of DHCPv6 messages of type REBIND that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6RELEASEMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6RELEASEMessagesSent.setDescription(' The no. of DHCPv6 messages of type RELEASE that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 3, 18, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcp6StatsReset.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6StatsReset.setDescription('Clear the DHCPv6 Client statistics on the network port. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIPAddress.setDescription("The switch's ServicePort ip address")
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentServicePortSubnetMask.setDescription("The switch's ServicePort subnet mask")
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setDescription("The switch's ServicePort default gateway")
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setDescription("The switch's ServicePort Burned-In MAC address")
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setDescription("The switch's ServicePort config protocol")
agentServicePortProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("renew", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setDescription("The switch's ServicePort protocol dhcp is renewed. Will always return 0 when read.")
agentServicePortIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setDescription('The service port IPv6 administrative state')
agentServicePortIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 8), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setDescription('The service port IPv6 Gateway Address')
agentServicePortIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9), )
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setDescription('The list of IPv6 address prefixes for the service port.')
agentServicePortIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentServicePortIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix')
agentServicePortIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentServicePortIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentServicePortIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentServicePortIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 9, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setDescription('')
agentServicePortIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setDescription('The ipv6 address autoconfig allows the device to perform IPv6 stateless address auto-configuration to discover prefixes on the link and then to add the eui-64 based addresses to the serviceport interface.')
agentServicePortIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setDescription('The service port IPv6 protocol configured on the switch.')
agentServicePortDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setDescription(' The DHCPv6 Client unique DUID. This value cannot be modified')
agentServicePortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13))
agentServicePortDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been received by the DHCPv6 client on the service port.')
agentServicePortDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setDescription(' The no. of DHCPv6 messages of type REPLY that have been received by the DHCPv6 client on the service port.')
agentServicePortDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been discarded by the DHCPv6 client on the service port.')
agentServicePortDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type REPLY that have been discarded by the DHCPv6 client on the service port.')
agentServicePortDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setDescription(' The no. of DHCPv6 messages received malformed by the DHCPv6 client on the service port.')
agentServicePortDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setDescription(' The no. of DHCPv6 messages of type SOLICIT that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setDescription(' The no. of DHCPv6 messages of type REQUEST that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setDescription(' The no. of DHCPv6 messages of type RENEW that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setDescription(' The no. of DHCPv6 messages of type REBIND that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setDescription(' The no. of DHCPv6 messages of type RELEASE that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 4, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setDescription('Clear the DHCPv6 Client statistics on the service port. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDhcpClientOptionsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5))
agentVendorClassOptionConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5, 1))
agentDhcpClientVendorClassIdMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdMode.setDescription("This object indicates whether DHCP Vendor Classifier Id Option (60) is enabled for DHCP Network Client. If this object is set to 'true', DHCP Vendor Classifier Id mode is enabled globally. If this object is set to 'false', DHCP Vendor Classifier Id mode is disabled globally.")
agentDhcpClientVendorClassIdString = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdString.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdString.setDescription('When this object is set with a non-empty string, the DHCP Vendor Classifier Id Option (60) string is enabled for DHCP Network Client.')
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6))
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable authentication Flag.')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the entire switch. When set to Enable, the Link Up/Down traps will be sent only if the Link Trap flag setting associated with the port (Port Configuration Menu) is set to Enable. ')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setDescription('Multiple Users Flag - Enable/Disable Multiple User traps. When the value is set to Enable, a Multiple User Trap is sent whenever someone logs in to the terminal interface (EIA 232 or Telnet) and there is already an existing terminal interface session. ')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setDescription('Spanning Tree Flag - This flag enables the sending of new root traps and topology change notification traps.')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('obsolete')
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setDescription('Broadcast Storm Flag - This flag enables or disables the broadcast storm trap. You must also enable Broadcast Storm Recovery Mode (see the Switch Configuration Menu). When this value is set to Enable and Broadcast Storm Recovery mode is set to Enable, the Broadcast Storm Start/End traps are sent when the switch enters and leaves Broadcast Storm Recovery. ')
agentSnmpTrapSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 6), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface, tunnel interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
agentSnmpServerPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(161, 161), ValueRangeConstraint(1025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpServerPortNum.setStatus('current')
if mibBuilder.loadTexts: agentSnmpServerPortNum.setDescription("Get/Set the UDP port number that the SNMP server listens to for incoming requests. The port number is an integer value from 1025 to 65535. Before setting this object, check your system (e.g. using 'netstat') to make sure the desired port number is not currently being used by any other service. The default value for this object is 161. Note that changing the value of this object may cause existing SNMP transactions to cease communicating with the device until the client applications are reconfigured to use the new port number.")
agentSnmpTrapServicePortSrcInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicePortEnable", 1), ("servicePortDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapServicePortSrcInterface.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapServicePortSrcInterface.setDescription('To select Service Port as a source-interface.')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentSpanningTreeMode.setDescription("The switch's Spanning Tree Switch Status. This functionality is now handled by agentStpAdminMode")
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8))
agentSwitchFdbAddressAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchFdbAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSwitchFdbAddressAgingTimeout.setDescription('The address aging timeout. Specifies aging time in seconds (10 - 1000000) before a dynamic MAC address is erased from the Filtering Database. The default value is 300 seconds.')
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setDescription("The switch's address aging timeout table. This functionality is now handled by agentSwitchFdbAddressAgingTimeout.")
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setDescription('Aging information about a specific Filtering Database.')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout (in seconds)")
agentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5), )
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setDescription("The switch's static Mac filtering table")
agentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchStaticMacFilteringVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setDescription('Per-port ingress/egress filter configuration based on VLAN Id and MAC address.')
agentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setDescription('The Static MAC Filter Vlan Id')
agentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setDescription('The Static MAC Filter MAC address')
agentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setDescription('The Static MAC Filter source port mask. When setting this value, the system will ignore configuration for ports not between the first and last valid ports. Configuration of any port numbers between this range that are not valid ports return a failure message, but will still apply configuration for valid ports. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 4), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setDescription('The Static MAC Filter destination port mask. When setting this value, the system will ignore configuration for ports not between the first and last valid ports. Configuration of any port numbers between this range that are not valid ports return a failure message, but will still apply configuration for valid ports. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table. Configuring destination port mask for a unicast MAC filter is not supported on some platforms.')
agentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setDescription('The Static MAC Filter status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentSwitchSnoopSSMGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupTable.setDescription('The (conceptual) table listing the IP multicast Source Specific Multicast Groups for which there are members on a particular interface and VLAN.')
agentSwitchSnoopSSMGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMGroupAddressType"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMGroupIfIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMGroupVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMGroupAddress"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupEntry.setDescription('An entry (conceptual row) in the agentSwitchSnoopSSMGroupTable.')
agentSwitchSnoopSSMGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddressType.setDescription('The address type of the agentSwitchSnoopSSMGroupTable entry. This value applies to both the agentSwitchSnoopSSMGroupAddress and the agentSwitchSnoopSSMGroupLastReporter entries.')
agentSwitchSnoopSSMGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupAddress.setDescription('The IP multicast group address for which this entry contains information. The InetAddressType, e.g. IPv4 or IPv6, is identified by the agentSwitchSnoopSSMGroupAddressType variable in the agentSwitchSnoopSSMGroup table.')
agentSwitchSnoopSSMGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupIfIndex.setDescription('The interface for which this entry contains information for an IP multicast group address.')
agentSwitchSnoopSSMGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 4), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupVlanId.setDescription('The VLAN for which this entry contains information for an IP multicast group address.')
agentSwitchSnoopSSMGroupLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupLastReporter.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupLastReporter.setDescription('The IP address of the source of the last membership report received for this IP Multicast group address on this interface and VLAN. The InetAddressType, e.g. IPv4 or IPv6, is identified by the agentSwitchSnoopSSMGroupAddressType variable in the agentSwitchSnoopSSMGroup table.')
agentSwitchSnoopSSMGroupSourceFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMGroupSourceFilterMode.setDescription('The state in which the interface is currently set. The value indicates the relevance of the corresponding source list entries in the SrcList Table (agentSwitchSnoopSSMSrcListTable).')
agentSwitchSnoopSSMSrcListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListTable.setDescription('The (conceptual) table listing the Source List entries corresponding to each VLAN, interface and SSM multicast group pair on a MGMD Snooping switch.')
agentSwitchSnoopSSMSrcListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListAddressType"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListIfIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListHostAddress"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMSrcListAddress"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListEntry.setDescription('An entry (conceptual row) in the agentSwitchSnoopSSMSrcListTable.')
agentSwitchSnoopSSMSrcListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddressType.setDescription('The address type of the InetAddress variables in this table. This value applies to the agentSwitchSnoopSSMSrcListHostAddress and agentSwitchSnoopSSMSrcListAddress entries.')
agentSwitchSnoopSSMSrcListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListAddress.setDescription('The IP multicast group address for which this entry contains information.')
agentSwitchSnoopSSMSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListIfIndex.setDescription('The interface for which this entry contains information for an IP multicast group address.')
agentSwitchSnoopSSMSrcListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 4), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListVlanId.setDescription('The VLAN for which this entry contains information for an IP multicast group address.')
agentSwitchSnoopSSMSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 35, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListHostAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMSrcListHostAddress.setDescription('The host address to which this entry corresponds. The agentSwitchSnoopSSMGroupSourceFilterMode value for this Group address, interface and VLAN indicates whether this Host address is included or excluded.')
agentSwitchSnoopSSMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36), )
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBTable.setDescription('MGMD Snooping Source Specific Multicast Forwarding database Table.')
agentSwitchSnoopSSMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMFDBGroupAddressType"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMFDBGroupAddress"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMFDBSourceAddress"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopSSMFDBVlanIndex"))
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBEntry.setDescription('An entry is created by IGMP Snooping for each group learned in the VLAN.')
agentSwitchSnoopSSMFDBVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBVlanIndex.setDescription('This object indicates the VLAN in which the group is learned.')
agentSwitchSnoopSSMFDBGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 2), InetAddressType())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddressType.setDescription('This object indicates IP multicast address type learned by MGMD Snooping.')
agentSwitchSnoopSSMFDBGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 3), InetAddress())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBGroupAddress.setDescription('This object indicates IP multicast address learned by MGMD Snooping.')
agentSwitchSnoopSSMFDBSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 4), InetAddress())
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBSourceAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBSourceAddress.setDescription('This object indicates IP Source address learned by MGMD Snooping.')
agentSwitchSnoopSSMFDBIncludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 5), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBIncludePortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBIncludePortList.setDescription('This object indicates the set of ports on which MGMD Membership Reports are received for the group indicating interest to receive traffic sent to the group.')
agentSwitchSnoopSSMFDBExcludePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 36, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBExcludePortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopSSMFDBExcludePortList.setDescription('This object indicates the set of ports on which MGMD Membership Reports are received for the group indicating interest to not to receive traffic sent to the group.')
agentSwitchStormControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12))
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetric", 2), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setDescription('Config switchconfig flowcontrol allows you to enable or disable 802.3x flow control for the switch. This value applies to only full-duplex mode ports. Enabling symmetric flow control allows the switch to send and receive pause frames. Enabling asymmetric flow control allows the switch to receive pause frames but it will not transmit pause frames.')
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setDescription('The switch config broadcast allows you to enable or disable broadcast storm recovery mode. When you specify Enable for Broadcast Storm Recovery and the broadcast traffic on any Ethernet port exceeds the configured threshold, the switch blocks (discards) the broadcast traffic.')
agentSwitchBroadcastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlThreshold.setDescription('Configures the broadcast storm recovery threshold for this port as a percentage of port speed or as an absolute pps rate.')
agentSwitchBroadcastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentSwitchBroadcastStormControlAction = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("shutdown", 1), ("trap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastStormControlAction.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastStormControlAction.setDescription('Configures the action to be taken when broadcast storm control rate limit is reached. none(0) - No action is taken. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentSwitchMulticastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setDescription('The switch config multicast allows you to enable or disable multicast storm recovery mode. When you specify Enable for multicast Storm Recovery and the multicast traffic on any Ethernet port exceeds the configured threshold, the switch blocks (discards) the multicast traffic.')
agentSwitchMulticastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlThreshold.setDescription('Configures the multicast storm recovery threshold for this port as a percentage of port speed or as an absolute pps rate.')
agentSwitchMulticastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentSwitchMulticastStormControlAction = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("shutdown", 1), ("trap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastStormControlAction.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastStormControlAction.setDescription('Configures the action to be taken when multicast storm control rate limit is reached. none(0) - No action is taken. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentSwitchUnicastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setDescription('The switch config unicast allows you to enable or disable unicast storm recovery mode. When you specify Enable for unicast Storm Recovery and the unknown unicast traffic on any Ethernet port exceeds the configured threshold, the switch blocks (discards) the unknown unicast traffic.')
agentSwitchUnicastControlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlThreshold.setDescription('Configures the unicast storm recovery threshold for this port as a percentage of port speed or as an absolute pps rate.')
agentSwitchUnicastControlThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentSwitchUnicastStormControlAction = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("shutdown", 1), ("trap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastStormControlAction.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastStormControlAction.setDescription('Configures the action to be taken when unicast storm control rate limit is reached. none(0) - No action is taken. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentSwitchStormControlType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("unicast", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchStormControlType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlType.setDescription('Type of storm control. broadcast(1) - Broadcast storm control traffic. multicast(2) - Multicast storm control traffic. unicast(3) - Unicast traffic resulted in destination lookup failure.')
agentSwitchStormControlAction = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 12, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("trap", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchStormControlAction.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlAction.setDescription('Action to be taken when storm control rate limit is reached. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentSwitchSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6))
agentSwitchSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setDescription('A table of the IGMP/MLD Snooping Global configuration entries.')
agentSwitchSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setDescription('Represents entry for Snooping switch Configuration.')
agentSwitchSnoopingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setDescription('The protocol type of network protocol in use.')
agentSwitchSnoopingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setDescription('This enables or disables Snooping on the system. ')
agentSwitchSnoopingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 3), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setDescription('IGMP/MLD Snooping Port Mask. This allows configuration of IGMP/MLD Snooping on selected ports. IGMP/MLD Snooping cannot be enabled on an interface that has routing enabled, or is a member of a LAG. If a port which has IGMP/MLD Snooping enabled becomes enabled for routing, or is enlisted as a member of a LAG, IGMP/MLD Snooping functionality will be disabled on that port. IGMP/MLD Snooping functionality will be subsequently be reenabled if routing is disabled or LAG membership is removed from an interface that had previously had IGMP/MLD Snooping enabled. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchSnoopingMulticastControlFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setDescription('Multicast Control Frames Processed by CPU. The number of multicast control frames that have been processed by the CPU.')
agentSwitchSnoopingIntfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7))
agentSwitchSnoopingIntfTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setDescription('A table of the IGMP/MLD Snooping Interface configuration entries.')
agentSwitchSnoopingIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setDescription('Represents entry for a IGMP/MLD Snooping Interface.')
agentSwitchSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setDescription('The port number to be selected. Each port maps to an interface.')
agentSwitchSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on a selected interface.')
agentSwitchSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected interface before deleting the interface from the entry. This value must be greater than agentSwitchSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingIntfMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected interface because it did not receive a report for a particular group in that interface. This value must be less than agentSwitchSnoopingIntfGroupMembershipInterval. For IGMP Snooping, this value ranges from 1 to 25 and for MLD Snooping, this value ranges from 1 to 65.')
agentSwitchSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be received on the selected interface before the interface is removed from the list of interfaces with multicast routers attached.')
agentSwitchSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on the selected interface.')
agentSwitchSnoopingIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setDescription('This enables or disables Multicast Routing on the selected interface.')
agentSwitchSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 7, 1, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setDescription('This field lists all the VlanIDs which include the selected interface.')
agentSwitchSnoopingVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8))
agentSwitchSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setDescription('A table of the IGMP/MLD Snooping Vlan configuration entries.')
agentSwitchSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setDescription('Represents entry for a IGMP/MLD Snooping Vlan.')
agentSwitchSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on a selected Vlan interface.')
agentSwitchSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected vlan before deleting the interface participating in the vlan from the entry. This value must be greater than agentSwitchSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected vlan because it did not receive a report for a particular group in the interface participating in the vlan. This value must be less than agentSwitchSnoopingIntfGroupMembershipInterval. For IGMP Snooping, this value ranges from 1 to 25 and for MLD Snooping, this value ranges from 1 to 65.')
agentSwitchSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on the selected vlan.')
agentSwitchSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be received on the selected interface participating in the vlan before the interface is removed from the list of interfaces with multicast routers attached. This parameter is configurable only for exisiting Vlans.')
agentSwitchSnoopingVlanReportSuppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanReportSuppMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanReportSuppMode.setDescription('This enables or disables IGMP Snooping Report Suppression feature on the selected vlan.')
agentSwitchVlanStaticMrouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9))
agentSwitchVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9, 1), )
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setDescription('A table of the IGMP/MLD Static Mrouter Configuration parameters.')
agentSwitchVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setDescription('Represents entry for a IGMP/MLD Static Mrouter.')
agentSwitchVlanStaticMrouterAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setDescription('This enables or disables IGMP/MLD Mrouter on a per-interface per-vlan basis.')
agentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10))
agentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1), )
if mibBuilder.loadTexts: agentSwitchMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBTable.setDescription('The Multicast Forwarding Database table')
agentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchMFDBVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchMFDBMacAddress"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setDescription('Contains Forwarding and Filtering information per Vlan Index, MAC Address, and Component User.')
agentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
agentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("mld", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setDescription('The component that is responsible for this entry in the Multicast Forwarding Database.')
agentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBType.setDescription('This displays the type of the entry. static(1) - Entries configured by the end user dynamic(2) - Entries added as a result of a learning process or protocol')
agentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setDescription('Text description of this multicast table entry.')
agentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setDescription('BitMask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 1, 1, 7), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setDescription('BitMask indicating which ports this entry indicates should be filtered. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2), )
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setDescription('The Multicast Forwarding Database Summary table')
agentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchMFDBSummaryVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setDescription('Summarizes the forwarding ports for all components registered for all MFDB table entries with the same Vlan Index and MAC Address.')
agentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
agentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 2, 1, 3), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setDescription('Port Mask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setDescription('This displays the maximum number of entries that can possibly be in the Multicast Forwarding Database table.')
agentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setDescription('This displays the largest number of entries that have been present in the Multicast Forwarding Database table. This value is also known as the MFDB high-water mark.')
agentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setDescription('This displays the current number of entries in the Multicast Forwarding Database table.')
agentSwitchVlanMacAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17))
agentSwitchVlanMacAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1), )
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setDescription("The switch's MAC To VLAN association table")
agentSwitchVlanMacAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchVlanMacAssociationMacAddress"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchVlanMacAssociationVlanId"))
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setDescription('VLAN to be assigned to untagged or priority tagged packets based on MAC address.')
agentSwitchVlanMacAssociationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setDescription('The Mac address')
agentSwitchVlanMacAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setDescription('The VLAN the Mac address assigned to')
agentSwitchVlanMacAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 17, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setDescription('The Mac to VLAN association row status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentSwitchProtectedPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18))
agentSwitchProtectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1), )
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setDescription("The switch's protected port mapping table")
agentSwitchProtectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchProtectedPortGroupId"))
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setDescription('Protected ports assigned to groups.')
agentSwitchProtectedPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setDescription('The group that this port belongs to')
agentSwitchProtectedPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setDescription('The name of the group')
agentSwitchProtectedPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 18, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setDescription('The set of ports that are protected in this group')
agentSwitchSnoopingQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20))
agentSwitchSnoopingQuerierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setDescription('A table of the IGMP/MLD Snooping Querier Global configuration entries.')
agentSwitchSnoopingQuerierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setDescription('Represents entry for Snooping Querier Configuration.')
agentSwitchSnoopingQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setDescription('This enables or disables Snooping Querier on the system. ')
agentSwitchSnoopingQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setDescription('This specifies the multicast protocol versions that are supported by the system.')
agentSwitchSnoopingQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setDescription('This specifies the default source ip address to be used while generating general queries.')
agentSwitchSnoopingQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setDescription('This specified the timer interval after which the system generates general queries.')
agentSwitchSnoopingQuerierExpiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setDescription('This specified the timer interval after which the detected other querier information is no longer valid.')
agentSwitchSnoopingQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setDescription('A table of the Snooping Querier Vlan configuration entries.')
agentSwitchSnoopingQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setDescription('Represents entry for a Snooping Querier configurable Vlan.')
agentSwitchSnoopingQuerierVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setDescription('This enables or disables Snooping Querier on a selected Vlan interface.')
agentSwitchSnoopingQuerierVlanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("querier", 1), ("non-querier", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setDescription('This specifies the current state of the Snooping Querier on a selected vlan interface')
agentSwitchSnoopingQuerierElectionParticipateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setDescription('This enables or disables the Snooping Querier Election Participation mode. When enabled snooping querier switch will participate in querier election up on discovering another querier in the specified vlan. When disabled, up on discovering another querier, snooping querier moves to non-querier state.')
agentSwitchSnoopingQuerierVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setDescription('This specifies the default source ip address to be used while generating general queries on the specified vlan.')
agentSwitchSnoopingQuerierOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setDescription('This specifies the multicast protocol version that is currently being used by the snooping switch for the specified vlan while generating query messages.')
agentSwitchSnoopingQuerierOperMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected vlan because it did not receive a report for a particular group in the interface participating in the vlan. This object is valid only when agentSwitchSnoopingQuerierOperVersion object is valid. (-1) - indicates that parameter is not available; ( 0) - indicates that response time is less then 1 second.')
agentSwitchSnoopingQuerierLastQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setDescription("This specifies the last querier's ip address for the specified vlan. It represents the detected other multicast querier in the vlan. ")
agentSwitchSnoopingQuerierLastQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 20, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setDescription('This specifies the multicast protocol version that is currently being used by the detected other multicast querier for the specified vlan. (-1) - indicates that parameter is not available.')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6), ("ftp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadMode.setDescription('Transfer upload mode configures the mode to use when uploading from the switch. The mode is either X/Y/ZMODEM, TFTP, SFTP or SCP. X/Y/ZMODEM is valid only when the file transfer is initiated by the serial EIA 232 port. SFTP and SCP are only allowed if the SSH feature is present. Upload to USB is allowed only if the USB feature is present. ')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('deprecated')
if mibBuilder.loadTexts: agentTransferUploadServerIP.setDescription('Transfer upload server IP configures the IP address of the server where the file is located. It is valid only when the Transfer Mode is TFTP, SFTP, or SCP. The address is 4 integer bytes ranging from 0 to 255. This object is deprecated in favour of agentTransferUploadServerAddress and agentTransferUploadServerAddressType.')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPath.setDescription('Transfer upload path configures the directory path where the file is to be uploaded to. The switch remembers the last file path used. ')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadFilename.setDescription('Transfer upload filename configures the file name for the file being uploaded from the switch. It can be up to 31 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\scripts\\ and File Name set to script2.scr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, SFTP or SCP and object agentTransferUploadDataType is not set to type code.')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("messagelog", 4), ("traplog", 5), ("clibanner", 6), ("code", 7), ("lang-pack", 8), ("cpuPktCapture", 9), ("startup-config", 10), ("backup-config", 11), ("factory-default-config", 12), ("config-script", 13), ("startuplog", 14), ("operationallog", 15), ("crash-log", 16), ("tech-support", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadDataType.setDescription('Transfer upload datatype configures the type of file to upload from the switch. The types for upload are: - Configuration File - Error log - Message log - Trap log - Banner File - Code - Language Pack file - Captured CPU packets file - Startup Config file - Backup Config file - Factory Default Config file - Config Script file - Startup Log file - Operational Log file - Crash Log File - Tech Support File ')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStart.setDescription('Transfer upload start will start an upload transfer. The agentTransferUploadMode object must not be set to xmodem(2), ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStatus.setDescription('Indicates the current status of an upload transfer.')
agentTransferUploadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddressType.setDescription('The type of the serverip address, as defined in the InetAddress MIB. The agentTransferUploadServerAddress object is intepreted within the context of agentTransferUploadServerAddressType')
agentTransferUploadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setDescription('Transfer upload serverip configures the IP address of the server where the file is to be uploaded to.It is valid only when the Transfer Mode is TFTP, SFTP or SCP. The type of this address is determined by the value of the agentTransferUploadServerAddressType object. The values for agentTransferUploadServerAddressType and agentTransferUploadServerAddress must be consistent.')
agentTransferUploadImagename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadImagename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadImagename.setDescription('Transfer upload image name. Sets the image to be uploaded as the specified name. Imagename cannot be set to unknown(1) option. When no name is set this object returns unknown(1) by default. Note: Imagename, File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferUploadUsername = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadUsername.setDescription('Username applicable to secure upload types, i.e., SFTP or SCP and FTP. ')
agentTransferUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPassword.setDescription('Password applicable to secure upload types, i.e. SFTP or SCP and FTP. ')
agentTransferUploadRemoteFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadRemoteFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadRemoteFilename.setDescription('Transfer upload remote filename configures the file name for the file being created remotely. It can be up to 31 alphanumeric characters. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferUploadSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface, tunnel interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
agentTransferUploadServicePortSrcInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicePortEnable", 1), ("servicePortDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServicePortSrcInterface.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServicePortSrcInterface.setDescription('To select Service Port as a source-interface.')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4), ("sftp", 5), ("scp", 6), ("ftp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadMode.setDescription('Transfer download mode configures the mode to use when downloading to the switch. The mode is either X/Y/ZMODEM, TFTP, FTP, SFTP or SCP. X/Y/ZMODEM is valid only when the file transfer is initiated by the serial EIA 232 port. SFTP and SCP are only allowed if the SSH feature is present. Download from USB is only allowed if the USB feature is present. ')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('deprecated')
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setDescription('Transfer download serverip configures the IP address of the server where the file is located. It is valid only when the Transfer Mode is TFTP, SFTP or SCP. The address is 4 integer bytes ranging from 0 to 255. This object is deprecated in favour of agentTransferDownloadServerAddress and agentTransferDownloadServerAddressType.')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPath.setDescription('Transfer download path configures the directory path where the file is located. The switch remembers the last file path used. ')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadFilename.setDescription('Transfer download filename configures the file name for the file being downloaded to the switch. It can be up to 31 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 32 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\scripts\\ and File Name set to script1.scr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, SFTP or SCP and the object agentTransferDownloadDataType download type is not set to code')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10), ("clibanner", 11), ("kernel", 12), ("tr069-acs-sslpem-root", 13), ("tr069-client-ssl-private-key", 14), ("tr069-client-ssl-cert", 15), ("lang-pack", 16), ("ias-users", 17), ("startup-config", 18), ("backup-config", 19), ("factory-default-config", 20), ("config-script", 21), ("publickey-image", 22), ("publickey-script", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDataType.setDescription('Transfer download datatype configures the type of file to download to the switch. The types for download are: code - Code File config - Configuration File sshkey-rsa1 - SSH-1 RSA Key File sshkey-rsa2 - SSH-2 RSA Key PEM File sshkey-dsa - SSH-2 DSA Key PEM File sslpem-root - SSL Trusted Root Certificate PEM File sslpem-server - SSL Server Certificate PEM File sslpem-dhweak - SSL DH Weak Encryption Parameter PEM File sslpem-dhstrong - SSL DH Strong Encryption Parameter PEM File cli-banner - CLI Banner File kernel - Kernel File lang-pack - Language Pack File. Ias-users - IAS user file startup-config - Startup Config File backup-config - Backup Config File factory-default-config - Factory Default Config File config-script - Config Script File publickey-image - Public key for image digital signature validation publickey-script - Public key for script digital signature validation Note: SSH Key files can only be downloaded if SSH Server is administratively disabled, and there are no active SSH sessions. Kernel file can be downloaded only on raptor platform and linux operating system. Language pack file is used when NLS localization feature is available. ')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStart.setDescription('Transfer download start will start an download transfer. The agentTransferDownloadMode object must not be set to xmodem(2), ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStatus.setDescription('Indicates the current status of an download transfer.')
agentTransferDownloadServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddressType.setDescription('The type of the serverip address, as defined in the InetAddress MIB. The agentTransferDownloadServerAddress object is intepreted within the context of agentTransferDownloadServerAddressType')
agentTransferDownloadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setDescription('Transfer download serverip configures the IP address of the server where the file is to be downloaded from.It is valid only when the Transfer Mode is TFTP, SFTP, or SCP. The type of this address is determined by the value of the agentTransferDownloadServerAddressType object. The values for agentTransferDownloadServerAddressType and agentTransferDownloadServerAddress must be consistent.')
agentTransferDownloadImagename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadImagename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadImagename.setDescription('Transfer download image name. Sets the downloaded image as the specified name. Imagename cannot be set to unknown(1) option. When no name is set this object returns unknown(1) by default. Note: Imagename, File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, SFTP or SCP.')
agentTransferDownloadUsername = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadUsername.setDescription('Username applicable to secure download types, i.e., SFTP or SCP and FTP. ')
agentTransferDownloadPassword = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPassword.setDescription('Password applicable to secure download types, i.e. SFTP or SCP and FTP. ')
agentTransferDownloadRemoteFilename = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadRemoteFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadRemoteFilename.setDescription('Transfer download remote filename configures the file name for the file being transferred from remote system. It can be up to 31 alphanumeric characters.')
agentTransferDownloadDigitalSignatureVerifySelect = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("verify", 1), ("noverify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDigitalSignatureVerifySelect.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDigitalSignatureVerifySelect.setDescription('Set the option to perform Digital signature validation of downloading file The following options are supported none - Based on config option do the digital signature validation verify - Verify the digital signature of downloading file noverify - Do not verify the digital signature of downloading file')
agentTransferDownloadSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 15), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface, tunnel interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
agentTransferDownloadServicePortSrcInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servicePortEnable", 1), ("servicePortDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServicePortSrcInterface.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServicePortSrcInterface.setDescription('To select Service Port as a source-interface.')
agentImageConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3))
agentImage1 = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage1.setStatus('obsolete')
if mibBuilder.loadTexts: agentImage1.setDescription('The image1 software version .')
agentImage2 = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage2.setStatus('obsolete')
if mibBuilder.loadTexts: agentImage2.setDescription('The image2 software version.')
agentActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImage.setStatus('obsolete')
if mibBuilder.loadTexts: agentActiveImage.setDescription('The active image name. image1 or image2. ')
agentNextActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextActiveImage.setStatus('obsolete')
if mibBuilder.loadTexts: agentNextActiveImage.setDescription('The next active image name. user assigns either image1 or image2. ')
agentActiveImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImageVersion.setStatus('current')
if mibBuilder.loadTexts: agentActiveImageVersion.setDescription('The software version of the active image.')
agentBackupImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBackupImageVersion.setStatus('current')
if mibBuilder.loadTexts: agentBackupImageVersion.setDescription('The software version of the backup image if present.')
agentNextSelectedImage = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 9, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextSelectedImage.setStatus('current')
if mibBuilder.loadTexts: agentNextSelectedImage.setDescription('The image selected for loading on next boot.')
agentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10))
agentMirroredPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setDescription('IfIndex of the mirrored port')
agentProbePortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProbePortIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentProbePortIfIndex.setDescription('IfIndex of the probe port')
agentPortMirroringMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirroringMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortMirroringMode.setDescription('Port mirroring mode: enable - enable mirroring mode disable - disable mirroring mode delete - clear MirroredPort and Probe Port configuration')
agentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4), )
if mibBuilder.loadTexts: agentPortMirrorTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTable.setDescription('This table includes entries for each Port Mirroring session.')
agentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentPortMirrorSessionNum"))
if mibBuilder.loadTexts: agentPortMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorEntry.setDescription('Provides configuration of a Port Mirroring session specifying the destination port, and the source Port Mask, providing a many-to-one mapping.')
agentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setDescription('The Session number of this mirroring entry. The number of sessions is fixed, and is platform dependant.')
agentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setDescription('The port which traffic from the mirrored ports will be sent to.')
agentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setDescription('The ports from which traffic will be sent to the destination port. The destination port can not be included in this list of ports.')
agentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setDescription('The status of this port mirroring session. enable(1) - This session is active and all traffic from the source ports will be mirrored to the destination port. disable(2) - This session is not active. delete(3) - Remove the configuration for this Session')
agentPortMirrorSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourceVlan.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSourceVlan.setDescription('The vlan from which traffic will be sent to the destination port.')
agentPortMirrorRemoteSourceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteSourceVlan.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteSourceVlan.setDescription('The remote vlan from which traffic will be sent to the destination port.')
agentPortMirrorRemoteDestinationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteDestinationVlan.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteDestinationVlan.setDescription('The VLAN that forwards the network traffic to the destination switch. NOTE: In order to set value for the object, need to set values for agentPortMirrorRemoteDestinationVlan and agentPortMirrorReflectorPort objects simultaneously.')
agentPortMirrorReflectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorReflectorPort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorReflectorPort.setDescription('The port which traffic from the mirrored ports will be sent to in case of destination being remote VLAN. NOTE: In order to set value for the object, need to set values for agentPortMirrorRemoteDestinationVlan and agentPortMirrorReflectorPort objects simultaneously.')
agentPortMirrorIpAccessListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorIpAccessListNumber.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorIpAccessListNumber.setDescription('The IP access-list number attached to the port mirroring session.')
agentPortMirrorMacAccessListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorMacAccessListNumber.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorMacAccessListNumber.setDescription('The MAC access-list number attached to the port mirroring session.')
agentPortMirrorTypeTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5), )
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setDescription("This table includes entries for each source port's direction of port mirroring.")
agentPortMirrorTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentPortMirrorSessionNum"), (0, "FASTPATH-SWITCHING-MIB", "agentPortMirrorTypeSourcePort"))
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setDescription('Provides configuration of a Port Mirroring direction specifying the session of the port mirroring and source port')
agentPortMirrorTypeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setDescription('The port from which traffic will be sent to the destination port. This port should be a source port in the corresponding session')
agentPortMirrorTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txrx", 3))).clone('txrx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorTypeType.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeType.setDescription('The direction of the data to be mirrored on this source port. tx(1) - The data that is transmitted from the source port. rx(2) - The data that is received on the source port. txrx(3) - The data that is transmitted/received from/on the source port')
agentPortMirrorRemoteVlan = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlan.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlan.setDescription('The VLAN configured as RSPAN VLAN.')
agentPortMirrorRemoteVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7), )
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanTable.setDescription('A table of the RSPAN VLAN config entries')
agentPortMirrorRemoteVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentPortMirrorRemoteVlanIndex"))
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanEntry.setDescription('RSPAN VLAN config entry')
agentPortMirrorRemoteVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7, 1, 1), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanIndex.setDescription('The VLAN which is configured as a remote-span VLAN.')
agentPortMirrorRemoteVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 10, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorRemoteVlanRowStatus.setDescription('The status of this entry. active(1) - the VLAN is configured as a remote-span VLAN createAndGo(4) - add the VLAN as a remote-span VLAN destroy(6) - remove the VLAN from the list of Remote-span VLAN. RSPAN VLAN cannot be removed or changed while it is used with a Monitor session.')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortTable.setDescription('This table provides 802.3ad link aggregation information for each physical port that is not available through the standard MIB.')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setDescription('Information about a table entry. The agentDot3adAggPort identifies the external interface number of the port.')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPort.setDescription('ifIndex of this physical port')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setDescription('Enable/disable 802.3ad LACP on this port')
agentSwitchportConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37), )
if mibBuilder.loadTexts: agentSwitchportConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportConfigTable.setDescription('')
agentSwitchportConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchportIntfIndex"))
if mibBuilder.loadTexts: agentSwitchportConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportConfigEntry.setDescription('')
agentSwitchportIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportIntfIndex.setDescription('The port or LAG number to be selected. Each port/LAG maps to an interface.')
agentSwitchportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("general", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportMode.setDescription('Configure the VLAN membership mode of a port.')
agentSwitchportAccessVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportAccessVlanID.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportAccessVlanID.setDescription('Configures the Access VLAN Id for the interface.')
agentSwitchportTrunkNativeVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanID.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanID.setDescription('Configures the Native VLAN Id for the interface.')
agentSwitchportTrunkNativeVlanTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanTagging.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportTrunkNativeVlanTagging.setDescription("Describes the Native VLAN tagging for the interface. 'disable' mean that packets marked with Native VLAN are transmitted untagged from Trunk port. ")
agentSwitchportTrunkAllowedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 6), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchportTrunkAllowedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportTrunkAllowedVlanList.setDescription('Configures the allowed VLAN list of Trunk switch interface.')
agentSwitchportGeneralUntaggedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 7), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralUntaggedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralUntaggedVlanList.setDescription('Shows the allowed untagged VLAN list of general switch interface.')
agentSwitchportGeneralTaggedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralTaggedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralTaggedVlanList.setDescription(' Shows the allowed tagged VLAN list of general switch interface.')
agentSwitchportGeneralForbiddenVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 9), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralForbiddenVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralForbiddenVlanList.setDescription('Shows the Forbidden VLAN list of general switch interface.')
agentSwitchportGeneralDynamicallyAddedVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 37, 1, 10), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchportGeneralDynamicallyAddedVlanList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchportGeneralDynamicallyAddedVlanList.setDescription('Shows the list of dynamically added VLANs for general switch interface.')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigTable.setDescription("A table of the switch's physical port config entries")
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigEntry.setDescription("Switch's physical port config entry")
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
if mibBuilder.loadTexts: agentPortDot1dBasePort.setDescription('The port number of this port.')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortIfIndex.setDescription("The switch's Port IfIndex")
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
if mibBuilder.loadTexts: agentPortIanaType.setDescription("The switch's Port Type")
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortSTPMode.setDescription("The switch's Port Spanning Tree Protocol Mode STP mode values are: dot1d (the default) fast, indicates you want to use the fast spanning tree mode off, indicates the STP mode is turned off for a particular port This object is only supported when the Dot1d Protocol is enabled.")
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortSTPState.setDescription("The switch's Port Spanning Tree Protocol State. This object is only supported when the Dot1d Protocol is enabled.")
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortAdminMode.setDescription("The switch's Port Admin Mode")
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalMode.setDescription("The switch's Port Speed Mode. This is the configured physical mode. This object is read-only for gigabit ports")
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8), ("full-10gsx", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalStatus.setDescription("The switch's Port Physical Speed Status. This is the current actual speed.")
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortClearStats.setDescription('clear stats for this port only')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setReference('RFC 4836')
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
if mibBuilder.loadTexts: agentPortDefaultType.setDescription('This object identifies the default administrative port type, to be used in conjunction with the operational port type denoted by agentPortType. This object represents the administratively-configured type of the MAU. If auto-negotiation is not enabled or is not implemented for this MAU, the value of this object determines the operational type of the MAU. In this case, a set to this object will force the MAU into the specified operating mode. If auto-negotiation is implemented and enabled for this MAU, the operational type of the MAU is determined by auto-negotiation, and the value of this object denotes the type to which the MAU will automatically revert if/when auto-negotiation is later disabled. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD dot3MauType1000BaseTFD dot3MauType1000BaseXFD agentPortType2pt5GigBaseX dot3MauType10GigBaseX agentPortType20GigBaseX agentPortType25GigBaseX dot3MauType40GbaseCR4 dot3MauType100GbaseCR10')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setReference('RFC 4836')
if mibBuilder.loadTexts: agentPortType.setStatus('current')
if mibBuilder.loadTexts: agentPortType.setDescription('This object identifies the port type. An initial set of MAU types are defined in RFC 4836. The assignment of OBJECT IDENTIFIERs to new types of MAUs is managed by the IANA. If the MAU type is unknown, either a private object identifier, if one exists, or the object identifier unknownMauType OBJECT IDENTIFIER ::= { 0 0 } is returned. Note that unknownMauType is a syntactically valid object identifier, and any conformant implementation of ASN.1 and the BER must be able to generate and recognize this value. This object represents the operational type of the MAU, as determined by either (1) the result of the auto-negotiation function or (2) if auto-negotiation is not enabled or is not implemented for this MAU, by the value of the object agentPortDefaultType, or (3) for the GigE card a value determined by the GBIC connected to the card. In case (2), a set to the object agentPortDefaultType will force the MAU into the new operating mode. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD dot3MauType1000BaseTFD dot3MauType1000BaseXFD agentPortType2pt5GigBaseX dot3MauType10GigBaseX agentPortType20GigBaseX agentPortType25GigBaseX dot3MauType40GbaseCR4 dot3MauType100GbaseCR10')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setDescription('This object identifies the administration status of auto negotiation for this port.')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetric", 1), ("asymmetric", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setDescription('Config flowcontrol allows you to enable or disable 802.3x flow control for this port. This value applies to only full-duplex mode ports. Enabling symmetric flow control allows the port to send and receive pause frames. Enabling asymmetric flow control allows the port to receive pause frames but it will not transmit pause frames.')
agentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setDescription('This object identifies the largest value that can be configured for agentPortMaxFrameSize')
agentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size value for this port. The maximmum value that this object can be set to is the value of agentPortMaxFrameSizeLimit. For Ethernet ports which support 802.1Q vlan tagging, the minimum value that this object can be set to is 1522')
agentPortBroadcastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlMode.setDescription('If enabled, broadcast storm recovery will function on this port. When you specify Enable for Broadcast Storm Recovery and the broadcast traffic on this Ethernet port exceeds the configured threshold, the switch blocks (discards) the broadcast traffic.')
agentPortBroadcastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlThreshold.setDescription('Configures the broadcast storm recovery threshold for this port as a percentage of port speed or as an absolute pps rate.')
agentPortMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlMode.setDescription('If enabled, multicast storm recovery will function on this port. When you specify Enable for Multicast Storm Recovery and the multicast traffic on this Ethernet port exceeds the configured threshold, the switch blocks (discards) the multicast traffic.')
agentPortMulticastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlThreshold.setDescription('Configures the multicast storm recovery threshold for this port as a percentage of port speed or as an absolute pps rate.')
agentPortUnicastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlMode.setDescription('If enabled, unicast storm recovery will function on this port. When you specify Enable for Unicast Storm Recovery and the unknown unicast traffic on this Ethernet port exceeds the configured threshold, the switch blocks (discards) the unknown unicast traffic.')
agentPortUnicastControlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14880000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlThreshold.setDescription('Configures the unicast storm recovery threshold for this port as a percentage of port speed or as an absolute pps rate.')
agentPortBroadcastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentPortMulticastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentPortUnicastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentPortVoiceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vlanid", 2), ("dot1p", 3), ("untagged", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setDescription('Describes and Configures the Port Voice VLAN Mode. This object can only be set to disable(5).')
agentPortVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanID.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanID.setDescription('Describes and Configures the Port Voice VLAN ID if the Voice Vlan Mode is Vlan ID.')
agentPortVoiceVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setDescription('Describes and Configures the Port Voice VLAN Priority if the Voice Vlan Mode is dot1p. A value of 255 indicates that the priority is not configured.')
agentPortVoiceVlanDataPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trust", 1), ("untrust", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setDescription('Describes and Configures the Port Voice VLAN Data Priority Mode.')
agentPortVoiceVlanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setDescription('Describes the Port Voice VLAN Operational Status.')
agentPortVoiceVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setDescription('Describes and Configures the Port Voice VLAN tagging mode.')
agentPortVoiceVlanNoneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setDescription('Describes and Configures the Port Voice VLAN None mode.')
agentPortVoiceVlanDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDSCP.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanDSCP.setDescription('Describes and Configures the Port Voice VLAN DSCP value.')
agentPortVoiceVlanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setDescription('Describes and Configures the Port Voice VLAN Authentication mode. Disable means authentication not required for voice devices when dot1x is enabled.')
agentPortDot3FlowControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setDescription('This object identifies operational status of the flow control per port.')
agentPortLoadStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLoadStatsInterval.setStatus('current')
if mibBuilder.loadTexts: agentPortLoadStatsInterval.setDescription('The length of time for which data is used to compute load statistics. The value is given in seconds, and must be a multiple of 30. The allowable range is 30 to 600 seconds.')
agentPortSwitchportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("general", 3), ("host", 4), ("promiscuous", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSwitchportMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSwitchportMode.setDescription('')
agentPortBroadcastControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("shutdown", 1), ("trap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlAction.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlAction.setDescription('Configures the action to be taken when broadcast storm control rate limit is reached. none(0) - No action is taken. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentPortMulticastControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("shutdown", 1), ("trap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlAction.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlAction.setDescription('Configures the action to be taken when multicast storm control rate limit is reached. none(0) - No action is taken. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentPortUnicastControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 13, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("shutdown", 1), ("trap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlAction.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlAction.setDescription('Configures the action to be taken when unicast storm control rate limit is reached. none(0) - No action is taken. shutdown(1) - Diag disable the interface on storm control. trap(2) - Generate trap on storm control.')
agentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15))
agentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigDigestKey.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigDigestKey.setDescription('The MST configuration digest key.')
agentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setDescription('The MST configuration format selector. A value other than 0 (zero) indicates non-support for the IEEE 802.1s standard.')
agentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigName.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigName.setDescription('The MST configuration name of at most 32 characters.')
agentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigRevision.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigRevision.setDescription('The MST configuration revision. The default value is 1.')
agentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpForceVersion.setStatus('current')
if mibBuilder.loadTexts: agentStpForceVersion.setDescription('The MST configuration force protocol version. The default version is dot1s.')
agentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentStpAdminMode.setDescription('The spanning tree operational status. enable(1) - enables spanning tree operational status on the switch. disable(2) - disables spanning tree operational status on the switch. The default status is disabled.')
agentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7), )
if mibBuilder.loadTexts: agentStpPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpPortTable.setDescription('STP port table.')
agentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpPortEntry.setDescription('STP port entry.')
agentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortState.setStatus('current')
if mibBuilder.loadTexts: agentStpPortState.setDescription('The administrative STP state for the port. enable(1) - enables STP on the port. disable(2) - disables STP on the port. The default port STP state is enabled for the first 4095 ports and disabled for any ports beyond.')
agentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setDescription('The MSTP BPDUs received on a specific port.')
agentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setDescription('The MSTP BPDUs sent from a specific port.')
agentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setDescription('The RSTP BPDUs received on a specific port.')
agentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setDescription('The RSTP BPDUs sent from a specific port.')
agentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setDescription('The STP BPDUs received on a specific port.')
agentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setDescription('The STP BPDUs sent from a specific port.')
agentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortUpTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortUpTime.setDescription('Time since port was reset. It is displayed in days, hours, minutes, and seconds.')
agentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setStatus('current')
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setDescription("Force the specified port to transmit RSTP or MSTP BPDU's. Supported values: false(0) - BPDUs are not to be transmitted. true(1) - BPDUs are to be transmitted A non-zero value indicates that BPDUs are to be sent on the specified port.")
agentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8))
agentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstHelloTime.setDescription('The MSTP root port hello time for the CIST.')
agentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstMaxAge.setDescription('The MSTP root port max age for the CIST.')
agentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setDescription('The MSTP regional root identifier for the CIST.')
agentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setDescription('The MSTP regional root path cost for the CIST.')
agentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setDescription('The MSTP root port forward delay for the CIST.')
agentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setDescription('The MSTP bridge forward delay for the CIST. The default value is 15.')
agentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setDescription('The MSTP bridge hello time for the CIST. The default value is 2. According to IEEE 802.1Q-REV 2005 updating hello time is disallowed')
agentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setDescription('The MSTP bridge hold time for the CIST.')
agentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setDescription('The MSTP bridge max age for the CIST. The default value is 20.')
agentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setDescription('The MSTP bridge max hops for the CIST. The default value is 20.')
agentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgePriority.setDescription('The MSTP bridge priority for the CIST. The default value is 32768.')
agentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 8, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setDescription('The MSTP bridge hold count for the CIST. This command sets the value of maximum bpdus that a bridge is allowed to send within a hello time window. The default value is 6.')
agentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9), )
if mibBuilder.loadTexts: agentStpCstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTable.setDescription('CIST port table.')
agentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpCstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEntry.setDescription('CIST port entry.')
agentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setDescription('The MSTP operational status of a specific port for the CIST.')
agentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setDescription('The MSTP operational point to point mac of a specific port for the CIST.')
agentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setDescription('The MSTP topology change acknowledge for a specific port in the CIST.')
agentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEdge.setDescription('The administrative state of a specific port in CIST. enable(1) - enables the port. disable(2) - disables the port. The default port state is disabled.')
agentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in CIST.')
agentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 6), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortId.setDescription('The MSTP port identifier of a specific port in CIST.')
agentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPathCost.setDescription('The MSTP port path cost in CIST. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed.')
agentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPriority.setDescription('The MSTP port priority in CIST. The priority is in the increments of 16. The default value is 128.')
agentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in CIST.')
agentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setDescription('The MSTP designated cost of a specific port in CIST.')
agentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 11), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in CIST.')
agentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setDescription('The MSTP external port path cost in CIST. The default value varies depending upon the link speed.')
agentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setDescription('BPDU Guard Mode effect on the port. enable(1) - BPDU Guard Mode is enabled on the port. disable(2) - BPDU Guard Mode is disabled on the port.')
agentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setDescription('This command sets BPDU Filter mode on the port. enable(1) - BPDU Filter Mode is enabled on the port. disable(2) - BPDU Filter Mode is disabled on the port.')
agentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setDescription('This command sets BPDU Flood mode on the port. enable(1) - BPDU Flood Mode is enabled on the port. disable(2) - BPDU Flood Mode is disabled on the port.')
agentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setDescription('This command sets the auto-edge mode of the port which enables it to become an edge port if it does not see BPDUs for some duration. enable(1) - enables the auto-edge mode for the port. disable(2) - disables the auto-edge mode for the port. The default auto-edge mode is enabled.')
agentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setDescription('This command sets a port to discard any superior information received by the port and thus protect against root of the device from changing.The port gets put into discarding state and does not forward any packets. enable(1) - enables the root-guard mode for the port. disable(2) - disables the root-guard mode for the port. The default root-guard mode is disabled.')
agentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setDescription('This command restricts the port from propagating any topology change information received through that port. enable(1) - enables the tcn-guard mode for the port. disable(2) - disables the tcn-guard mode for the port. The default tcn-guard mode is disabled.')
agentStpCstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setDescription('This command enables loop guard on this port. This setting applies to all Spanning Tree instances of which this port is a member. enable(1) - enables the loop guard mode for the port. disable(2) - disables the loop guard mode for the port. The default loop-guard mode is disabled.')
agentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10), )
if mibBuilder.loadTexts: agentStpMstTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTable.setDescription('MST table.')
agentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: agentStpMstEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstEntry.setDescription('MST entry.')
agentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstId.setDescription('The MSTP instance ID.')
agentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgePriority.setDescription('The MSTP bridge priority in a specific instance. The priority is in the increments of 4096. The recommended default value is 32768.')
agentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setDescription('The MSTP bridge identifier in a specific instance.')
agentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setDescription('The MSTP designated root bridge identifier in a specific instance.')
agentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPathCost.setDescription('The MSTP root path cost in a specific instance.')
agentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPortId.setDescription('The MSTP root port ID in a specific instance.')
agentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setDescription('The MSTP time since the last topology change in a specific instance.')
agentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setDescription('The MSTP count of topology changes in a specific instance.')
agentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setDescription('The MSTP topology change parameter in a specific instance.')
agentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRowStatus.setDescription('The MSTP instance status. Supported values: active(1) - valid instance. createAndGo(4) - used to create a new instance. destroy(6) - removes an instance.')
agentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11), )
if mibBuilder.loadTexts: agentStpMstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTable.setDescription('MST port table.')
agentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortEntry.setDescription('MST port entry.')
agentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in a specific instance.')
agentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortId.setDescription('The MSTP port identifier of a specific port in a specific instance.')
agentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPathCost.setDescription('The MSTP port path cost in a specific instance. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed.')
agentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPriority.setDescription('The MSTP port priority in a specific instance. The priority is in the increments of 16. The default value is 128.')
agentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in a specific instance.')
agentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setDescription('The MSTP designated cost of a specific port in a specific instance.')
agentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 7), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in a specific instance.')
agentStpMstPortLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setDescription('The loop inconsistent state of a specific port in a specific instance. This value can only report as true(1) when loop guard is enabled on the port and the port has transitioned from blocking state in this MST instance.')
agentStpMstPortTransitionsIntoLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setDescription('The number of times this interface has transitioned into loop inconsistent state.')
agentStpMstPortTransitionsOutOfLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setDescription('The number of times this interface has transitioned out of loop inconsistent state.')
agentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12), )
if mibBuilder.loadTexts: agentStpMstVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanTable.setDescription('MST VLAN table.')
agentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentStpMstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanEntry.setDescription('MST VLAN entry.')
agentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setDescription('The association status of an MSTP instance and a VLAN. Supported values: active(1) - valid association between an MSTP instance and a VLAN. createAndGo(4) - used to create a new association between an MSTP instance and a VLAN. destroy(6) - removes the association between an MSTP instance and a VLAN.')
agentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduGuardMode.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduGuardMode.setDescription('The spanning tree BPDU Guard Mode. enable(1) - enables BPDU Guard Mode on the switch. disable(2) - disables BPDU Guard Mode on the switch. The default status is disabled.')
agentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 15, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setDescription('The spanning tree BPDU Filter Mode, it enables BPDU Filter on all edge ports. enable(1) - enables BPDU Filter Mode on the switch. disable(2) - disables BPDU Filter Mode on the switch. The default status is disabled.')
agentAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16))
agentAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListCreate.setDescription('Authentication List Create If set to a non empty string, creates a new Authentication List for configuration.')
agentAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2), )
if mibBuilder.loadTexts: agentAuthenticationListTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListTable.setDescription('Authentication List table.')
agentAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentAuthenticationListIndex"))
if mibBuilder.loadTexts: agentAuthenticationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListEntry.setDescription('Authentication List entry.')
agentAuthenticationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthenticationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListIndex.setDescription('Authentication List Index Unique number used for indexing into this table.')
agentAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListName.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListName.setDescription('Authentication List Name Unique name used to identify the Authentication List from other tables.')
agentAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setDescription('Authentication List Method 1 Configures the first authentication method to use when this list is specified.')
agentAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setDescription('Authentication List Method 2 Configures the second authentication method to use when this list is specified.')
agentAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setDescription('Authentication List Method 3 Configures the third authentication method to use when this list is specified.')
agentAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListStatus.setDescription('The status of the Authentication List. Supported values: active(1) - indicates a valid Authenticaiton List destroy(6) - removes the Authentication List.')
agentAuthenticationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setDescription('Authentication List Method 4 Configures the fourth authentication method to use when this list is specified.')
agentAuthenticationListMethod5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setDescription('Authentication List Method 5 Configures the fifth authentication method to use when this list is specified.')
agentUserConfigDefaultAuthenticationList = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setDescription('Default Authentication List This object configures which authentication list to use for users which do not have an Authentication List configured. The list must be configured before setting.')
agentUserAuthenticationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 4), )
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setDescription('User Authentication Config Table')
agentUserAuthenticationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 4, 1), )
agentUserConfigEntry.registerAugmentions(("FASTPATH-SWITCHING-MIB", "agentUserAuthenticationConfigEntry"))
agentUserAuthenticationConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setDescription('User Authentication Config Entry')
agentUserAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationList.setDescription('User Authentication List This object configures which authentication list to use for this user. The list must be configured before setting.')
agentUserPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 5), )
if mibBuilder.loadTexts: agentUserPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigTable.setDescription('User Port Config Table')
agentUserPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 5, 1), )
agentUserConfigEntry.registerAugmentions(("FASTPATH-SWITCHING-MIB", "agentUserPortConfigEntry"))
agentUserPortConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigEntry.setDescription('User Port Config Entry')
agentUserPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 16, 5, 1, 1), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentUserPortSecurity.setDescription('User Port Port Security This object configures which ports the user has access to. Ports are indexed based on dot1dBasePort entries in dot1dBasePortTable.')
agentExecAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20))
agentExecAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListCreate.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListCreate.setDescription('ExecAccounting List Create if set to a non empty string, creates a new ExecAccounting List for configuration.')
agentExecAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2), )
if mibBuilder.loadTexts: agentExecAccountingListTable.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListTable.setDescription('ExecAccounting Method List table.')
agentExecAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentExecAccountingListIndex"))
if mibBuilder.loadTexts: agentExecAccountingListEntry.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListEntry.setDescription('ExecAccounting Method List Entry.')
agentExecAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListIndex.setDescription('ExecAccounting List Index Unique number used for indexing into this table.')
agentExecAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAccountingListName.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListName.setDescription(' Unique name used to identify the ExecAccounting List from other tables.')
agentExecAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingMethodType.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingMethodType.setDescription('ExecAccounting Method Type Configures the method type to use when this ExecAccounting list is specified.')
agentExecAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setDescription('ExecAccounting List Method 1 Configures the authentication method to use when this list is specified.')
agentExecAccountingListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setDescription('ExecAccounting List Method 2 Configures the authentication method to use when this list is specified.')
agentExecAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 20, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListStatus.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListStatus.setDescription('The status of the ExecAccounting List. Supported values: active(1) - indicates a valid ExecAccounting List destroy(6) - removes the ExecAccounting List.')
agentCmdsAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21))
agentCmdsAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setDescription('CmdsAccounting List Create if set to a non empty string, creates a new CmdsAccounting List for configuration.')
agentCmdsAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2), )
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setDescription('CmdsAccounting Method List table.')
agentCmdsAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentCmdsAccountingListIndex"))
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setDescription('CmdsAccounting Method List Entry.')
agentCmdsAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setDescription('CmdsAccounting List Index Unique number used for indexing into this table.')
agentCmdsAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAccountingListName.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListName.setDescription(' Unique name used to identify the CmdsAccounting List from other tables.')
agentCmdsAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setDescription('CmdsAccounting Method Type Configures the method type to use when this CmdsAccounting list is specified.')
agentCmdsAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setDescription('CmdsAccounting List Method 1 Configures the authentication method to use when this list is specified.')
agentCmdsAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 21, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setDescription('The status of the CmdsAccounting List. Supported values: active(1) - indicates a valid CmdsAccounting List destroy(6) - removes the CmdsAccounting List.')
agentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17))
agentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1), )
if mibBuilder.loadTexts: agentClassOfServicePortTable.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortTable.setDescription('A table that contains information about the 802.1p priority mapping to traffic class priority queue for every physical port.')
agentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentClassOfServicePortPriority"))
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setDescription('A 802.1p priority mapped to a traffic class priority queue.')
agentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setDescription('The Priority value determined for the received frame. This value is equivalent to the priority indicated in the tagged frame received, or one of the evaluated priorities, determined according to the media-type. For untagged frames received from Ethernet media, this value is equal to the dot1dPortDefaultUserPriority value for the ingress port.')
agentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClassOfServicePortClass.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortClass.setDescription('Traffic class priority queue the received frame is mapped to.')
agentHTTPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18))
agentHTTPWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPWebMode.setStatus('current')
if mibBuilder.loadTexts: agentHTTPWebMode.setDescription('Configures the HTTP server admin mode')
agentHTTPJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPJavaMode.setStatus('current')
if mibBuilder.loadTexts: agentHTTPJavaMode.setDescription('Configures the use of the Java interface through Web connections.')
agentHTTPMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentHTTPMaxSessions.setDescription('Configures the maximum number of allowable HTTP sessions. The default value is 16.')
agentHTTPHardTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPHardTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPHardTimeout.setDescription('Configures the hard timeout for HTTP sessions in hours. The default value is 24 hours.')
agentHTTPSoftTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setDescription('Configures the soft (activity) timeout for HTTP sessions in minutes. The default value is 5 minutes.')
agentHTTPWebMgmtPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 18, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(80, 80), ValueRangeConstraint(1025, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPWebMgmtPortNum.setStatus('current')
if mibBuilder.loadTexts: agentHTTPWebMgmtPortNum.setDescription("Get/Set the TCP port number that the HTTP server listens to for incoming requests. The port number is an integer value from 1025 to 65535. Before setting this object, check your system (e.g. using 'netstat') to make sure the desired port number is not currently being used by any other service. The default value for this object is 80. Note that existing HTTP login sessions are closed whenever this object value is changed. All new HTTP sessions must be established using the new port number.")
agentAutoInstallConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19))
agentAutoinstallMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallMode.setDescription('Enable/Disable Autoinstall on device.')
agentAutoinstallAutosaveMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setDescription('Enable/Disable Auto Save of downloaded configuration on device.')
agentAutoinstallUnicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setDescription('Sets number of unicast TFTP attempts for configuration file.')
agentAutoinstallStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAutoinstallStatus.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallStatus.setDescription('Display current Autoinstall status on device.')
agentAutoinstallAutoRebootMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setDescription('Enable/Disable Auto Reboot after succesfull image update on device.')
agentAutoinstallOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setDescription('Enable/Disable Autoinstall operational mode on device.')
agentCmdsAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23))
agentCmdsAuthorizationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListCreate.setDescription("Command Authorization List Create. If set to a non empty string, creates a new Command Authorization List for configuration. List name must contain Alphanumeric characters including '-', '_', ' '.")
agentCmdsAuthorizationListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2), )
if mibBuilder.loadTexts: agentCmdsAuthorizationListTable.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListTable.setDescription('Command Authorization Method List table.')
agentCmdsAuthorizationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentCmdsAuthorizationListIndex"))
if mibBuilder.loadTexts: agentCmdsAuthorizationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListEntry.setDescription('Command Authorization Method List Entry.')
agentCmdsAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAuthorizationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListIndex.setDescription('Command Authorization List Index Unique number used for indexing into this table.')
agentCmdsAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAuthorizationListName.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListName.setDescription(' Command Authorization List Name Unique name used to identify the Command Authorization List from other tables.')
agentCmdsAuthorizationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListStatus.setDescription('The status of the CmdsAuthorization List. Supported values: active(1) - indicates a valid CmdsAuthorization List destroy(6) - removes the CmdsAuthorization List.')
agentCmdsAuthorizationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod1.setDescription('Command Authorization List Method1 Configures the Command Authorization method to use when this list is specified.')
agentCmdsAuthorizationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod2.setDescription('Command Authorization List Method2 Configures the Command Authorization method to use when this list is specified.')
agentCmdsAuthorizationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAuthorizationListMethod3.setDescription('Command Authorization List Method2 Configures the Command Authorization method to use when this list is specified.')
agentExecAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24))
agentExecAuthorizationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 20), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListCreate.setDescription("Exec Authorization List Create. If set to a non empty string, creates a new Exec Authorization List for configuration. List name must contain Alphanumeric characters including '-', '_', ' '.")
agentExecAuthorizationListTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2), )
if mibBuilder.loadTexts: agentExecAuthorizationListTable.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListTable.setDescription('Exec Authorization Method List table.')
agentExecAuthorizationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentExecAuthorizationListIndex"))
if mibBuilder.loadTexts: agentExecAuthorizationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListEntry.setDescription('Exec Authorization Method List Entry.')
agentExecAuthorizationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAuthorizationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListIndex.setDescription('Exec Authorization List Index Unique number used for indexing into this table.')
agentExecAuthorizationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAuthorizationListName.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListName.setDescription(' Exec Authorization List Name Unique name used to identify the Exec Authorization List from other tables.')
agentExecAuthorizationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListStatus.setDescription('The status of the ExecAuthorization List. Supported values: active(1) - indicates a valid ExecAuthorization List destroy(6) - removes the ExecAuthorization List.')
agentExecAuthorizationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod1.setDescription('Exec Authorization List Method1 Configures the Exec Authorization method to use when this list is specified.')
agentExecAuthorizationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod2.setDescription('Exec Authorization List Method2 Configures the Exec Authorization method to use when this list is specified.')
agentExecAuthorizationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod3.setDescription('Exec Authorization List Method3 Configures the Exec Authorization method to use when this list is specified.')
agentExecAuthorizationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 24, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAuthorizationListMethod4.setStatus('current')
if mibBuilder.loadTexts: agentExecAuthorizationListMethod4.setDescription('Exec Authorization List Method4 Configures the Exec Authorization method to use when this list is specified.')
agentSwitchMbufConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25))
agentSwitchMbufRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufRisingThreshold.setDescription('The Mbuf utilization rising threshold in percentage. A single notification (rising event) is generated when the total Mbuf utilization exceeds this threshold. After a rising event is generated, another such event will not be generated until the total Mbuf utilization falls below the agentSwitchMbufFallingThreshold and then exceeds the agentSwitchMbufRisingThreshold.')
agentSwitchMbufFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufFallingThreshold.setDescription('The Mbuf utilization falling threshold in percentage. A single notification (falling event) is generated when the total Mbuf utilization falls below this threshold. After a falling event is generated, another such event will not be generated until the total Mbuf utilization exceeds the agentSwitchMbufRisingThreshold and then falls below the agentSwitchMbufFallingThreshold.')
agentSwitchMbufNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 25, 3), AgentLogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMbufNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufNotificationSeverity.setDescription('Severity level while notification is generated for rising and falling threshold.')
agentDigitalSignatureConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 26))
agentDigitalSignatureVerifyMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noverify", 0), ("image", 1), ("config", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDigitalSignatureVerifyMode.setStatus('current')
if mibBuilder.loadTexts: agentDigitalSignatureVerifyMode.setDescription('To configure the digital signature verify option for the downloading image and config files. The selected option is stored in config data. The following options are supported: noverify - no digital signature verification of image or config script file image - digital signature verification of image only config - digital signature verification of config script only all - digital signature verification of image and config script file')
agentDynamicAuthorizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28))
agentDynamicAuthorizationMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationMode.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationMode.setDescription('Configures the Dynamic Authorization mode which must be enabled to support CoA functionality.')
agentDynamicAuthorizationServerKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationServerKey.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationServerKey.setDescription('Configures a global shared secret that is used for all dynamic authorization clients that do not have an individual shared secret key configured. If agentDynamicAuthorizationEncryptServerKey is set to true, then the length of this string has to be exactly 256 else it can be 1-128.')
agentDynamicAuthorizationEncryptServerKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationEncryptServerKey.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationEncryptServerKey.setDescription('Specifies whether the global shared secret configured is to be encrypted or not. Set this in conjnction with agentDynamicAuthorizationServerKey.')
agentDynamicAuthorizationPortNum = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(3799)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationPortNum.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationPortNum.setDescription('Configures UDP port on which a device listens for RADIUS requests from configured RADIUS clients. The default port number is 3799. The supported range for the port-number is 1025 to 65535.')
agentDynamicAuthorizationType = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("all", 2), ("session-key", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationType.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationType.setDescription('Configures the type of authorization that the device must use for RADIUS clients. The client must match the configured attributes for authorization.')
agentDynamicAuthorizationIgnoreSessionKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationIgnoreSessionKey.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationIgnoreSessionKey.setDescription('Specifies whether the session-key is to be ignored or not.')
agentDynamicAuthorizationIgnoreServerKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationIgnoreServerKey.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationIgnoreServerKey.setDescription('Specifies whether the server-key is to be ignored or not.')
agentDynamicAuthorizationClientTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 8), )
if mibBuilder.loadTexts: agentDynamicAuthorizationClientTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationClientTable.setDescription('A table of the Dynamic Authorization Client entries')
agentDynamicAuthorizationClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 8, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDynamicAuthorizationClientAddress"))
if mibBuilder.loadTexts: agentDynamicAuthorizationClientEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationClientEntry.setDescription('Represents entry for a set of Dynamic Authorization Clients')
agentDynamicAuthorizationClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 8, 1, 1), DisplayString())
if mibBuilder.loadTexts: agentDynamicAuthorizationClientAddress.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationClientAddress.setDescription('Configures a Dynamic Authorization Client IP Address or Hostname.')
agentDynamicAuthorizationClientServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 8, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDynamicAuthorizationClientServerKey.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationClientServerKey.setDescription('Configures a Dynamic Authorization Client Server Key. If agentDynamicAuthorizationClientEncryptServerKey is set to true, then the length of this string has to be exactly 256 else it can be 1-128.')
agentDynamicAuthorizationClientEncryptServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDynamicAuthorizationClientEncryptServerKey.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationClientEncryptServerKey.setDescription('Specifies whether the client server-key configured is to be encrypted or not.Set this in conjunction with agentDynamicAuthorizationClientServerKey.')
agentDynamicAuthorizationClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDynamicAuthorizationClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationClientRowStatus.setDescription('The status of this conceptual row. active(1) - this client is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicAuthorizationStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 28, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDynamicAuthorizationStatsClear.setStatus('current')
if mibBuilder.loadTexts: agentDynamicAuthorizationStatsClear.setDescription('When set to enable(1), all dynamic authorization statistics will be reset.')
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3))
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfig.setDescription('enable(1) will initiate an configuration save to nvram. Status is returned by the object agentSaveConfigStatus.')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
if mibBuilder.loadTexts: agentClearConfig.setDescription('clear config to factory defaults')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
if mibBuilder.loadTexts: agentClearLags.setDescription('clear lag configuration')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
if mibBuilder.loadTexts: agentClearLoginSessions.setDescription('close all telnet sessions')
agentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPasswords.setStatus('current')
if mibBuilder.loadTexts: agentClearPasswords.setDescription('reset passwords')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
if mibBuilder.loadTexts: agentClearPortStats.setDescription('clear all port statistics')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
if mibBuilder.loadTexts: agentClearSwitchStats.setDescription('clear all switch statistics')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
if mibBuilder.loadTexts: agentClearTrapLog.setDescription('clear trap log')
agentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearVlan.setStatus('current')
if mibBuilder.loadTexts: agentClearVlan.setDescription('clear vlan entries')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
if mibBuilder.loadTexts: agentResetSystem.setDescription('Resets the switch. This object is not valid for stacking platforms.')
agentSaveConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInitiated", 1), ("savingInProcess", 2), ("savingComplete", 3), ("savingFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSaveConfigStatus.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfigStatus.setDescription('Indicates the current status of an save configuration request.')
agentStartupConfigErase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStartupConfigErase.setStatus('current')
if mibBuilder.loadTexts: agentStartupConfigErase.setDescription('Erase the text-based configuration named startup-config stored in non-volatile memory.On read returns 0.')
agentFactoryDefaultsErase = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFactoryDefaultsErase.setStatus('current')
if mibBuilder.loadTexts: agentFactoryDefaultsErase.setDescription('Erase the text-based configuration file named factory-defaults stored in non-volatile memory.On read returns 0.')
agentReloadConfig = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReloadConfig.setStatus('current')
if mibBuilder.loadTexts: agentReloadConfig.setDescription('Reloads the text-based configuration file named startup-config stored in non-volatile memory.On read returns 0.')
agentCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4))
agentCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterStatus.setDescription('Status of the Virtual Cable Tester active(1) - cable testing is in progress. Set to this value to start the test. success(2) - A successful test was performed. Cannot be set. failure(3) - A failure was encountered during the test. Cannot be set. uninitialized(4) - No test has been performed yet. Cannot be set.')
agentCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterIfIndex.setDescription('Determines on which port to perform the cable test. Limited to copper based ports.')
agentCableTesterCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableStatus.setDescription('Indicates the results of the Cable Test. normal(1) - The cable is working correctly. open(2) - The cable is disconnected or there is a faulty connector. short(3) - There is an electrical short in the cable. unknown(4) - No test has been performed yet, or a test is currently in progress.')
agentCableTesterMinimumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setDescription('The estimated length of the cable in meters. This value indicates the shortest length estimated. This object will return 0 if agentCableTesterStatus is not success(2) or the cable length is unknown.')
agentCableTesterMaximumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setDescription('The estimated length of the cable in meters. This value indicates the longest length estimated. This object will return 0 if agentCableTesterStatus is not success(2) or the cable length is unknown.')
agentCableTesterCableFailureLocation = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setDescription('The estimated distance in meters from the end of the cable to the failure location. This object will return 0 if agentCableTesterStatus is not success(2).')
agentDhcpSnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23))
agentDhcpSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setDescription("This object indicates whether DHCP Snooping is enabled globally. If this object is set to 'true',admin mode is enabled globally. If this object is set to 'false',admin mode is disabled globally.")
agentDhcpSnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setDescription("This object indicates whether source Mac address in the received DHCP Message needs to be verified or not. If this object is set to 'true',verifyMac is enabled globally. If this object is set to 'false',verifyMac is disabled globally.")
agentDhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3), )
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setDescription('A table provides the mechanism to control DHCP SNOOPING per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDhcpSnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP SNOOPING at each existing VLAN.')
agentDhcpSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setDescription('This object indicates the VLAN number on which DHCP SNOOPING Inspection feature is configured.')
agentDhcpSnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setDescription("This object indicates whether DHCP SNOOPING is enabled in this VLAN. If this object is set to 'true', DHCP SNOOPING is enabled. If this object is set to 'false', DHCP SNOOPING is disabled.")
agentDhcpSnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4), )
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for DHCP snooping purpose at each physical interface capable of this feature.')
agentDhcpSnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setDescription('A row instance contains the configuration for DHCP snooping at each physical interface capable of this feature.')
agentDhcpSnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setDescription('This object indicates whether the interface is trusted for DHCP snooping purpose.')
agentDhcpSnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setDescription('This object indicates whether the Logging needs on DHCP snooping validations or not')
agentDhcpSnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setDescription('This object indicates rate limit value for DHCP Snooping purpose. If the incoming rate of DHCP packets exceeds the value of this object for consecutively burst interval seconds, DHCP packets will be dropped. Value of -1 indicates that there is no rate limit.')
agentDhcpSnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setDescription('This object indicates the burst interval value for rate limiting purpose on this interface. Value of -1 indicates that there is no burst interval.')
agentIpsgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5), )
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setDescription('A table provides the mechanism to configure the IPSG at each physical interface capable of this feature.')
agentIpsgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setDescription('A row instance contains the configuration for IPSG at each physical interface capable of this feature.')
agentIpsgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setDescription('This object indicates whether IP packets received on this interface are filtered based on whether IP Source Guard considers the source IP address to be a valid client address. Setting this variable to false automatically sets agentIpsgIfPortSecurity to false.')
agentIpsgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setDescription('This object indicates whether IP packets received on this interface are filtered based on whether IP Source Guard considers the source MAC address to be a valid client address. The port security option cannot be enabled unless agentIpsgIfVerifySource is also enabled. That is, MAC address filtering cannot be done without also doing IP address filtering. But IP address filtering can be done without MAC address filtering. Once the port security option is enabled, it can only be disabled by disabling agentIpsgIfVerifySource.')
agentDhcpSnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setDescription('Clear the DHCP snooping statistics on all ports. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDhcpSnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7), )
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setDescription('A table provides the mechanism for statics of DHCP snooping.')
agentDhcpSnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setDescription('A row instance contains the DHCP snooping statistics per VLAN.')
agentDhcpSnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setDescription('This object indicates the number of failure verifications of client mac address with source mac address')
agentDhcpSnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setDescription('This object indicates the number of invalid DHCP release, request and decline messages')
agentDhcpSnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setDescription('This object indicates the number of invalid DHCP server mesaages')
agentStaticIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8), )
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setDescription('A table of the IPSG static entries')
agentStaticIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStaticIpsgBindingIfIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentStaticIpsgBindingVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentStaticIpsgBindingIpAddr"), (0, "FASTPATH-SWITCHING-MIB", "agentStaticIpsgBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticIpsgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingEntry.setDescription('Represents a binding in IPSG table')
agentStaticIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setDescription('Interface on which this IPSG binding is going to be added.')
agentStaticIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setDescription(' VLAN to whcig this IPSG binding is going to be added.')
agentStaticIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setDescription('IP address match value for the IPSG Binding.')
agentStaticIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setDescription('MAC address match value for the IPSG Binding.')
agentStaticIpsgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setDescription('The status of this conceptual row. active(1) - this IPSG Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9), )
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setDescription('A table of the IPSG dynamic entries')
agentDynamicIpsgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpsgBindingIfIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpsgBindingVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpsgBindingIpAddr"), (0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpsgBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicIpsgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingEntry.setDescription('Represents a binding in IPSG table')
agentDynamicIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setDescription('Interface on which this IPSG binding is added.')
agentDynamicIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setDescription(' VLAN to which this IPSG binding is going to be added.')
agentDynamicIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setDescription('Sender IP address match value for the IPSG Binding.')
agentDynamicIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setDescription('MAC address match value for the IPSG Binding.')
agentStaticDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10), )
if mibBuilder.loadTexts: agentStaticDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingTable.setDescription('A table of the DHCP SNOOPING static entries')
agentStaticDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStaticDsBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingEntry.setDescription('Represents a binding in DHCP SNOOPING table')
agentStaticDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
agentStaticDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setDescription('VLAN to which this DHCP SNOOPING binding is going to be added.')
agentStaticDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
agentStaticDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
agentStaticDsBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setDescription('The status of this conceptual row. active(1) - this DHCP SNOOPING Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11), )
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setDescription('A table of the DHCP SNOOPING Dynamic entries')
agentDynamicDsBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDynamicDsBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingEntry.setDescription('Represents a binding in DHCP SNOOPING table')
agentDynamicDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
agentDynamicDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setDescription(' VLAN to whcig this DHCP SNOOPING binding is going to be added.')
agentDynamicDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
agentDynamicDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
agentDynamicDsBindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setDescription('This specifies the period for which the DHCP SNOOPING Binding is valid.')
agentDhcpSnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setDescription('This object indicates the file name on the remote machine to save the DHCP Snooping bindings. This will be set only when we have a valid remote IP.')
agentDhcpSnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setDescription('This object indicates the IP address of the remote machine to save the DHCP Snooping bindings. This will be set only when we have a valid file name.')
agentDhcpSnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 23, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setDescription('This object indicates the perodic time interval to save the DHCP Snooping bindings.')
agentDhcpL2RelayConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24))
agentDhcpL2RelayAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setDescription("This object indicates whether DHCP L2 Relay is enabled globally. If this object is set to 'true',admin mode is enabled globally. If this object is set to 'false',admin mode is disabled globally.")
agentDhcpL2RelayIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2), )
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setDescription('A table provides the mechanism to enable/disable and configure the trust state for DHCP L2Relay purpose at each physical interface capable of this feature.')
agentDhcpL2RelayIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setDescription('A row instance contains the configuration for DHCP L2 Relay at each physical interface capable of this feature.')
agentDhcpL2RelayIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setDescription('This object indicates whether the DHCP L2Relay is enabled or not')
agentDhcpL2RelayIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setDescription('This object indicates whether the interface is trusted for DHCP L2 Relay purpose.')
agentDhcpL2RelayVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3), )
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setDescription('A table provides the mechanism to control DHCP L2 Relay per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDhcpL2RelayVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDhcpL2RelayVlanIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP L2 Relay at each existing VLAN.')
agentDhcpL2RelayVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setDescription('This object indicates the VLAN number on which DHCP L2 Relay feature is configured.')
agentDhcpL2RelayVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setDescription("This object indicates whether DHCP L2 Relay is enabled in this VLAN. If this object is set to 'true', DHCP L2 Relay is enabled. If this object is set to 'false', DHCP L2 Relay is disabled.")
agentDhcpL2RelayCircuitIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setDescription("This object indicates whether DHCP CircuitId is enabled for L2 relaying in this VLAN. If this object is set to 'true', DHCP CircuitId is enabled. If this object is set to 'false', DHCP CircuitId is disabled.")
agentDhcpL2RelayRemoteIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setDescription('When this object is set with a non-empty string, DHCP RemoteId is enabled for L2 relaying in this VLAN.')
agentDhcpL2RelayStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setDescription('Clear the DHCP L2Relay statistics on all ports. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDhcpL2RelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7), )
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setDescription('A table provides the mechanism for statics of DHCP L2 Relay.')
agentDhcpL2RelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setDescription('A row instance contains the DHCP L2Relay statistics per interface.')
agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setDescription('This object indicates the number of DHCP server messages received with Option-82 field on the untrusted interface.')
agentDhcpL2RelayUntrustedClntMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setDescription('This object indicates the number of DHCP client messages received with Option-82 field on the untrusted interface.')
agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setDescription('This object indicates the number of DHCP server messages received without Option-82 field on the trusted interface.')
agentDhcpL2RelayTrustedClntMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 24, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setDescription('This object indicates the number of DHCP client messages received without Option-82 field on the trusted interface.')
agentSwitchVoiceVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25))
agentSwitchVoiceVLANAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVoiceVLANAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVLANAdminMode.setDescription('This enables or disables Voice VLAN on the system.')
agentSwitchVoiceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2), )
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setDescription('A table of the Voice Vlan device entries.')
agentSwitchVoiceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentSwitchVoiceVlanInterfaceNum"), (0, "FASTPATH-SWITCHING-MIB", "agentSwitchVoiceVlanDeviceMacAddress"))
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setDescription('Represents entry for a Voice Device on the interface.')
agentSwitchVoiceVlanInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setDescription('The interface number of this interface.')
agentSwitchVoiceVlanDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 25, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setDescription('The Voice Device Mac address')
agentSwitchAddressConflictGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26))
agentSwitchAddressConflictDetectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setDescription("Displays if an address conflict was detected on the switch since the last reset of the status or the last conflict detection run. Set to 'true' if detected, 'false' otherwise.")
agentSwitchAddressConflictDetectionStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setDescription('Clear the last address conflict detection status in the switch. A value of reset(1) is used to reset the status. A read on this object always returns the value none (0). The value none (0) cannot be forcibly set by the administrator.')
agentSwitchLastConflictingIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setDescription('The reported conflicting IP address on the switch since the last reset of the conflict detection status or the last conflict detection run.')
agentSwitchLastConflictingMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setDescription('The MAC address of the host corresponding to the reported conflicting IP address on the switch since the last reset of the conflict detection status or the last conflict detection run.')
agentSwitchLastConflictReportedTime = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setDescription("Time since the last address conflict was detected. It is displayed in days, hours, minutes and seconds. It is set to a valid value only when the conflict detection status is 'true'.")
agentSwitchConflictIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setDescription("The IP address on the switch reported to have a conflict with another host's IP address.")
agentSwitchConflictMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setDescription('The MAC address of the host that has an IP address conflicting with the IP address on the switch.')
agentSwitchAddressConflictDetectionRun = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 26, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("run", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setDescription('Trigger the action to run the active address conflict detection. A value of run(1) is used to issue the action command. A read on this object always returns the value none(0). The value none (0) cannot be forcibly set by the administrator.')
fastPathSwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
if mibBuilder.loadTexts: multipleUsersTrap.setDescription('This trap is sent when more than one user is logged in with administrative access. Only applies to CLI interface.')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormStartTrap.setDescription('This trap is sent when a broadcast storm is detected.')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormEndTrap.setDescription('This trap is sent when a broadcast storm is no longer detected.')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: linkFailureTrap.setDescription('')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRequestFailureTrap.setDescription('')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDeleteLastTrap.setDescription('Trap is sent when attempting to delete the last configured VLAN or the Default VLAN.')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setDescription('Trap is sent if there are failures in resetting VLAN configuration to defaults.')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setDescription('')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: fanFailureTrap.setDescription('')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 10)).setObjects(("FASTPATH-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setDescription('Trap is sent when this machine is a new STP Root when there is more than one STP instance.')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 11)).setObjects(("FASTPATH-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setDescription('Trap is sent when there is a STP topology change when there is more than one STP instance.')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setDescription('')
failedUserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 13))
if mibBuilder.loadTexts: failedUserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: failedUserLoginTrap.setDescription('Trap is sent when a user fails to authenticate via the CLI or Web interfaces.')
userLockoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 14))
if mibBuilder.loadTexts: userLockoutTrap.setStatus('current')
if mibBuilder.loadTexts: userLockoutTrap.setDescription('Trap is sent when a user account is locked due to consecutive failed login attempts via the CLI or Web interfaces beyond the allowed limit.')
daiIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 15)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DAI when the incoming packet rate exceeded configured rate limit during a burst-interval.')
stpInstanceLoopInconsistentStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 16)).setObjects(("FASTPATH-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setDescription('Trap is sent when this port in this STP instance enters loop inconsistent state upon failure to receive a BPDU.')
stpInstanceLoopInconsistentEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 17)).setObjects(("FASTPATH-SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setDescription('Trap is sent when this port in this STP instance exits loop inconsistent state upon reception of a BPDU.')
dhcpSnoopingIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 18)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DHCP Snooping when the incoming packet rate exceeded configured rate limit during a burst-interval.')
noStartupConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 19))
if mibBuilder.loadTexts: noStartupConfigTrap.setStatus('current')
if mibBuilder.loadTexts: noStartupConfigTrap.setDescription('Trap is sent when startup-config file exists and SSH is enabled.')
agentSwitchIpAddressConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 20)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchConflictIPAddr"), ("FASTPATH-SWITCHING-MIB", "agentSwitchConflictMacAddr"))
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setDescription('IP address conflict trap signifies the reception of an ARP from another host in the LAN that has conflicting IP address.')
agentSwitchCpuRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 21)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchCpuProcessRisingThreshold"), ("FASTPATH-SWITCHING-MIB", "agentSwitchCpuProcessName"))
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setDescription('Trap is sent when the total CPU utilization exceeds CPU Rising utilization threshold over the configured Rising threshold interval.')
agentSwitchCpuFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 22)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchCpuProcessFallingThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setDescription('Trap is sent when the total CPU utilization falls below CPU Falling utilization threshold over the configured falling threshold interval.')
agentSwitchCpuFreeMemBelowThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 23)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setDescription('Trap is sent when CPU Free Memory falls below the configured threshold.')
agentSwitchCpuFreeMemAboveThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 24)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setDescription('Trap is sent when CPU Free Memory rises to 10% above the configured threshold.')
agentSwitchMbufRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 27)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchMbufRisingThreshold"), ("FASTPATH-SWITCHING-MIB", "agentSwitchMbufsTotal"), ("FASTPATH-SWITCHING-MIB", "agentSwitchMbufsUsed"), ("FASTPATH-SWITCHING-MIB", "agentSwitchMbufsFree"))
if mibBuilder.loadTexts: agentSwitchMbufRisingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufRisingThresholdTrap.setDescription('Trap is sent when the Mbuf utilization exceeds Rising utilization threshold.')
agentSwitchMbufFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 28)).setObjects(("FASTPATH-SWITCHING-MIB", "agentSwitchMbufFallingThreshold"), ("FASTPATH-SWITCHING-MIB", "agentSwitchMbufsTotal"), ("FASTPATH-SWITCHING-MIB", "agentSwitchMbufsUsed"), ("FASTPATH-SWITCHING-MIB", "agentSwitchMbufsFree"))
if mibBuilder.loadTexts: agentSwitchMbufFallingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMbufFallingThresholdTrap.setDescription('Trap is sent when the Mbuf utilization falls below Falling utilization threshold.')
loginSessionStartStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 29)).setObjects(("FASTPATH-SWITCHING-MIB", "agentLoginSessionIndex"), ("FASTPATH-SWITCHING-MIB", "agentLoginSessionUserName"), ("FASTPATH-SWITCHING-MIB", "agentLoginSessionConnectionType"), ("FASTPATH-SWITCHING-MIB", "agentLoginSessionInetAddress"), ("FASTPATH-SWITCHING-MIB", "agentLoginSessionStatus"))
if mibBuilder.loadTexts: loginSessionStartStopTrap.setStatus('current')
if mibBuilder.loadTexts: loginSessionStartStopTrap.setDescription('Trap is sent when a CLI session starts or ends.')
agentSwitchStormControlTrap = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 0, 31)).setObjects(("IF-MIB", "ifIndex"), ("FASTPATH-SWITCHING-MIB", "agentSwitchStormControlType"), ("FASTPATH-SWITCHING-MIB", "agentSwitchStormControlAction"))
if mibBuilder.loadTexts: agentSwitchStormControlTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlTrap.setDescription('Trap is sent when storm control rate limit is reached.')
agentSwitchCutThroughGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29))
agentSwitchCutThroughConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCutThroughConfigMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCutThroughConfigMode.setDescription('Mode changes are effective from the next reload of the Switch. The cut-through feature may not be present on all switches. Use - agentSwitchCutThroughRunningModeStatus - MIB to check if the feature is present on your switch.')
agentSwitchCutThroughRunningModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCutThroughRunningModeStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCutThroughRunningModeStatus.setDescription('This gives the current running mode of the cut-through feature on switch. Note that Mode changes are effective from the next reload of the Switch. so running mode may be different than the configured mode. A value of not-supported(3) means that the feature is not present on the switch.')
agentSwitchCutThroughConfiguredModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 29, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCutThroughConfiguredModeStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCutThroughConfiguredModeStatus.setDescription('This gives the configured mode of cut-through feature on switch. Note that Mode changes are effective from the next reload of the Switch. so running mode may be different than the configured mode. A value of not-supported(3) means that the feature is not present on the switch.')
agentPortTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30))
agentPortType40GigBaseX = ObjectIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30, 1))
if mibBuilder.loadTexts: agentPortType40GigBaseX.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortType40GigBaseX.setDescription('X PCS/PMA, unknown PMD. MAU MIB augmentation')
if mibBuilder.loadTexts: agentPortType40GigBaseX.setReference('')
agentPortType20GigBaseX = ObjectIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30, 2))
if mibBuilder.loadTexts: agentPortType20GigBaseX.setStatus('current')
if mibBuilder.loadTexts: agentPortType20GigBaseX.setDescription('X PCS/PMA, unknown PMD. MAU MIB augmentation')
if mibBuilder.loadTexts: agentPortType20GigBaseX.setReference('')
agentPortType25GigBaseX = ObjectIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30, 3))
if mibBuilder.loadTexts: agentPortType25GigBaseX.setStatus('current')
if mibBuilder.loadTexts: agentPortType25GigBaseX.setDescription('X PCS/PMA, unknown PMD. MAU MIB augmentation')
if mibBuilder.loadTexts: agentPortType25GigBaseX.setReference('')
agentPortType2pt5GigBaseX = ObjectIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 30, 4))
if mibBuilder.loadTexts: agentPortType2pt5GigBaseX.setStatus('current')
if mibBuilder.loadTexts: agentPortType2pt5GigBaseX.setDescription('X PCS/PMA, unknown PMD. MAU MIB augmentation')
if mibBuilder.loadTexts: agentPortType2pt5GigBaseX.setReference('')
agentPrivateVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31))
agentPrivateVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1), )
if mibBuilder.loadTexts: agentPrivateVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanTable.setDescription('')
agentPrivateVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentPrivateVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanEntry.setDescription('')
agentPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("isolated", 2), ("community", 3), ("unconfigured", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanType.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanType.setDescription('Enables vlan for Private Vlan and configures private vlan type.')
agentPrivateVlanAssociate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 1, 1, 2), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanAssociate.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanAssociate.setDescription('This field lists all the VlanIDs which are associated with the selected vlan. If the selected vlan type is not primary(1), a zero-length bitmask is returned.')
agentPrivateVlanIntfAssocTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2), )
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocTable.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocTable.setDescription('')
agentPrivateVlanIntfAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocEntry.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocEntry.setDescription('')
agentPrivateVlanIntfAssocHostPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostPrimary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostPrimary.setDescription('Configures the primary host vlan association with the interface. This must be configured along with agentPrivateVlanIntfAssocHostSecondary before the association will be operational. NOTE: Both agentPrivateVlanIntfAssocHostPrimary and agentPrivateVlanIntfAssocHostSecondary objects must be specified at the same time.')
agentPrivateVlanIntfAssocHostSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostSecondary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocHostSecondary.setDescription('Configures the secondary host vlan association with the interface. This must be configured along with agentPrivateVlanIntfAssocHostPrimary before the association will be operational. NOTE: Both agentPrivateVlanIntfAssocHostPrimary and agentPrivateVlanIntfAssocHostSecondary objects must be specified at the same time.')
agentPrivateVlanIntfAssocPromiscuousPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousPrimary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousPrimary.setDescription('Configures the primary promiscuous vlan association with the interface. This must be configured along with agentPrivateVlanIntfAssocPromiscuousSecondary before the association will be operational.')
agentPrivateVlanIntfAssocPromiscuousSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 4), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousSecondary.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocPromiscuousSecondary.setDescription('Configures the secondary promiscuous vlan association with the interface. This must be configured along with agentPrivateVlanIntfAssocPromiscuousPrimary before the association will be operational.')
agentPrivateVlanIntfAssocOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 31, 2, 1, 5), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocOperational.setStatus('current')
if mibBuilder.loadTexts: agentPrivateVlanIntfAssocOperational.setDescription('Shows the operational private vlans associated with the interface.')
agentDhcpv6SnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33))
agentDhcpv6SnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingAdminMode.setDescription("This object indicates whether DHCPv6 SNOOPING is enabled globally. If this object is set to 'true',admin mode is enabled globally. If this object is set to 'false',admin mode is disabled globally.")
agentDhcpv6SnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingVerifyMac.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVerifyMac.setDescription("This object indicates whether source Mac address in the received dhcpv6 Message needs to be verified or not. If this object is set to 'true',verifyMac is enabled globally. If this object is set to 'false',verifyMac is disabled globally.")
agentDhcpv6SnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigTable.setDescription('A table provides the mechanism to control DHCPv6 SNOOPING per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDhcpv6SnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDhcpv6SnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanConfigEntry.setDescription('A row instance contains the configuration for dhcpv6 SNOOPING at each existing VLAN.')
agentDhcpv6SnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanIndex.setDescription('This object indicates the VLAN number on which DHCPv6 SNOOPING Inspection feature is configured.')
agentDhcpv6SnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingVlanEnable.setDescription("This object indicates whether DHCPv6 SNOOPING is enabled in this VLAN. If this object is set to 'true', DHCPv6 SNOOPING is enabled. If this object is set to 'false', DHCPv6 SNOOPING is disabled.")
agentDhcpv6SnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for DHCPv6 SNOOPING purpose at each physical interface capable of this feature.')
agentDhcpv6SnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfConfigEntry.setDescription('A row instance contains the configuration for DHCPv6 SNOOPING at each physical interface capable of this feature.')
agentDhcpv6SnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfTrustEnable.setDescription('This object indicates whether the interface is trusted for DHCPv6 SNOOPING purpose.')
agentDhcpv6SnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfLogEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfLogEnable.setDescription('This object indicates whether the Logging needs on DHCPv6 SNOOPING validations or not')
agentDhcpv6SnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfRateLimit.setDescription('This object indicates rate limit value for dhcpv6 Snooping purpose. If the incoming rate of dhcpv6 packets exceeds the value of this object for consecutively burst interval seconds, dhcpv6 packets will be dropped. Value of -1 indicates that there is no rate limit.')
agentDhcpv6SnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingIfBurstInterval.setDescription('This object indicates the burst interval value for rate limiting purpose on this interface. Value of -1 indicates that there is no burst interval.')
agentIpv6sgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5), )
if mibBuilder.loadTexts: agentIpv6sgIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfConfigTable.setDescription('A table provides the mechanism to configure the IPSG at each physical interface capable of this feature.')
agentIpv6sgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpv6sgIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfConfigEntry.setDescription('A row instance contains the configuration for IPSG at each physical interface capable of this feature.')
agentIpv6sgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6sgIfVerifySource.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfVerifySource.setDescription('This object indicates whether the interface is enabled for IPv6SG to forward the data based up on source Ip address')
agentIpv6sgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpv6sgIfPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentIpv6sgIfPortSecurity.setDescription('This object indicates whether the interface is enabled for IPv6SG to forward the data based up on source mac address in fdb table')
agentDhcpv6SnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsReset.setDescription('Clear the DHCPv6 SNOOPING statistics on all ports. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDhcpv6SnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7), )
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsTable.setDescription('A table provides the mechanism for statics of DHCPv6 SNOOPING.')
agentDhcpv6SnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStatsEntry.setDescription('A row instance contains the DHCPv6 SNOOPING statistics per VLAN.')
agentDhcpv6SnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingMacVerifyFailures.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingMacVerifyFailures.setDescription('This object indicates the number of failure verifications of client mac address with source mac address')
agentDhcpv6SnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidClientMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidClientMessages.setDescription('This object indicates the number of invalid dhcpv6 release, request and decline messages')
agentDhcpv6SnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidServerMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingInvalidServerMessages.setDescription('This object indicates the number of invalid dhcpv6 server mesaages')
agentStaticIpv6sgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8), )
if mibBuilder.loadTexts: agentStaticIpv6sgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingTable.setDescription('A table of the IPv6SG static entries')
agentStaticIpv6sgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStaticIpv6sgBindingIfIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentStaticIpv6sgBindingVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentStaticIpv6sgBindingIpAddr"), (0, "FASTPATH-SWITCHING-MIB", "agentStaticIpv6sgBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticIpv6sgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingEntry.setDescription('Represents a binding in IPv6SG table')
agentStaticIpv6sgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIfIndex.setDescription('Interface on which this IPv6SG binding is going to be added.')
agentStaticIpv6sgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingVlanId.setDescription(' VLAN to which this IPv6SG binding is going to be added.')
agentStaticIpv6sgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingIpAddr.setDescription('IPv6 address match value for the IPv6SG binding.')
agentStaticIpv6sgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingMacAddr.setDescription('MAC address match value for the IPv6SG Binding.')
agentStaticIpv6sgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpv6sgBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpv6sgBindingRowStatus.setDescription('The status of this conceptual row. active(1) - this IPv6SG Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicIpv6sgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9), )
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingTable.setDescription('A table of the IPv6SG dynamic entries')
agentDynamicIpv6sgBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpv6sgBindingIfIndex"), (0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpv6sgBindingVlanId"), (0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpv6sgBindingIpAddr"), (0, "FASTPATH-SWITCHING-MIB", "agentDynamicIpv6sgBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingEntry.setDescription('Represents a binding in IPSG table')
agentDynamicIpv6sgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIfIndex.setDescription('Interface on which this IPv6SG binding is added.')
agentDynamicIpv6sgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingVlanId.setDescription(' VLAN to which this IPv6SG binding is going to be added.')
agentDynamicIpv6sgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingIpAddr.setDescription('Sender IPv6 address match value for the IPv6SG binding.')
agentDynamicIpv6sgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpv6sgBindingMacAddr.setDescription('MAC address match value for the IPv6SG Binding.')
agentStaticDsv6BindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10), )
if mibBuilder.loadTexts: agentStaticDsv6BindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingTable.setDescription('A table of the DHCPv6 SNOOPING static entries')
agentStaticDsv6BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentStaticDsv6BindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsv6BindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingEntry.setDescription('Represents a static binding in DHCPv6 SNOOPING table')
agentStaticDsv6BindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingIfIndex.setDescription('Interface on which this static DHCPv6 SNOOPING binding is going to be added.')
agentStaticDsv6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingVlanId.setDescription(' VLAN to which this static DHCPv6 SNOOPING binding is going to be added.')
agentStaticDsv6BindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingMacAddr.setDescription('MAC address match value for the static DHCPv6 SNOOPING Binding.')
agentStaticDsv6BindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingIpAddr.setDescription('IP address match value for the static DHCPv6 SNOOPING Binding.')
agentStaticDsv6BindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsv6BindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsv6BindingRowStatus.setDescription('The status of this conceptual row. active(1) - this static DHCPv6 SNOOPING Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicDsv6BindingTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11), )
if mibBuilder.loadTexts: agentDynamicDsv6BindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingTable.setDescription('A table of the DHCPv6 SNOOPING Dynamic entries')
agentDynamicDsv6BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentDynamicDsv6BindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsv6BindingEntry.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingEntry.setDescription('Represents a dynamic binding in DHCPv6 SNOOPING table')
agentDynamicDsv6BindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingIfIndex.setDescription('Interface on which this dynamic DHCPv6 SNOOPING binding is going to be added.')
agentDynamicDsv6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingVlanId.setDescription(' VLAN to which this dynamic DHCPv6 SNOOPING binding is going to be added.')
agentDynamicDsv6BindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingMacAddr.setDescription('MAC address match value for the dynamic DHCPv6 SNOOPING Binding.')
agentDynamicDsv6BindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingIpAddr.setDescription('IP address match value for the dynamic DHCPv6 SNOOPING Binding.')
agentDynamicDsv6BindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsv6BindingLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsv6BindingLeaseRemainingTime.setDescription('This specifies the period for which the dynamic DHCPv6 SNOOPING Binding is valid.')
agentDhcpv6SnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteFileName.setDescription('This object indicates the file name on the remote machine to save the DHCPv6 Snooping bindings. This will be set only when we have a valid remote IP.')
agentDhcpv6SnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingRemoteIpAddr.setDescription('This object indicates the IP address of the remote machine to save the DHCPv6 Snooping bindings. This will be set only when we have a valid file name.')
agentDhcpv6SnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 8, 33, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpv6SnoopingStoreInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpv6SnoopingStoreInterval.setDescription('This object indicates the perodic time interval to save the DHCPv6 Snooping bindings.')
agentLinkDependencyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27))
agentLinkDependencyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1), )
if mibBuilder.loadTexts: agentLinkDependencyGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupTable.setDescription('A table for link dependencies entries.')
agentLinkDependencyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1), ).setIndexNames((0, "FASTPATH-SWITCHING-MIB", "agentLinkDependencyGroupIndex"))
if mibBuilder.loadTexts: agentLinkDependencyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupEntry.setDescription('Link Dependency Group Entry.')
agentLinkDependencyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentLinkDependencyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupIndex.setDescription('Group identifier of the Link Dependency entry. All group entries exists on the switch and they are not configured. Groups are configured only when downstream ports are added to the group or upstream ports are added to the group. ')
agentLinkDependencyGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkDependencyGroupStatus.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupStatus.setDescription('The status of this entry. active(1) - the group has a valid configuration notReady(3) - the group has an incomplete configuration destroy(6) - remove the group destroy is the only RowStatus which can be set. The others are read-only.')
agentLinkDependencyGroupDownstreamPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 3), AgentPortMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLinkDependencyGroupDownstreamPortMask.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupDownstreamPortMask.setDescription('Downstream Port Mask. This mask defines the downstream ports of this group. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentLinkDependencyGroupUpstreamPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 4), AgentPortMask()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLinkDependencyGroupUpstreamPortMask.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupUpstreamPortMask.setDescription('Upstream Upon Port Mask. This mask defines the upstream ports upon which the downstream ports of this group depend. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentLinkDependencyGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkDependencyGroupAction.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupAction.setDescription('Group action refers to action taken by the downstream ports when the upstream ports go down. LINK-DOWN(0) downstream ports go down when upstream ports goes down, LINK-UP(1) downstream ports go up when upstream ports goes down.')
agentLinkDependencyGroupStatTransCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLinkDependencyGroupStatTransCounter.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupStatTransCounter.setDescription('This is a count of the number of times the group has change state as a result of the upstream interfaces go down/up.')
agentLinkDependencyGroupStatTransTimeLast = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 1, 2, 27, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLinkDependencyGroupStatTransTimeLast.setStatus('current')
if mibBuilder.loadTexts: agentLinkDependencyGroupStatTransTimeLast.setDescription('This is a last time of the group transition changes.')
mibBuilder.exportSymbols("FASTPATH-SWITCHING-MIB", agentExecAuthorizationListEntry=agentExecAuthorizationListEntry, agentIASUserIndex=agentIASUserIndex, agentLoginSessionIPAddress=agentLoginSessionIPAddress, agentStpCstPortEntry=agentStpCstPortEntry, agentPortMirrorRemoteSourceVlan=agentPortMirrorRemoteSourceVlan, Ipv6IfIndex=Ipv6IfIndex, agentSwitchConfigGroup=agentSwitchConfigGroup, agentSwitchAddressConflictGroup=agentSwitchAddressConflictGroup, agentDhcpv6SnoopingVlanIndex=agentDhcpv6SnoopingVlanIndex, agentSwitchSnoopingQuerierLastQuerierVersion=agentSwitchSnoopingQuerierLastQuerierVersion, agentDynamicIpsgBindingTable=agentDynamicIpsgBindingTable, agentInventoryPartNumber=agentInventoryPartNumber, agentPortMulticastControlAction=agentPortMulticastControlAction, agentPortMirrorIpAccessListNumber=agentPortMirrorIpAccessListNumber, Ipv6AddressPrefix=Ipv6AddressPrefix, agentNetworkIpv6ConfigProtocol=agentNetworkIpv6ConfigProtocol, agentStpMstDesignatedCost=agentStpMstDesignatedCost, agentTransferDownloadPassword=agentTransferDownloadPassword, agentSwitchVlanMacAssociationTable=agentSwitchVlanMacAssociationTable, agentSwitchMFDBProtocolType=agentSwitchMFDBProtocolType, agentTrapLogEntry=agentTrapLogEntry, agentSerialTimeout=agentSerialTimeout, agentSwitchCpuProcessEntry=agentSwitchCpuProcessEntry, agentSwitchMFDBSummaryTable=agentSwitchMFDBSummaryTable, agentSwitchCpuProcessGroup=agentSwitchCpuProcessGroup, agentLagSummaryStatus=agentLagSummaryStatus, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentNetworkDhcp6StatsReset=agentNetworkDhcp6StatsReset, agentSwitchportTrunkAllowedVlanList=agentSwitchportTrunkAllowedVlanList, agentSwitchportGeneralDynamicallyAddedVlanList=agentSwitchportGeneralDynamicallyAddedVlanList, agentClearVlan=agentClearVlan, agentSwitchIpAddressConflictTrap=agentSwitchIpAddressConflictTrap, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentNetworkConfigProtocolDhcpRenew=agentNetworkConfigProtocolDhcpRenew, agentPortStatsRateBitsPerSecondRx=agentPortStatsRateBitsPerSecondRx, agentPasswordManagementStrengthMaxRepeatedCharacters=agentPasswordManagementStrengthMaxRepeatedCharacters, agentTelnetMaxSessions=agentTelnetMaxSessions, agentNetworkDhcp6REBINDMessagesSent=agentNetworkDhcp6REBINDMessagesSent, agentSwitchMbufFallingThreshold=agentSwitchMbufFallingThreshold, agentCmdsAccountingListTable=agentCmdsAccountingListTable, vlanDeleteLastTrap=vlanDeleteLastTrap, agentUserAuthenticationConfigEntry=agentUserAuthenticationConfigEntry, agentDhcpL2RelayRemoteIdVlanEnable=agentDhcpL2RelayRemoteIdVlanEnable, agentTransferDownloadUsername=agentTransferDownloadUsername, agentSwitchCpuProcessTable=agentSwitchCpuProcessTable, agentSwitchMFDBDescription=agentSwitchMFDBDescription, agentSwitchSnoopingIntfTable=agentSwitchSnoopingIntfTable, agentHTTPHardTimeout=agentHTTPHardTimeout, agentDhcpL2RelayCircuitIdVlanEnable=agentDhcpL2RelayCircuitIdVlanEnable, agentClearLags=agentClearLags, agentStpPortUpTime=agentStpPortUpTime, agentStpCstRegionalRootPathCost=agentStpCstRegionalRootPathCost, agentStpMstRootPathCost=agentStpMstRootPathCost, agentSwitchportTrunkNativeVlanID=agentSwitchportTrunkNativeVlanID, agentLoginSessionInetAddress=agentLoginSessionInetAddress, agentSwitchMulticastStormControlAction=agentSwitchMulticastStormControlAction, agentSwitchSnoopingQuerierElectionParticipateMode=agentSwitchSnoopingQuerierElectionParticipateMode, agentStpPortMigrationCheck=agentStpPortMigrationCheck, agentSwitchVlanMacAssociationMacAddress=agentSwitchVlanMacAssociationMacAddress, agentActiveImageVersion=agentActiveImageVersion, agentCmdsAuthorizationListIndex=agentCmdsAuthorizationListIndex, agentDhcpSnoopingVlanIndex=agentDhcpSnoopingVlanIndex, agentPasswordManagementStrengthMinLowerCase=agentPasswordManagementStrengthMinLowerCase, agentPortMirrorRemoteVlanIndex=agentPortMirrorRemoteVlanIndex, agentImageConfigGroup=agentImageConfigGroup, agentServicePortIpv6Gateway=agentServicePortIpv6Gateway, agentStpCstExtPortPathCost=agentStpCstExtPortPathCost, agentExecAccountingListIndex=agentExecAccountingListIndex, agentExecAccountingListMethod2=agentExecAccountingListMethod2, agentHTTPJavaMode=agentHTTPJavaMode, agentDhcpL2RelayVlanIndex=agentDhcpL2RelayVlanIndex, agentSupportedMibName=agentSupportedMibName, agentTrapLogSystemTime=agentTrapLogSystemTime, agentNetworkIPAddress=agentNetworkIPAddress, agentAuthenticationListIndex=agentAuthenticationListIndex, agentIpv6sgIfConfigEntry=agentIpv6sgIfConfigEntry, agentSwitchSnoopSSMSrcListEntry=agentSwitchSnoopSSMSrcListEntry, agentSwitchStormControlAction=agentSwitchStormControlAction, agentPortVoiceVlanID=agentPortVoiceVlanID, agentCLIBannerMessage=agentCLIBannerMessage, agentPortMirrorDestinationPort=agentPortMirrorDestinationPort, agentPortUnicastControlMode=agentPortUnicastControlMode, agentPortAdminMode=agentPortAdminMode, agentSwitchCutThroughConfigMode=agentSwitchCutThroughConfigMode, agentUserAuthenticationList=agentUserAuthenticationList, agentStpCstDesignatedBridgeId=agentStpCstDesignatedBridgeId, agentSwitchportIntfIndex=agentSwitchportIntfIndex, agentSwitchProtectedPortGroupId=agentSwitchProtectedPortGroupId, agentClearPortStats=agentClearPortStats, agentDhcpv6SnoopingMacVerifyFailures=agentDhcpv6SnoopingMacVerifyFailures, agentStaticDsBindingRowStatus=agentStaticDsBindingRowStatus, agentStpMstEntry=agentStpMstEntry, agentDhcpSnoopingConfigGroup=agentDhcpSnoopingConfigGroup, agentDhcpv6SnoopingStatsEntry=agentDhcpv6SnoopingStatsEntry, agentStaticIpsgBindingRowStatus=agentStaticIpsgBindingRowStatus, agentInventoryHardwareVersion=agentInventoryHardwareVersion, agentSwitchMulticastControlMode=agentSwitchMulticastControlMode, agentStaticDsv6BindingRowStatus=agentStaticDsv6BindingRowStatus, agentDhcpv6SnoopingVlanConfigTable=agentDhcpv6SnoopingVlanConfigTable, agentSwitchStaticMacFilteringTable=agentSwitchStaticMacFilteringTable, agentPortUnicastControlThreshold=agentPortUnicastControlThreshold, agentStpCstMaxAge=agentStpCstMaxAge, agentLagSummaryMtuValue=agentLagSummaryMtuValue, agentPortStatsRateBitsPerSecondTx=agentPortStatsRateBitsPerSecondTx, agentTransferUploadStatus=agentTransferUploadStatus, agentPortMirroringGroup=agentPortMirroringGroup, agentStpCstBridgeFwdDelay=agentStpCstBridgeFwdDelay, agentDhcpSnoopingIfBurstInterval=agentDhcpSnoopingIfBurstInterval, agentDhcpSnoopingMacVerifyFailures=agentDhcpSnoopingMacVerifyFailures, agentNetworkIpv6AddressAutoConfig=agentNetworkIpv6AddressAutoConfig, agentNetworkDhcp6ADVERTISEMessagesReceived=agentNetworkDhcp6ADVERTISEMessagesReceived, agentSwitchCpuCosQDropTable=agentSwitchCpuCosQDropTable, agentSerialStopBits=agentSerialStopBits, agentSwitchMFDBGroup=agentSwitchMFDBGroup, agentClassOfServicePortEntry=agentClassOfServicePortEntry, agentStaticIpsgBindingIpAddr=agentStaticIpsgBindingIpAddr, agentDynamicDsBindingEntry=agentDynamicDsBindingEntry, agentTransferUploadServicePortSrcInterface=agentTransferUploadServicePortSrcInterface, agentSwitchMbufEntry=agentSwitchMbufEntry, agentServicePortDhcp6REPLYMessagesReceived=agentServicePortDhcp6REPLYMessagesReceived, agentPortType20GigBaseX=agentPortType20GigBaseX, agentUserConfigCreate=agentUserConfigCreate, agentStpMstPortId=agentStpMstPortId, agentPortType2pt5GigBaseX=agentPortType2pt5GigBaseX, agentStpConfigName=agentStpConfigName, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentExecAccountingListMethod1=agentExecAccountingListMethod1, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentStpMstBridgePriority=agentStpMstBridgePriority, agentSwitchSnoopingQuerierCfgTable=agentSwitchSnoopingQuerierCfgTable, agentPortBroadcastControlAction=agentPortBroadcastControlAction, agentTransferConfigGroup=agentTransferConfigGroup, agentPortDot3FlowControlOperStatus=agentPortDot3FlowControlOperStatus, agentStpCstPortPriority=agentStpCstPortPriority, agentSwitchFdbAddressAgingTimeout=agentSwitchFdbAddressAgingTimeout, agentNetworkConfigGroup=agentNetworkConfigGroup, agentSwitchCpuProcessName=agentSwitchCpuProcessName, agentAuthenticationListMethod2=agentAuthenticationListMethod2, agentDynamicDsBindingLeaseRemainingTime=agentDynamicDsBindingLeaseRemainingTime, agentPasswordManagementStrengthMaxConsecutiveCharacters=agentPasswordManagementStrengthMaxConsecutiveCharacters, agentStpCstPortBpduGuardEffect=agentStpCstPortBpduGuardEffect, agentStpCstPortTable=agentStpCstPortTable, agentTransferUploadImagename=agentTransferUploadImagename, agentSwitchCpuProcessMemFree=agentSwitchCpuProcessMemFree, agentExecAuthorizationListCreate=agentExecAuthorizationListCreate, agentSwitchCutThroughGroup=agentSwitchCutThroughGroup, agentSwitchSnoopSSMFDBGroupAddress=agentSwitchSnoopSSMFDBGroupAddress, agentTransferUploadMode=agentTransferUploadMode, agentLoginSessionStatus=agentLoginSessionStatus, agentPortStatsRateHCBitsPerSecondRx=agentPortStatsRateHCBitsPerSecondRx, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentSwitchSnoopSSMFDBSourceAddress=agentSwitchSnoopSSMFDBSourceAddress, agentSwitchMFDBMaxTableEntries=agentSwitchMFDBMaxTableEntries, agentSwitchMulticastControlThresholdUnit=agentSwitchMulticastControlThresholdUnit, agentStpBpduGuardMode=agentStpBpduGuardMode, agentUserPassword=agentUserPassword, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, agentStpCstPortBpduFlood=agentStpCstPortBpduFlood, agentServicePortIpv6AddrTable=agentServicePortIpv6AddrTable, agentIASUserConfigEntry=agentIASUserConfigEntry, agentTransferUploadGroup=agentTransferUploadGroup, agentDynamicDsv6BindingVlanId=agentDynamicDsv6BindingVlanId, agentTransferDownloadImagename=agentTransferDownloadImagename, agentSwitchSnoopingVlanMRPExpirationTime=agentSwitchSnoopingVlanMRPExpirationTime, agentNetworkDhcp6REPLYMessagesDiscarded=agentNetworkDhcp6REPLYMessagesDiscarded, agentDynamicIpsgBindingEntry=agentDynamicIpsgBindingEntry, agentDynamicDsBindingMacAddr=agentDynamicDsBindingMacAddr, agentStaticDsBindingTable=agentStaticDsBindingTable, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentExecAuthorizationListMethod1=agentExecAuthorizationListMethod1, daiIntfErrorDisabledTrap=daiIntfErrorDisabledTrap, agentLinkDependencyGroupEntry=agentLinkDependencyGroupEntry, agentTrapLogGroup=agentTrapLogGroup, agentSwitchportConfigEntry=agentSwitchportConfigEntry, agentCmdsAccountingListStatus=agentCmdsAccountingListStatus, agentUserAuthenticationConfigTable=agentUserAuthenticationConfigTable, agentServicePortDhcp6REBINDMessagesSent=agentServicePortDhcp6REBINDMessagesSent, agentTransferUploadServerAddressType=agentTransferUploadServerAddressType, agentStaticIpsgBindingVlanId=agentStaticIpsgBindingVlanId, agentSwitchMFDBMostEntriesUsed=agentSwitchMFDBMostEntriesUsed, agentLagConfigGroupHashOption=agentLagConfigGroupHashOption, agentStpMstPortPathCost=agentStpMstPortPathCost, agentSwitchVoiceVLANAdminMode=agentSwitchVoiceVLANAdminMode, agentDynamicDsv6BindingLeaseRemainingTime=agentDynamicDsv6BindingLeaseRemainingTime, agentSwitchMbufFallingThresholdTrap=agentSwitchMbufFallingThresholdTrap, agentDot3adAggPort=agentDot3adAggPort, agentClearLoginSessions=agentClearLoginSessions, agentSerialCharacterSize=agentSerialCharacterSize, agentSwitchportAccessVlanID=agentSwitchportAccessVlanID, agentServicePortDhcp6SOLICITMessagesSent=agentServicePortDhcp6SOLICITMessagesSent, agentSwitchMulticastControlThreshold=agentSwitchMulticastControlThreshold, agentTransferDownloadServicePortSrcInterface=agentTransferDownloadServicePortSrcInterface, agentDhcpSnoopingVlanEnable=agentDhcpSnoopingVlanEnable, agentSwitchConflictMacAddr=agentSwitchConflictMacAddr, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentTransferDownloadSourceInterface=agentTransferDownloadSourceInterface, agentInfoGroup=agentInfoGroup, agentTransferDownloadDataType=agentTransferDownloadDataType, agentServicePortIPAddress=agentServicePortIPAddress, agentSaveConfig=agentSaveConfig, agentPortMirrorReflectorPort=agentPortMirrorReflectorPort, agentDynamicAuthorizationEncryptServerKey=agentDynamicAuthorizationEncryptServerKey, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentNetworkLocalAdminMacAddress=agentNetworkLocalAdminMacAddress, agentCableTesterCableStatus=agentCableTesterCableStatus, agentServicePortIpv6AdminMode=agentServicePortIpv6AdminMode, agentClassOfServiceGroup=agentClassOfServiceGroup, agentPortBroadcastControlThreshold=agentPortBroadcastControlThreshold, agentStpCstPortAutoEdge=agentStpCstPortAutoEdge, agentDhcpClientVendorClassIdMode=agentDhcpClientVendorClassIdMode, agentStpPortEntry=agentStpPortEntry, agentSnmpConfigGroup=agentSnmpConfigGroup, agentStpCstPortPathCost=agentStpCstPortPathCost, agentSerialBaudrate=agentSerialBaudrate, agentAutoinstallAutoRebootMode=agentAutoinstallAutoRebootMode, agentDhcpSnoopingStatsTable=agentDhcpSnoopingStatsTable, agentDynamicDsBindingTable=agentDynamicDsBindingTable, agentStpMstDesignatedPortId=agentStpMstDesignatedPortId, agentPortVoiceVlanDSCP=agentPortVoiceVlanDSCP, agentSwitchVoiceVLANGroup=agentSwitchVoiceVLANGroup, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentLinkDependencyGroupStatus=agentLinkDependencyGroupStatus, agentCmdsAccountingGroup=agentCmdsAccountingGroup, agentSwitchStormControlTrap=agentSwitchStormControlTrap, agentStpMstId=agentStpMstId, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentSwitchVoiceVlanDeviceTable=agentSwitchVoiceVlanDeviceTable, agentDhcpv6SnoopingInvalidServerMessages=agentDhcpv6SnoopingInvalidServerMessages, agentLoginSessionIndex=agentLoginSessionIndex, agentTransferDownloadPath=agentTransferDownloadPath, agentLinkDependencyGroupIndex=agentLinkDependencyGroupIndex, agentCmdsAuthorizationListCreate=agentCmdsAuthorizationListCreate, agentCableTesterStatus=agentCableTesterStatus, agentSwitchSnoopingIntfMulticastRouterMode=agentSwitchSnoopingIntfMulticastRouterMode, agentImage2=agentImage2, agentLagSummaryConfigTable=agentLagSummaryConfigTable, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentStpMstRootPortId=agentStpMstRootPortId, agentInventoryNetworkProcessingDevice=agentInventoryNetworkProcessingDevice, agentDhcpSnoopingStoreInterval=agentDhcpSnoopingStoreInterval, agentPortVoiceVlanOperationalStatus=agentPortVoiceVlanOperationalStatus, agentDigitalSignatureConfigGroup=agentDigitalSignatureConfigGroup, agentPasswordManagementStrengthExcludeKeywordEntry=agentPasswordManagementStrengthExcludeKeywordEntry, agentStpSwitchConfigGroup=agentStpSwitchConfigGroup, agentUserAccessMode=agentUserAccessMode, agentCableTesterCableFailureLocation=agentCableTesterCableFailureLocation, agentSwitchCutThroughConfiguredModeStatus=agentSwitchCutThroughConfiguredModeStatus, agentSwitchportConfigTable=agentSwitchportConfigTable, agentCableTesterIfIndex=agentCableTesterIfIndex, agentAuthenticationListTable=agentAuthenticationListTable, agentSwitchSnoopSSMGroupAddressType=agentSwitchSnoopSSMGroupAddressType, agentSwitchCpuCosQDropGroup=agentSwitchCpuCosQDropGroup, agentSwitchStaticMacFilteringEntry=agentSwitchStaticMacFilteringEntry)
mibBuilder.exportSymbols("FASTPATH-SWITCHING-MIB", agentSwitchLastConflictingIPAddr=agentSwitchLastConflictingIPAddr, agentServicePortIpv6AddrStatus=agentServicePortIpv6AddrStatus, agentCmdsAuthorizationListMethod1=agentCmdsAuthorizationListMethod1, agentDhcpL2RelayIfEnable=agentDhcpL2RelayIfEnable, agentSwitchSnoopSSMSrcListAddress=agentSwitchSnoopSSMSrcListAddress, agentStaticDsBindingVlanId=agentStaticDsBindingVlanId, agentSwitchSnoopingQuerierVersion=agentSwitchSnoopingQuerierVersion, agentStpMstPortPriority=agentStpMstPortPriority, agentPortDot1dBasePort=agentPortDot1dBasePort, agentPrivateVlanIntfAssocEntry=agentPrivateVlanIntfAssocEntry, agentImage1=agentImage1, agentDhcpL2RelayStatsTable=agentDhcpL2RelayStatsTable, agentPortMirrorTypeType=agentPortMirrorTypeType, agentSwitchCpuCosQDrops=agentSwitchCpuCosQDrops, agentCmdsAuthorizationGroup=agentCmdsAuthorizationGroup, agentDhcpL2RelayIfTrustEnable=agentDhcpL2RelayIfTrustEnable, agentStaticDsBindingMacAddr=agentStaticDsBindingMacAddr, agentActiveImage=agentActiveImage, agentSwitchSnoopingIntfAdminMode=agentSwitchSnoopingIntfAdminMode, agentStaticIpv6sgBindingMacAddr=agentStaticIpv6sgBindingMacAddr, agentStpCstRootFwdDelay=agentStpCstRootFwdDelay, agentSwitchSnoopSSMGroupIfIndex=agentSwitchSnoopSSMGroupIfIndex, agentSwitchSnoopSSMGroupEntry=agentSwitchSnoopSSMGroupEntry, agentSwitchVlanMacAssociationEntry=agentSwitchVlanMacAssociationEntry, agentSwitchUnicastControlThresholdUnit=agentSwitchUnicastControlThresholdUnit, agentSwitchSnoopingQuerierVlanOperMode=agentSwitchSnoopingQuerierVlanOperMode, agentServicePortDhcp6ADVERTISEMessagesReceived=agentServicePortDhcp6ADVERTISEMessagesReceived, agentExecAccountingMethodType=agentExecAccountingMethodType, agentPrivateVlanEntry=agentPrivateVlanEntry, userLockoutTrap=userLockoutTrap, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentDynamicAuthorizationIgnoreSessionKey=agentDynamicAuthorizationIgnoreSessionKey, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentPortLoadStatsInterval=agentPortLoadStatsInterval, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentDhcpL2RelayVlanConfigEntry=agentDhcpL2RelayVlanConfigEntry, agentSwitchCpuRisingThresholdTrap=agentSwitchCpuRisingThresholdTrap, agentCmdsAuthorizationListName=agentCmdsAuthorizationListName, agentNetworkDhcp6ADVERTISEMessagesDiscarded=agentNetworkDhcp6ADVERTISEMessagesDiscarded, agentStpCstPortOperPointToPoint=agentStpCstPortOperPointToPoint, agentLinkDependencyGroupStatTransTimeLast=agentLinkDependencyGroupStatTransTimeLast, agentDhcpv6SnoopingIfConfigTable=agentDhcpv6SnoopingIfConfigTable, agentPortMirrorEntry=agentPortMirrorEntry, agentDhcpL2RelayStatsEntry=agentDhcpL2RelayStatsEntry, agentServicePortDhcp6StatsReset=agentServicePortDhcp6StatsReset, noStartupConfigTrap=noStartupConfigTrap, agentStaticDsv6BindingTable=agentStaticDsv6BindingTable, agentSwitchCpuCosQDropEntry=agentSwitchCpuCosQDropEntry, agentStpCstPortEdge=agentStpCstPortEdge, agentServicePortDhcp6REQUESTMessagesSent=agentServicePortDhcp6REQUESTMessagesSent, agentSwitchMbufsUsed=agentSwitchMbufsUsed, agentSwitchSnoopingVlanFastLeaveAdminMode=agentSwitchSnoopingVlanFastLeaveAdminMode, agentDhcpSnoopingVlanConfigEntry=agentDhcpSnoopingVlanConfigEntry, agentMirroredPortIfIndex=agentMirroredPortIfIndex, agentPortConfigTable=agentPortConfigTable, agentStpMstPortEntry=agentStpMstPortEntry, agentAuthenticationGroup=agentAuthenticationGroup, agentPortMirrorRemoteVlanTable=agentPortMirrorRemoteVlanTable, agentPortMulticastControlThreshold=agentPortMulticastControlThreshold, agentStpMstVlanTable=agentStpMstVlanTable, agentDynamicAuthorizationMode=agentDynamicAuthorizationMode, agentSwitchSnoopingCfgTable=agentSwitchSnoopingCfgTable, agentSwitchLastConflictingMacAddr=agentSwitchLastConflictingMacAddr, agentSwitchVoiceVlanInterfaceNum=agentSwitchVoiceVlanInterfaceNum, agentSwitchSnoopingAdminMode=agentSwitchSnoopingAdminMode, agentServicePortIpv6ConfigProtocol=agentServicePortIpv6ConfigProtocol, agentStpCstBridgeHoldCount=agentStpCstBridgeHoldCount, agentDynamicIpv6sgBindingIfIndex=agentDynamicIpv6sgBindingIfIndex, agentLinkDependencyGroup=agentLinkDependencyGroup, agentPortVoiceVlanNoneMode=agentPortVoiceVlanNoneMode, agentStpMstPortTable=agentStpMstPortTable, agentSwitchMbufConfigGroup=agentSwitchMbufConfigGroup, agentSwitchSnoopingQuerierVlanTable=agentSwitchSnoopingQuerierVlanTable, agentIpv6sgIfPortSecurity=agentIpv6sgIfPortSecurity, agentSwitchSnoopingQuerierVlanEntry=agentSwitchSnoopingQuerierVlanEntry, agentSwitchSnoopingIntfGroupMembershipInterval=agentSwitchSnoopingIntfGroupMembershipInterval, agentTrapLogIndex=agentTrapLogIndex, agentLagConfigStaticCapability=agentLagConfigStaticCapability, agentDhcpClientVendorClassIdString=agentDhcpClientVendorClassIdString, agentSwitchStormControlType=agentSwitchStormControlType, agentTransferDownloadServerAddress=agentTransferDownloadServerAddress, agentNetworkMgmtVlan=agentNetworkMgmtVlan, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentSwitchSnoopingVlanAdminMode=agentSwitchSnoopingVlanAdminMode, agentPortVoiceVlanPriority=agentPortVoiceVlanPriority, agentSwitchCpuProcessFreeMemoryThreshold=agentSwitchCpuProcessFreeMemoryThreshold, agentServicePortDhcp6ADVERTISEMessagesDiscarded=agentServicePortDhcp6ADVERTISEMessagesDiscarded, agentExecAccountingListTable=agentExecAccountingListTable, agentSwitchSnoopSSMGroupVlanId=agentSwitchSnoopSSMGroupVlanId, agentPortTypeGroup=agentPortTypeGroup, agentLagClearCounters=agentLagClearCounters, agentStaticIpv6sgBindingIfIndex=agentStaticIpv6sgBindingIfIndex, PortList=PortList, agentUserConfigTable=agentUserConfigTable, agentServicePortDhcp6REPLYMessagesDiscarded=agentServicePortDhcp6REPLYMessagesDiscarded, agentStpMstRowStatus=agentStpMstRowStatus, agentStpCstPortBpduFilter=agentStpCstPortBpduFilter, agentPrivateVlanGroup=agentPrivateVlanGroup, agentStaticIpv6sgBindingRowStatus=agentStaticIpv6sgBindingRowStatus, agentDhcpSnoopingIfTrustEnable=agentDhcpSnoopingIfTrustEnable, agentStpForceVersion=agentStpForceVersion, agentDynamicIpsgBindingIpAddr=agentDynamicIpsgBindingIpAddr, agentStpMstVlanRowStatus=agentStpMstVlanRowStatus, agentExecAuthorizationListMethod4=agentExecAuthorizationListMethod4, agentStpMstPortForwardingState=agentStpMstPortForwardingState, agentSaveConfigStatus=agentSaveConfigStatus, agentSwitchSnoopingQuerierVlanAddress=agentSwitchSnoopingQuerierVlanAddress, agentStpCstBridgeMaxHops=agentStpCstBridgeMaxHops, agentStpBpduFilterDefault=agentStpBpduFilterDefault, agentServicePortIpv6AddrPrefixLength=agentServicePortIpv6AddrPrefixLength, agentSystemGroup=agentSystemGroup, agentSwitchMbufPrio=agentSwitchMbufPrio, agentLoginSessionEntry=agentLoginSessionEntry, agentStpCstPortId=agentStpCstPortId, agentAutoInstallConfigGroup=agentAutoInstallConfigGroup, agentPortType40GigBaseX=agentPortType40GigBaseX, agentAuthenticationListName=agentAuthenticationListName, agentDhcpSnoopingInvalidClientMessages=agentDhcpSnoopingInvalidClientMessages, agentSupportedMibEntry=agentSupportedMibEntry, agentCmdsAccountingMethodType=agentCmdsAccountingMethodType, agentSwitchAddressConflictDetectionStatusReset=agentSwitchAddressConflictDetectionStatusReset, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentSwitchSnoopingQuerierOperMaxResponseTime=agentSwitchSnoopingQuerierOperMaxResponseTime, agentDynamicDsv6BindingTable=agentDynamicDsv6BindingTable, agentSwitchBroadcastStormControlAction=agentSwitchBroadcastStormControlAction, agentSwitchSnoopSSMFDBGroupAddressType=agentSwitchSnoopSSMFDBGroupAddressType, agentStpPortStatsMstpBpduRx=agentStpPortStatsMstpBpduRx, agentAuthenticationListMethod5=agentAuthenticationListMethod5, agentSwitchCpuFreeMemBelowThresholdTrap=agentSwitchCpuFreeMemBelowThresholdTrap, agentSwitchCpuProcessPercentageUtilization=agentSwitchCpuProcessPercentageUtilization, agentTelnetConfigGroup=agentTelnetConfigGroup, agentInventorySerialNumber=agentInventorySerialNumber, agentPortStatsRateOverflowPacketsPerSecondTx=agentPortStatsRateOverflowPacketsPerSecondTx, agentNetworkDhcp6MalformedMessagesReceived=agentNetworkDhcp6MalformedMessagesReceived, agentLagSummaryStpMode=agentLagSummaryStpMode, agentTransferDownloadGroup=agentTransferDownloadGroup, agentPortUnicastControlAction=agentPortUnicastControlAction, agentPortMirrorTypeEntry=agentPortMirrorTypeEntry, agentSwitchUnicastControlMode=agentSwitchUnicastControlMode, agentTransferDownloadStart=agentTransferDownloadStart, agentSwitchMbufNotificationSeverity=agentSwitchMbufNotificationSeverity, agentPortStatsRatePacketsPerSecondTx=agentPortStatsRatePacketsPerSecondTx, agentHTTPSoftTimeout=agentHTTPSoftTimeout, agentStpMstDesignatedRootId=agentStpMstDesignatedRootId, agentSwitchMbufTable=agentSwitchMbufTable, agentSwitchSnoopingPortMask=agentSwitchSnoopingPortMask, agentResetSystem=agentResetSystem, agentSwitchVoiceVlanDeviceMacAddress=agentSwitchVoiceVlanDeviceMacAddress, agentPrivateVlanIntfAssocPromiscuousSecondary=agentPrivateVlanIntfAssocPromiscuousSecondary, agentIASUserName=agentIASUserName, agentSwitchportTrunkNativeVlanTagging=agentSwitchportTrunkNativeVlanTagging, agentExecAccountingListEntry=agentExecAccountingListEntry, agentDynamicIpv6sgBindingVlanId=agentDynamicIpv6sgBindingVlanId, agentSwitchMFDBForwardingPortMask=agentSwitchMFDBForwardingPortMask, agentTransferUploadStart=agentTransferUploadStart, agentSwitchStormControlGroup=agentSwitchStormControlGroup, agentLinkDependencyGroupDownstreamPortMask=agentLinkDependencyGroupDownstreamPortMask, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentDhcpSnoopingVlanConfigTable=agentDhcpSnoopingVlanConfigTable, PortId=PortId, agentAuthenticationListStatus=agentAuthenticationListStatus, agentStaticIpsgBindingEntry=agentStaticIpsgBindingEntry, agentDhcpv6SnoopingIfBurstInterval=agentDhcpv6SnoopingIfBurstInterval, agentExecAccountingListCreate=agentExecAccountingListCreate, agentSwitchMFDBSummaryForwardingPortMask=agentSwitchMFDBSummaryForwardingPortMask, agentDynamicAuthorizationClientAddress=agentDynamicAuthorizationClientAddress, agentServicePortIpv6AddrEuiFlag=agentServicePortIpv6AddrEuiFlag, failedUserLoginTrap=failedUserLoginTrap, agentSerialParityType=agentSerialParityType, agentReloadConfig=agentReloadConfig, agentSwitchSnoopSSMSrcListHostAddress=agentSwitchSnoopSSMSrcListHostAddress, agentSwitchProtectedPortConfigGroup=agentSwitchProtectedPortConfigGroup, agentSwitchSnoopingQuerierLastQuerierAddress=agentSwitchSnoopingQuerierLastQuerierAddress, agentSwitchVlanMacAssociationRowStatus=agentSwitchVlanMacAssociationRowStatus, broadcastStormStartTrap=broadcastStormStartTrap, agentSwitchSnoopingProtocol=agentSwitchSnoopingProtocol, agentSwitchportGeneralForbiddenVlanList=agentSwitchportGeneralForbiddenVlanList, agentExecAccountingListName=agentExecAccountingListName, agentServicePortIpv6AddressAutoConfig=agentServicePortIpv6AddressAutoConfig, agentStpMstVlanEntry=agentStpMstVlanEntry, stpInstanceLoopInconsistentEndTrap=stpInstanceLoopInconsistentEndTrap, agentPortType=agentPortType, agentDhcpSnoopingStatsReset=agentDhcpSnoopingStatsReset, agentSwitchportMode=agentSwitchportMode, agentSupportedMibTable=agentSupportedMibTable, agentLagConfigGroup=agentLagConfigGroup, agentStpMstTable=agentStpMstTable, fastPathSwitching=fastPathSwitching, agentSwitchVlanStaticMrouterTable=agentSwitchVlanStaticMrouterTable, agentDynamicAuthorizationPortNum=agentDynamicAuthorizationPortNum, agentPortLinkTrapMode=agentPortLinkTrapMode, agentConfigGroup=agentConfigGroup, agentSwitchCpuFreeMemAboveThresholdTrap=agentSwitchCpuFreeMemAboveThresholdTrap, agentPortMirrorTypeTable=agentPortMirrorTypeTable, agentDynamicDsv6BindingMacAddr=agentDynamicDsv6BindingMacAddr, agentSupportedMibIndex=agentSupportedMibIndex, agentCmdsAuthorizationListMethod3=agentCmdsAuthorizationListMethod3, agentSwitchSnoopingVlanTable=agentSwitchSnoopingVlanTable, agentTransferDownloadServerAddressType=agentTransferDownloadServerAddressType, agentSwitchSnoopingIntfFastLeaveAdminMode=agentSwitchSnoopingIntfFastLeaveAdminMode, agentSwitchSnoopingQuerierAdminMode=agentSwitchSnoopingQuerierAdminMode, agentPortMirrorRemoteVlanEntry=agentPortMirrorRemoteVlanEntry, agentAutoinstallOperationalMode=agentAutoinstallOperationalMode, agentPasswordManagementStrengthMinUpperCase=agentPasswordManagementStrengthMinUpperCase, agentSwitchBroadcastControlThresholdUnit=agentSwitchBroadcastControlThresholdUnit, agentPortStatsRateTable=agentPortStatsRateTable, agentSwitchVlanStaticMrouterGroup=agentSwitchVlanStaticMrouterGroup, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentNetworkMacAddressType=agentNetworkMacAddressType, agentPortIanaType=agentPortIanaType, agentSwitchSnoopSSMFDBIncludePortList=agentSwitchSnoopSSMFDBIncludePortList, agentStpCstBridgeHoldTime=agentStpCstBridgeHoldTime, agentClearPasswords=agentClearPasswords, agentInventorySysDescription=agentInventorySysDescription, agentLagSummaryAddPort=agentLagSummaryAddPort, agentServicePortIpv6AddrEntry=agentServicePortIpv6AddrEntry, agentStpCstHelloTime=agentStpCstHelloTime, agentDhcpSnoopingIfLogEnable=agentDhcpSnoopingIfLogEnable, agentStpCstPortRootGuard=agentStpCstPortRootGuard, agentSerialGroup=agentSerialGroup, agentPortConfigEntry=agentPortConfigEntry, agentUserPortConfigTable=agentUserPortConfigTable, agentPortStatsRateHCBitsPerSecondTx=agentPortStatsRateHCBitsPerSecondTx, agentPortClearStats=agentPortClearStats, agentStpCstConfigGroup=agentStpCstConfigGroup, agentIpsgIfConfigTable=agentIpsgIfConfigTable, agentSwitchMFDBFilteringPortMask=agentSwitchMFDBFilteringPortMask, agentIpsgIfConfigEntry=agentIpsgIfConfigEntry, agentDhcpSnoopingInvalidServerMessages=agentDhcpSnoopingInvalidServerMessages, agentCableTesterGroup=agentCableTesterGroup, agentClassOfServicePortPriority=agentClassOfServicePortPriority, agentLagConfigCreate=agentLagConfigCreate, agentLagSummaryHashOption=agentLagSummaryHashOption, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentExecAuthorizationListStatus=agentExecAuthorizationListStatus, agentBackupImageVersion=agentBackupImageVersion, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentLagSummaryRateLoadInterval=agentLagSummaryRateLoadInterval, agentTransferDownloadFilename=agentTransferDownloadFilename, agentTransferUploadServerAddress=agentTransferUploadServerAddress, agentUserStatus=agentUserStatus, agentSnmpTrapSourceInterface=agentSnmpTrapSourceInterface, agentStaticDsBindingEntry=agentStaticDsBindingEntry, agentUserName=agentUserName, agentNetworkIpv6AddrEntry=agentNetworkIpv6AddrEntry, agentNetworkIpv6AddrPrefix=agentNetworkIpv6AddrPrefix, agentPortMirrorSourceVlan=agentPortMirrorSourceVlan, agentCLIBannerMsgConfigGroup=agentCLIBannerMsgConfigGroup, agentDhcpL2RelayAdminMode=agentDhcpL2RelayAdminMode, agentSwitchSnoopingQuerierOperVersion=agentSwitchSnoopingQuerierOperVersion, agentPrivateVlanIntfAssocHostPrimary=agentPrivateVlanIntfAssocHostPrimary, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, agentLinkDependencyGroupStatTransCounter=agentLinkDependencyGroupStatTransCounter, agentSwitchMFDBCurrentEntries=agentSwitchMFDBCurrentEntries)
mibBuilder.exportSymbols("FASTPATH-SWITCHING-MIB", agentTransferUploadPath=agentTransferUploadPath, agentPortMirrorRemoteVlanRowStatus=agentPortMirrorRemoteVlanRowStatus, agentSwitchportGeneralUntaggedVlanList=agentSwitchportGeneralUntaggedVlanList, agentDhcpv6SnoopingAdminMode=agentDhcpv6SnoopingAdminMode, Ipv6Address=Ipv6Address, agentPortPhysicalMode=agentPortPhysicalMode, agentPortMulticastControlMode=agentPortMulticastControlMode, agentSwitchMFDBMacAddress=agentSwitchMFDBMacAddress, agentServicePortStatsGroup=agentServicePortStatsGroup, agentStpConfigDigestKey=agentStpConfigDigestKey, agentIpv6sgIfVerifySource=agentIpv6sgIfVerifySource, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, agentSwitchCpuCosQIndex=agentSwitchCpuCosQIndex, agentSwitchSnoopingQuerierQueryInterval=agentSwitchSnoopingQuerierQueryInterval, agentPortBroadcastControlMode=agentPortBroadcastControlMode, agentServicePortIpv6AddrPrefix=agentServicePortIpv6AddrPrefix, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentInventoryFRUNumber=agentInventoryFRUNumber, agentSwitchStaticMacFilteringAddress=agentSwitchStaticMacFilteringAddress, agentSwitchCpuProcessFallingThresholdInterval=agentSwitchCpuProcessFallingThresholdInterval, agentPasswordManagementMinLength=agentPasswordManagementMinLength, agentStaticDsv6BindingIfIndex=agentStaticDsv6BindingIfIndex, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, agentSwitchVlanMacAssociationVlanId=agentSwitchVlanMacAssociationVlanId, agentDynamicDsv6BindingEntry=agentDynamicDsv6BindingEntry, agentPasswordManagementLockAttempts=agentPasswordManagementLockAttempts, agentSwitchMbufRisingThreshold=agentSwitchMbufRisingThreshold, agentPasswordManagementStrengthMinSpecialCharacters=agentPasswordManagementStrengthMinSpecialCharacters, agentSwitchSnoopSSMSrcListTable=agentSwitchSnoopSSMSrcListTable, agentStpCstBridgeHelloTime=agentStpCstBridgeHelloTime, agentCmdsAuthorizationListMethod2=agentCmdsAuthorizationListMethod2, agentUserConfigDefaultAuthenticationList=agentUserConfigDefaultAuthenticationList, agentLagSummaryType=agentLagSummaryType, agentIpv6sgIfConfigTable=agentIpv6sgIfConfigTable, agentUserConfigGroup=agentUserConfigGroup, agentInventoryMachineType=agentInventoryMachineType, agentAuthenticationListMethod3=agentAuthenticationListMethod3, agentIpsgIfVerifySource=agentIpsgIfVerifySource, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentPortStatsRateEntry=agentPortStatsRateEntry, agentSwitchSnoopingQuerierAddress=agentSwitchSnoopingQuerierAddress, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentDhcpL2RelayVlanConfigTable=agentDhcpL2RelayVlanConfigTable, agentSwitchSnoopingGroup=agentSwitchSnoopingGroup, agentDhcpSnoopingRemoteFileName=agentDhcpSnoopingRemoteFileName, agentPrivateVlanIntfAssocPromiscuousPrimary=agentPrivateVlanIntfAssocPromiscuousPrimary, agentCmdsAuthorizationListTable=agentCmdsAuthorizationListTable, agentDot3adAggPortTable=agentDot3adAggPortTable, fastPathSwitchingTraps=fastPathSwitchingTraps, agentSwitchSnoopingIntfEntry=agentSwitchSnoopingIntfEntry, agentNetworkIpv6AddrPrefixLength=agentNetworkIpv6AddrPrefixLength, agentStaticDsv6BindingMacAddr=agentStaticDsv6BindingMacAddr, loginSessionStartStopTrap=loginSessionStartStopTrap, agentSupportedMibDescription=agentSupportedMibDescription, agentServicePortDhcp6RELEASEMessagesSent=agentServicePortDhcp6RELEASEMessagesSent, agentFactoryDefaultsErase=agentFactoryDefaultsErase, agentStaticIpsgBindingTable=agentStaticIpsgBindingTable, agentIASUserConfigCreate=agentIASUserConfigCreate, agentTrapLogTable=agentTrapLogTable, agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82=agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82, agentSwitchMbufRisingThresholdTrap=agentSwitchMbufRisingThresholdTrap, agentDynamicAuthorizationClientRowStatus=agentDynamicAuthorizationClientRowStatus, agentStpPortState=agentStpPortState, agentPortMirrorRemoteDestinationVlan=agentPortMirrorRemoteDestinationVlan, agentPortIfIndex=agentPortIfIndex, agentStpCstDesignatedCost=agentStpCstDesignatedCost, agentSwitchCutThroughRunningModeStatus=agentSwitchCutThroughRunningModeStatus, agentInventoryGroup=agentInventoryGroup, agentUserPasswordExpireTime=agentUserPasswordExpireTime, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentNextActiveImage=agentNextActiveImage, agentAutoinstallMode=agentAutoinstallMode, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, VlanList=VlanList, agentSwitchMFDBVlanId=agentSwitchMFDBVlanId, agentPortStatsRateOverflowBitsPerSecondTx=agentPortStatsRateOverflowBitsPerSecondTx, agentSwitchProtectedPortPortList=agentSwitchProtectedPortPortList, agentExecAuthorizationListTable=agentExecAuthorizationListTable, agentExecAuthorizationListMethod3=agentExecAuthorizationListMethod3, agentDynamicAuthorizationIgnoreServerKey=agentDynamicAuthorizationIgnoreServerKey, agentSwitchLastConflictReportedTime=agentSwitchLastConflictReportedTime, agentTransferUploadSourceInterface=agentTransferUploadSourceInterface, agentServicePortSubnetMask=agentServicePortSubnetMask, agentStaticDsv6BindingVlanId=agentStaticDsv6BindingVlanId, agentDhcpv6SnoopingRemoteFileName=agentDhcpv6SnoopingRemoteFileName, agentPasswordMgmtStrengthExcludeKeywordStatus=agentPasswordMgmtStrengthExcludeKeywordStatus, agentPasswordManagementStrengthMinCharacterClasses=agentPasswordManagementStrengthMinCharacterClasses, agentSwitchSnoopSSMGroupTable=agentSwitchSnoopSSMGroupTable, agentDhcpv6SnoopingVlanEnable=agentDhcpv6SnoopingVlanEnable, agentDhcpv6SnoopingStoreInterval=agentDhcpv6SnoopingStoreInterval, agentServicePortConfigGroup=agentServicePortConfigGroup, agentSwitchProtectedPortTable=agentSwitchProtectedPortTable, agentStpCstPortLoopGuard=agentStpCstPortLoopGuard, agentPasswordManagementAging=agentPasswordManagementAging, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, linkFailureTrap=linkFailureTrap, agentDynamicAuthorizationGroup=agentDynamicAuthorizationGroup, agentStaticIpv6sgBindingEntry=agentStaticIpv6sgBindingEntry, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentSwitchStaticMacFilteringDestPortMask=agentSwitchStaticMacFilteringDestPortMask, agentTrapLogTrap=agentTrapLogTrap, agentInventorySoftwareVersion=agentInventorySoftwareVersion, agentPasswordManagementStrengthMinNumericNumbers=agentPasswordManagementStrengthMinNumericNumbers, agentPortStatsRatePacketsPerSecondRx=agentPortStatsRatePacketsPerSecondRx, agentSnmpServerPortNum=agentSnmpServerPortNum, agentSwitchportGeneralTaggedVlanList=agentSwitchportGeneralTaggedVlanList, agentSwitchMbufClassName=agentSwitchMbufClassName, agentSwitchSnoopingQuerierGroup=agentSwitchSnoopingQuerierGroup, agentNetworkJavaMode=agentNetworkJavaMode, agentTelnetMgmtPortNum=agentTelnetMgmtPortNum, agentSwitchSnoopSSMSrcListVlanId=agentSwitchSnoopSSMSrcListVlanId, agentPortMirrorSourcePortMask=agentPortMirrorSourcePortMask, agentDynamicAuthorizationStatsClear=agentDynamicAuthorizationStatsClear, agentDynamicAuthorizationClientEntry=agentDynamicAuthorizationClientEntry, agentStaticIpv6sgBindingIpAddr=agentStaticIpv6sgBindingIpAddr, agentSwitchSnoopingMulticastControlFramesProcessed=agentSwitchSnoopingMulticastControlFramesProcessed, agentDynamicDsv6BindingIfIndex=agentDynamicDsv6BindingIfIndex, agentDynamicDsBindingIpAddr=agentDynamicDsBindingIpAddr, agentPortMaxFrameSize=agentPortMaxFrameSize, agentNetworkStatsGroup=agentNetworkStatsGroup, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentSwitchSnoopSSMGroupSourceFilterMode=agentSwitchSnoopSSMGroupSourceFilterMode, agentSwitchSnoopingIntfIndex=agentSwitchSnoopingIntfIndex, agentSwitchUnicastStormControlAction=agentSwitchUnicastStormControlAction, agentPortVoiceVlanAuthMode=agentPortVoiceVlanAuthMode, agentSwitchSnoopingVlanMaxResponseTime=agentSwitchSnoopingVlanMaxResponseTime, agentServicePortDhcp6RENEWMessagesSent=agentServicePortDhcp6RENEWMessagesSent, agentNetworkIpv6AddrTable=agentNetworkIpv6AddrTable, agentStaticIpsgBindingMacAddr=agentStaticIpsgBindingMacAddr, agentDhcpSnoopingVerifyMac=agentDhcpSnoopingVerifyMac, agentUserLockoutStatus=agentUserLockoutStatus, agentClearTrapLog=agentClearTrapLog, agentInventoryMachineModel=agentInventoryMachineModel, agentSwitchCpuProcessTotalUtilization=agentSwitchCpuProcessTotalUtilization, agentSwitchMbufAllocAttempts=agentSwitchMbufAllocAttempts, agentSwitchAddressConflictDetectionStatus=agentSwitchAddressConflictDetectionStatus, agentDhcpL2RelayUntrustedClntMsgsWithOptn82=agentDhcpL2RelayUntrustedClntMsgsWithOptn82, agentDynamicAuthorizationType=agentDynamicAuthorizationType, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentLagDetailedPortCounter=agentLagDetailedPortCounter, agentNetworkDhcp6REQUESTMessagesSent=agentNetworkDhcp6REQUESTMessagesSent, agentNetworkDhcp6REPLYMessagesReceived=agentNetworkDhcp6REPLYMessagesReceived, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentPortMaxFrameSizeLimit=agentPortMaxFrameSizeLimit, agentSwitchSnoopSSMFDBTable=agentSwitchSnoopSSMFDBTable, agentDynamicAuthorizationServerKey=agentDynamicAuthorizationServerKey, dhcpSnoopingIntfErrorDisabledTrap=dhcpSnoopingIntfErrorDisabledTrap, agentDynamicIpv6sgBindingEntry=agentDynamicIpv6sgBindingEntry, agentSwitchSnoopSSMFDBVlanIndex=agentSwitchSnoopSSMFDBVlanIndex, agentPortMirrorTable=agentPortMirrorTable, agentSwitchSnoopingIntfMaxResponseTime=agentSwitchSnoopingIntfMaxResponseTime, agentAutoinstallUnicastRetryCount=agentAutoinstallUnicastRetryCount, agentDhcpL2RelayVlanEnable=agentDhcpL2RelayVlanEnable, agentPortMirrorRemoteVlan=agentPortMirrorRemoteVlan, agentHTTPConfigGroup=agentHTTPConfigGroup, agentStpMstTopologyChangeCount=agentStpMstTopologyChangeCount, agentStaticDsBindingIpAddr=agentStaticDsBindingIpAddr, agentDhcpv6SnoopingIfTrustEnable=agentDhcpv6SnoopingIfTrustEnable, agentTransferDownloadMode=agentTransferDownloadMode, agentSwitchCpuProcessRisingThresholdInterval=agentSwitchCpuProcessRisingThresholdInterval, agentTransferUploadDataType=agentTransferUploadDataType, agentDynamicAuthorizationClientServerKey=agentDynamicAuthorizationClientServerKey, agentPortStatsRateGroup=agentPortStatsRateGroup, agentVendorClassOptionConfigGroup=agentVendorClassOptionConfigGroup, agentSwitchSnoopSSMSrcListAddressType=agentSwitchSnoopSSMSrcListAddressType, agentSpanningTreeMode=agentSpanningTreeMode, agentUserIndex=agentUserIndex, agentTransferDownloadStatus=agentTransferDownloadStatus, agentPrivateVlanIntfAssocHostSecondary=agentPrivateVlanIntfAssocHostSecondary, agentSwitchSnoopingVlanGroup=agentSwitchSnoopingVlanGroup, agentIASUserPassword=agentIASUserPassword, agentNetworkIpv6AddrStatus=agentNetworkIpv6AddrStatus, agentLoginSessionInetAddressType=agentLoginSessionInetAddressType, agentStpCstPortOperEdge=agentStpCstPortOperEdge, agentPasswordManagementPasswordStrengthCheck=agentPasswordManagementPasswordStrengthCheck, agentUserPortSecurity=agentUserPortSecurity, agentClearSwitchStats=agentClearSwitchStats, agentSwitchSnoopingVlanReportSuppMode=agentSwitchSnoopingVlanReportSuppMode, agentStaticDsBindingIfIndex=agentStaticDsBindingIfIndex, agentStpCstPortForwardingState=agentStpCstPortForwardingState, agentDhcpSnoopingIfConfigEntry=agentDhcpSnoopingIfConfigEntry, agentDynamicIpv6sgBindingIpAddr=agentDynamicIpv6sgBindingIpAddr, agentSwitchMbufGroup=agentSwitchMbufGroup, agentNetworkDhcp6RENEWMessagesSent=agentNetworkDhcp6RENEWMessagesSent, agentDynamicDsBindingIfIndex=agentDynamicDsBindingIfIndex, agentStpCstBridgePriority=agentStpCstBridgePriority, agentPrivateVlanIntfAssocTable=agentPrivateVlanIntfAssocTable, agentSwitchProtectedPortEntry=agentSwitchProtectedPortEntry, agentInventoryManufacturer=agentInventoryManufacturer, agentNetworkIpv6AddrEuiFlag=agentNetworkIpv6AddrEuiFlag, agentPortType25GigBaseX=agentPortType25GigBaseX, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentSwitchStaticMacFilteringSourcePortMask=agentSwitchStaticMacFilteringSourcePortMask, agentStartupConfigErase=agentStartupConfigErase, agentSwitchMFDBType=agentSwitchMFDBType, agentAutoinstallAutosaveMode=agentAutoinstallAutosaveMode, agentLagSummaryMinimumActiveLinks=agentLagSummaryMinimumActiveLinks, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentSwitchCpuFallingThresholdTrap=agentSwitchCpuFallingThresholdTrap, agentClearConfig=agentClearConfig, agentHTTPWebMgmtPortNum=agentHTTPWebMgmtPortNum, agentDhcpL2RelayTrustedClntMsgsWithoutOptn82=agentDhcpL2RelayTrustedClntMsgsWithoutOptn82, agentStpPortStatsRstpBpduRx=agentStpPortStatsRstpBpduRx, agentTransferUploadRemoteFilename=agentTransferUploadRemoteFilename, agentPortSwitchportMode=agentPortSwitchportMode, agentCmdsAuthorizationListEntry=agentCmdsAuthorizationListEntry, agentPortMirrorAdminMode=agentPortMirrorAdminMode, agentDhcpL2RelayIfConfigTable=agentDhcpL2RelayIfConfigTable, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentCmdsAccountingListName=agentCmdsAccountingListName, agentPortMirrorTypeSourcePort=agentPortMirrorTypeSourcePort, agentDhcpv6SnoopingStatsReset=agentDhcpv6SnoopingStatsReset, agentCableTesterMaximumCableLength=agentCableTesterMaximumCableLength, agentStpCstRegionalRootId=agentStpCstRegionalRootId, agentLagSummaryStaticCapability=agentLagSummaryStaticCapability, agentSwitchSnoopingVlanEntry=agentSwitchSnoopingVlanEntry, agentSwitchMFDBTable=agentSwitchMFDBTable, agentStpMstTopologyChangeParm=agentStpMstTopologyChangeParm, agentPortSTPMode=agentPortSTPMode, agentSwitchMbufsFree=agentSwitchMbufsFree, agentIpsgIfPortSecurity=agentIpsgIfPortSecurity, agentStpCstBridgeMaxAge=agentStpCstBridgeMaxAge, agentDhcpL2RelayConfigGroup=agentDhcpL2RelayConfigGroup, agentPortStatsRateHCPacketsPerSecondRx=agentPortStatsRateHCPacketsPerSecondRx, agentAuthenticationListEntry=agentAuthenticationListEntry, agentPortStatsRateHCPacketsPerSecondTx=agentPortStatsRateHCPacketsPerSecondTx, agentStpPortStatsRstpBpduTx=agentStpPortStatsRstpBpduTx, agentStpCstPortTopologyChangeAck=agentStpCstPortTopologyChangeAck, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentDhcpv6SnoopingIfConfigEntry=agentDhcpv6SnoopingIfConfigEntry, agentCmdsAccountingListEntry=agentCmdsAccountingListEntry, agentAutoinstallStatus=agentAutoinstallStatus, agentStpCstDesignatedPortId=agentStpCstDesignatedPortId, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentUserPortConfigEntry=agentUserPortConfigEntry, agentDhcpSnoopingIfRateLimit=agentDhcpSnoopingIfRateLimit, agentCmdsAccountingListMethod1=agentCmdsAccountingListMethod1, agentLagSummaryName=agentLagSummaryName, agentDhcpL2RelayIfConfigEntry=agentDhcpL2RelayIfConfigEntry, agentSwitchAddressConflictDetectionRun=agentSwitchAddressConflictDetectionRun, agentSwitchBroadcastControlThreshold=agentSwitchBroadcastControlThreshold, agentHTTPMaxSessions=agentHTTPMaxSessions, agentSwitchCpuProcessIndex=agentSwitchCpuProcessIndex, agentTransferUploadPassword=agentTransferUploadPassword, agentStpConfigRevision=agentStpConfigRevision, agentDynamicIpv6sgBindingMacAddr=agentDynamicIpv6sgBindingMacAddr, agentServicePortDhcp6ClientDuid=agentServicePortDhcp6ClientDuid, agentPrivateVlanType=agentPrivateVlanType, agentUserConfigEntry=agentUserConfigEntry, agentTransferDownloadDigitalSignatureVerifySelect=agentTransferDownloadDigitalSignatureVerifySelect, PYSNMP_MODULE_ID=fastPathSwitching, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag)
mibBuilder.exportSymbols("FASTPATH-SWITCHING-MIB", agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82=agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82, multipleUsersTrap=multipleUsersTrap, agentStpPortStatsStpBpduRx=agentStpPortStatsStpBpduRx, agentClassOfServicePortTable=agentClassOfServicePortTable, agentDhcpv6SnoopingIfRateLimit=agentDhcpv6SnoopingIfRateLimit, agentServicePortProtocolDhcpRenew=agentServicePortProtocolDhcpRenew, agentDynamicIpsgBindingMacAddr=agentDynamicIpsgBindingMacAddr, agentDynamicIpv6sgBindingTable=agentDynamicIpv6sgBindingTable, agentIASUserStatus=agentIASUserStatus, agentSwitchSnoopingQuerierExpiryInterval=agentSwitchSnoopingQuerierExpiryInterval, agentStpMstPortLoopInconsistentState=agentStpMstPortLoopInconsistentState, agentSwitchSnoopingQuerierCfgEntry=agentSwitchSnoopingQuerierCfgEntry, agentPortVoiceVlanDataPriorityMode=agentPortVoiceVlanDataPriorityMode, agentSwitchStaticMacFilteringStatus=agentSwitchStaticMacFilteringStatus, agentCmdsAccountingListIndex=agentCmdsAccountingListIndex, agentStaticDsv6BindingIpAddr=agentStaticDsv6BindingIpAddr, agentStpCstPortTCNGuard=agentStpCstPortTCNGuard, agentLagSummaryPortCounter=agentLagSummaryPortCounter, agentSwitchSnoopSSMGroupLastReporter=agentSwitchSnoopSSMGroupLastReporter, agentDhcpSnoopingAdminMode=agentDhcpSnoopingAdminMode, agentStpMstPortTransitionsIntoLoopInconsistentState=agentStpMstPortTransitionsIntoLoopInconsistentState, agentSwitchVlanMacAssociationGroup=agentSwitchVlanMacAssociationGroup, agentLinkDependencyGroupTable=agentLinkDependencyGroupTable, agentSwitchProtectedPortGroupName=agentSwitchProtectedPortGroupName, agentNetworkDhcp6SOLICITMessagesSent=agentNetworkDhcp6SOLICITMessagesSent, agentPortMirrorMacAccessListNumber=agentPortMirrorMacAccessListNumber, agentSwitchSnoopingQuerierVlanAdminMode=agentSwitchSnoopingQuerierVlanAdminMode, agentNetworkDhcp6RELEASEMessagesSent=agentNetworkDhcp6RELEASEMessagesSent, agentLoginSessionTable=agentLoginSessionTable, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentPortVoiceVlanMode=agentPortVoiceVlanMode, agentTransferUploadFilename=agentTransferUploadFilename, agentPortMirroringMode=agentPortMirroringMode, agentSwitchConflictIPAddr=agentSwitchConflictIPAddr, agentInventoryAdditionalPackages=agentInventoryAdditionalPackages, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentSwitchCpuProcessRisingThreshold=agentSwitchCpuProcessRisingThreshold, agentPasswordManagementConfigGroup=agentPasswordManagementConfigGroup, agentPortBroadcastControlThresholdUnit=agentPortBroadcastControlThresholdUnit, agentPortVoiceVlanUntagged=agentPortVoiceVlanUntagged, agentExecAccountingGroup=agentExecAccountingGroup, agentPortPhysicalStatus=agentPortPhysicalStatus, Ipv6AddressIfIdentifier=Ipv6AddressIfIdentifier, agentDigitalSignatureVerifyMode=agentDigitalSignatureVerifyMode, stpInstanceLoopInconsistentStartTrap=stpInstanceLoopInconsistentStartTrap, agentSwitchSnoopingIntfVlanIDs=agentSwitchSnoopingIntfVlanIDs, agentDhcpSnoopingIfConfigTable=agentDhcpSnoopingIfConfigTable, fanFailureTrap=fanFailureTrap, agentDynamicAuthorizationClientEncryptServerKey=agentDynamicAuthorizationClientEncryptServerKey, agentCableTesterMinimumCableLength=agentCableTesterMinimumCableLength, agentTransferDownloadRemoteFilename=agentTransferDownloadRemoteFilename, agentTransferUploadUsername=agentTransferUploadUsername, agentServicePortDhcp6MalformedMessagesReceived=agentServicePortDhcp6MalformedMessagesReceived, agentSwitchUnicastControlThreshold=agentSwitchUnicastControlThreshold, agentStaticIpv6sgBindingVlanId=agentStaticIpv6sgBindingVlanId, agentAuthenticationListMethod4=agentAuthenticationListMethod4, agentSnmpTrapServicePortSrcInterface=agentSnmpTrapServicePortSrcInterface, agentStaticDsv6BindingEntry=agentStaticDsv6BindingEntry, agentSwitchSnoopingVlanGroupMembershipInterval=agentSwitchSnoopingVlanGroupMembershipInterval, agentAuthenticationListCreate=agentAuthenticationListCreate, agentSwitchCpuProcessFallingThreshold=agentSwitchCpuProcessFallingThreshold, agentSwitchCpuProcessMemAvailable=agentSwitchCpuProcessMemAvailable, agentDhcpClientOptionsConfigGroup=agentDhcpClientOptionsConfigGroup, agentSwitchSnoopSSMFDBEntry=agentSwitchSnoopSSMFDBEntry, agentSwitchMFDBEntry=agentSwitchMFDBEntry, agentNetworkSubnetMask=agentNetworkSubnetMask, agentLinkDependencyGroupAction=agentLinkDependencyGroupAction, agentSwitchCpuProcessId=agentSwitchCpuProcessId, agentPortMulticastControlThresholdUnit=agentPortMulticastControlThresholdUnit, broadcastStormEndTrap=broadcastStormEndTrap, agentPrivateVlanIntfAssocOperational=agentPrivateVlanIntfAssocOperational, agentDhcpv6SnoopingRemoteIpAddr=agentDhcpv6SnoopingRemoteIpAddr, agentLagDetailedPortStatus=agentLagDetailedPortStatus, agentSwitchMbufAllocFails=agentSwitchMbufAllocFails, agentSwitchStaticMacFilteringVlanId=agentSwitchStaticMacFilteringVlanId, agentDhcpv6SnoopingStatsTable=agentDhcpv6SnoopingStatsTable, agentSwitchMFDBSummaryMacAddress=agentSwitchMFDBSummaryMacAddress, agentCLIConfigGroup=agentCLIConfigGroup, agentSwitchSnoopSSMGroupAddress=agentSwitchSnoopSSMGroupAddress, agentSwitchMFDBSummaryEntry=agentSwitchMFDBSummaryEntry, agentExecAuthorizationListMethod2=agentExecAuthorizationListMethod2, agentCmdsAccountingListCreate=agentCmdsAccountingListCreate, agentStpMstTimeSinceTopologyChange=agentStpMstTimeSinceTopologyChange, agentTrapLogTotal=agentTrapLogTotal, agentClassOfServicePortClass=agentClassOfServicePortClass, agentDhcpL2RelayStatsReset=agentDhcpL2RelayStatsReset, agentSwitchMFDBSummaryVlanId=agentSwitchMFDBSummaryVlanId, agentExecAuthorizationGroup=agentExecAuthorizationGroup, agentDhcpv6SnoopingConfigGroup=agentDhcpv6SnoopingConfigGroup, agentStaticIpv6sgBindingTable=agentStaticIpv6sgBindingTable, agentPasswordManagementHistory=agentPasswordManagementHistory, agentHTTPWebMode=agentHTTPWebMode, agentNetworkIpv6Gateway=agentNetworkIpv6Gateway, agentStpAdminMode=agentStpAdminMode, agentStpMstBridgeIdentifier=agentStpMstBridgeIdentifier, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentNetworkDhcp6ClientDuid=agentNetworkDhcp6ClientDuid, agentSwitchSnoopingIntfMRPExpirationTime=agentSwitchSnoopingIntfMRPExpirationTime, agentPasswordMgmtStrengthExcludeKeyword=agentPasswordMgmtStrengthExcludeKeyword, agentDhcpv6SnoopingInvalidClientMessages=agentDhcpv6SnoopingInvalidClientMessages, agentDhcpv6SnoopingVlanConfigEntry=agentDhcpv6SnoopingVlanConfigEntry, agentAuthenticationListMethod1=agentAuthenticationListMethod1, agentSwitchSnoopSSMSrcListIfIndex=agentSwitchSnoopSSMSrcListIfIndex, agentPortStatsRateOverflowPacketsPerSecondRx=agentPortStatsRateOverflowPacketsPerSecondRx, agentPortMirrorSessionNum=agentPortMirrorSessionNum, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentDhcpSnoopingStatsEntry=agentDhcpSnoopingStatsEntry, agentPrivateVlanTable=agentPrivateVlanTable, agentStpPortStatsStpBpduTx=agentStpPortStatsStpBpduTx, agentStpConfigFormatSelector=agentStpConfigFormatSelector, agentStpMstDesignatedBridgeId=agentStpMstDesignatedBridgeId, agentDynamicDsBindingVlanId=agentDynamicDsBindingVlanId, agentSwitchSnoopSSMFDBExcludePortList=agentSwitchSnoopSSMFDBExcludePortList, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentDhcpv6SnoopingIfLogEnable=agentDhcpv6SnoopingIfLogEnable, agentTransferUploadServerIP=agentTransferUploadServerIP, agentNextSelectedImage=agentNextSelectedImage, agentPortUnicastControlThresholdUnit=agentPortUnicastControlThresholdUnit, agentDhcpv6SnoopingVerifyMac=agentDhcpv6SnoopingVerifyMac, agentStpMstPortTransitionsOutOfLoopInconsistentState=agentStpMstPortTransitionsOutOfLoopInconsistentState, agentPrivateVlanAssociate=agentPrivateVlanAssociate, agentExecAuthorizationListName=agentExecAuthorizationListName, agentSwitchVlanStaticMrouterAdminMode=agentSwitchVlanStaticMrouterAdminMode, agentStpPortStatsMstpBpduTx=agentStpPortStatsMstpBpduTx, agentSwitchVoiceVlanDeviceEntry=agentSwitchVoiceVlanDeviceEntry, vlanRequestFailureTrap=vlanRequestFailureTrap, Ipv6IfIndexOrZero=Ipv6IfIndexOrZero, agentDynamicIpsgBindingVlanId=agentDynamicIpsgBindingVlanId, agentDynamicIpsgBindingIfIndex=agentDynamicIpsgBindingIfIndex, agentPortDefaultType=agentPortDefaultType, agentDhcpSnoopingRemoteIpAddr=agentDhcpSnoopingRemoteIpAddr, agentPasswordManagementStrengthExcludeKeywordTable=agentPasswordManagementStrengthExcludeKeywordTable, agentLinkDependencyGroupUpstreamPortMask=agentLinkDependencyGroupUpstreamPortMask, agentNetworkWebMode=agentNetworkWebMode, agentSwitchSnoopingCfgEntry=agentSwitchSnoopingCfgEntry, agentStpPortTable=agentStpPortTable, agentPasswordMgmtLastPasswordSetResult=agentPasswordMgmtLastPasswordSetResult, agentSwitchMbufsTotal=agentSwitchMbufsTotal, agentProbePortIfIndex=agentProbePortIfIndex, agentStaticIpsgBindingIfIndex=agentStaticIpsgBindingIfIndex, agentDynamicAuthorizationClientTable=agentDynamicAuthorizationClientTable, agentSwitchSnoopingIntfGroup=agentSwitchSnoopingIntfGroup, agentExecAccountingListStatus=agentExecAccountingListStatus, agentCmdsAuthorizationListStatus=agentCmdsAuthorizationListStatus, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentIASUserConfigTable=agentIASUserConfigTable, agentNetworkIpv6AdminMode=agentNetworkIpv6AdminMode, agentLoginSessionUserName=agentLoginSessionUserName, agentPortStatsRateOverflowBitsPerSecondRx=agentPortStatsRateOverflowBitsPerSecondRx, agentUserAccessLevel=agentUserAccessLevel, agentIASUserConfigGroup=agentIASUserConfigGroup, agentPortSTPState=agentPortSTPState, agentSwitchVlanStaticMrouterEntry=agentSwitchVlanStaticMrouterEntry, agentDynamicDsv6BindingIpAddr=agentDynamicDsv6BindingIpAddr, agentExecAuthorizationListIndex=agentExecAuthorizationListIndex)
