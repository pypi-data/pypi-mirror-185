#
# PySNMP MIB module FROGFOOT-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://data/mibs/FROGFOOT-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Tue Jan 28 12:32:04 2020
# On host nerk platform Linux version 5.3.15-300.fc31.x86_64 by user spider
# Using Python version 3.7.5 (default, Oct 17 2019, 12:16:48) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, iso, TimeTicks, enterprises, Counter64, Integer32, NotificationType, Counter32, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "iso", "TimeTicks", "enterprises", "Counter64", "Integer32", "NotificationType", "Counter32", "Unsigned32", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
resources = ModuleIdentity((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1))
if mibBuilder.loadTexts: resources.setLastUpdated('200407170000Z')
if mibBuilder.loadTexts: resources.setOrganization('Frogfoot Networks')
if mibBuilder.loadTexts: resources.setContactInfo(' Abraham van der Merwe Postal: Frogfoot Networks CC P.O. Box 23618 Claremont Cape Town 7735 South Africa Phone: +27 82 565 4451 Email: abz@frogfoot.net')
if mibBuilder.loadTexts: resources.setDescription('The MIB module to describe system resources.')
frogfoot = MibIdentifier((1, 3, 6, 1, 4, 1, 10002))
servers = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1))
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1))
swap = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 2))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3))
load = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4))
resMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31))
resMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 1))
resConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2))
resGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1))
resCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 2))
class TableIndex(TextualConvention, Integer32):
    description = 'A unique value, greater than zero. It is recommended that values are assigned contiguously starting from 1.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

memTotal = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotal.setStatus('current')
if mibBuilder.loadTexts: memTotal.setDescription('Total usable physical memory (in KB)')
memFree = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memFree.setStatus('current')
if mibBuilder.loadTexts: memFree.setDescription('Available physical memory (in KB)')
memBuffer = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBuffer.setStatus('current')
if mibBuilder.loadTexts: memBuffer.setDescription('Physical memory used by buffers (in KB)')
memCache = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCache.setStatus('current')
if mibBuilder.loadTexts: memCache.setDescription('Physical memory used for caching (in KB)')
swapTotal = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapTotal.setStatus('current')
if mibBuilder.loadTexts: swapTotal.setDescription('Total swap space size (in KB)')
swapFree = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapFree.setStatus('current')
if mibBuilder.loadTexts: swapFree.setDescription('Swap space still available (in KB)')
diskNumber = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('current')
if mibBuilder.loadTexts: diskNumber.setDescription('The number of mounted disks present on this system.')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('current')
if mibBuilder.loadTexts: diskTable.setDescription('A table of mounted disks on this system.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "FROGFOOT-RESOURCES-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('current')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry containing management information applicable to a particular mounted disk on the system.')
diskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 1), TableIndex())
if mibBuilder.loadTexts: diskIndex.setStatus('current')
if mibBuilder.loadTexts: diskIndex.setDescription('A unique value, greater than zero, for each disk on the system. It is recommended that values are assigned contiguously starting from 1.')
diskDev = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDev.setStatus('current')
if mibBuilder.loadTexts: diskDev.setDescription('A textual string containing the disk device name.')
diskDir = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDir.setStatus('current')
if mibBuilder.loadTexts: diskDir.setDescription('A textual string containing the disk mount point.')
diskFSType = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("unknown", 0), ("adfs", 1), ("affs", 2), ("coda", 3), ("cramfs", 4), ("ext2", 5), ("hpfs", 6), ("iso9660", 7), ("jffs2", 8), ("jfs", 9), ("minix", 10), ("msdos", 11), ("ncpfs", 12), ("nfs", 13), ("ntfs", 14), ("qnx4", 15), ("reiserfs", 16), ("romfs", 17), ("smbfs", 18), ("sysv", 19), ("tmpfs", 20), ("udf", 21), ("ufs", 22), ("vxfs", 23), ("xfs", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFSType.setStatus('current')
if mibBuilder.loadTexts: diskFSType.setDescription('The type of file system present on the disk. This does not include fake file systems such as the proc file system, devfs, etc. Additional types may be assigned by Frogfoot Networks in the future.')
diskTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTotal.setStatus('current')
if mibBuilder.loadTexts: diskTotal.setDescription('Total space on disk (in MB)')
diskFree = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFree.setStatus('current')
if mibBuilder.loadTexts: diskFree.setDescription('Disk space still available (in MB)')
loadNumber = MibScalar((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadNumber.setStatus('current')
if mibBuilder.loadTexts: loadNumber.setDescription('The number of load averages stored in the load average table.')
loadTable = MibTable((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2), )
if mibBuilder.loadTexts: loadTable.setStatus('current')
if mibBuilder.loadTexts: loadTable.setDescription('Load average information.')
loadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1), ).setIndexNames((0, "FROGFOOT-RESOURCES-MIB", "loadIndex"))
if mibBuilder.loadTexts: loadEntry.setStatus('current')
if mibBuilder.loadTexts: loadEntry.setDescription('An entry containing load average information.')
loadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1, 1), TableIndex())
if mibBuilder.loadTexts: loadIndex.setStatus('current')
if mibBuilder.loadTexts: loadIndex.setDescription('A unique value, greater than zero, for each load average stored.')
loadDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadDescr.setStatus('current')
if mibBuilder.loadTexts: loadDescr.setDescription('A description of each load average.')
loadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadValue.setStatus('current')
if mibBuilder.loadTexts: loadValue.setDescription('The 1,5 and 10 minute load averages. These values are stored as a percentage of processor load.')
resCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 2, 1)).setObjects(("FROGFOOT-RESOURCES-MIB", "resMemGroup"), ("FROGFOOT-RESOURCES-MIB", "resSwapGroup"), ("FROGFOOT-RESOURCES-MIB", "resDiskGroup"), ("FROGFOOT-RESOURCES-MIB", "resLoadGroup"), ("FROGFOOT-RESOURCES-MIB", "resMemGroup"), ("FROGFOOT-RESOURCES-MIB", "resSwapGroup"), ("FROGFOOT-RESOURCES-MIB", "resDiskGroup"), ("FROGFOOT-RESOURCES-MIB", "resLoadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resCompliance = resCompliance.setStatus('current')
if mibBuilder.loadTexts: resCompliance.setDescription('The compliance statement for SNMP entities which have system resources such as volatile and non-volatile storage.')
resMemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 1)).setObjects(("FROGFOOT-RESOURCES-MIB", "memTotal"), ("FROGFOOT-RESOURCES-MIB", "memFree"), ("FROGFOOT-RESOURCES-MIB", "memBuffer"), ("FROGFOOT-RESOURCES-MIB", "memCache"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resMemGroup = resMemGroup.setStatus('current')
if mibBuilder.loadTexts: resMemGroup.setDescription('A collection of objects providing information specific to volatile system storage.')
resSwapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 2)).setObjects(("FROGFOOT-RESOURCES-MIB", "swapTotal"), ("FROGFOOT-RESOURCES-MIB", "swapFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resSwapGroup = resSwapGroup.setStatus('current')
if mibBuilder.loadTexts: resSwapGroup.setDescription('A collection of objects providing information specific to storage used for swapping pages to disk.')
resDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 3)).setObjects(("FROGFOOT-RESOURCES-MIB", "diskNumber"), ("FROGFOOT-RESOURCES-MIB", "diskDev"), ("FROGFOOT-RESOURCES-MIB", "diskDir"), ("FROGFOOT-RESOURCES-MIB", "diskFSType"), ("FROGFOOT-RESOURCES-MIB", "diskTotal"), ("FROGFOOT-RESOURCES-MIB", "diskFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resDiskGroup = resDiskGroup.setStatus('current')
if mibBuilder.loadTexts: resDiskGroup.setDescription('A collection of objects providing information specific to non-volatile system storage.')
resLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10002, 1, 1, 1, 31, 2, 1, 4)).setObjects(("FROGFOOT-RESOURCES-MIB", "loadNumber"), ("FROGFOOT-RESOURCES-MIB", "loadDescr"), ("FROGFOOT-RESOURCES-MIB", "loadValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resLoadGroup = resLoadGroup.setStatus('current')
if mibBuilder.loadTexts: resLoadGroup.setDescription('A collection of objects providing information specific to processor load averages.')
mibBuilder.exportSymbols("FROGFOOT-RESOURCES-MIB", resources=resources, diskNumber=diskNumber, resCompliances=resCompliances, PYSNMP_MODULE_ID=resources, system=system, resGroups=resGroups, loadNumber=loadNumber, frogfoot=frogfoot, memBuffer=memBuffer, diskIndex=diskIndex, loadValue=loadValue, storage=storage, memTotal=memTotal, memory=memory, loadTable=loadTable, resMIBObjects=resMIBObjects, swapFree=swapFree, diskEntry=diskEntry, diskDev=diskDev, servers=servers, resMemGroup=resMemGroup, diskTable=diskTable, resMIB=resMIB, loadEntry=loadEntry, diskTotal=diskTotal, swapTotal=swapTotal, swap=swap, loadDescr=loadDescr, diskFree=diskFree, memCache=memCache, resLoadGroup=resLoadGroup, diskDir=diskDir, TableIndex=TableIndex, load=load, resSwapGroup=resSwapGroup, resDiskGroup=resDiskGroup, memFree=memFree, resCompliance=resCompliance, resConformance=resConformance, diskFSType=diskFSType, loadIndex=loadIndex)
