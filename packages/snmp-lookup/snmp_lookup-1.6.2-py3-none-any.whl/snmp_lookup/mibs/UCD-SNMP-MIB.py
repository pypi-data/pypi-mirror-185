#
# PySNMP MIB module UCD-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://data/mibs/UCD-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed Jan 29 17:31:16 2020
# On host nerk platform Linux version 5.3.15-300.fc31.x86_64 by user spider
# Using Python version 3.7.5 (default, Oct 17 2019, 12:16:48) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, NotificationType, Gauge32, TimeTicks, Unsigned32, Counter64, Integer32, Bits, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Opaque, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "Unsigned32", "Counter64", "Integer32", "Bits", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Opaque", "enterprises", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ucdavis = ModuleIdentity((1, 3, 6, 1, 4, 1, 2021))
ucdavis.setRevisions(('2016-06-10 00:00', '2014-07-31 00:00', '2011-05-14 00:00', '2009-01-19 00:00', '2006-11-22 00:00', '2004-04-07 00:00', '2002-09-05 00:00', '2001-09-20 00:00', '2001-01-17 00:00', '1999-12-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ucdavis.setRevisionsDescriptions(('New 64-bit memory objects', 'New object for number of CPUs as counted by the agent', 'New objects for monitoring CPU Steal, Guest and Nice values', 'New 64-bit objects for monitoring large disk usage', 'Clarify behaviour of objects in the memory & systemStats groups (including updated versions of malnamed mem*Text objects). Define suitable TCs to describe error reporting/fix behaviour.', 'Added ssCpuRawSoftIRQ for Linux (2.6) and forgotten raw swap counters.', 'Deprecate the non-raw objects.', 'Group to monitor log files', 'Added raw CPU and IO counters.', 'SMIv2 version converted from older MIB definitions.',))
if mibBuilder.loadTexts: ucdavis.setLastUpdated('201606100000Z')
if mibBuilder.loadTexts: ucdavis.setOrganization('University of California, Davis')
if mibBuilder.loadTexts: ucdavis.setContactInfo('This mib is no longer being maintained by the University of California and is now in life-support-mode and being maintained by the net-snmp project. The best place to write for public questions about the net-snmp-coders mailing list at net-snmp-coders@lists.sourceforge.net. postal: Wes Hardaker P.O. Box 382 Davis CA 95617 email: net-snmp-coders@lists.sourceforge.net ')
if mibBuilder.loadTexts: ucdavis.setDescription('This file defines the private UCD SNMP MIB extensions.')
ucdInternal = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 12))
ucdExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 13))
ucdSnmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250))
hpux9 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 1))
sunos4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 2))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 3))
osf = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 4))
ultrix = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 5))
hpux10 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 6))
netbsd1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 7))
freebsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 8))
irix = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 9))
linux = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 10))
bsdi = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 11))
openbsd = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 12))
win32 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 13))
hpux11 = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 14))
aix = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 15))
macosx = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 16))
dragonfly = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 17))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 250, 255))
class Float(TextualConvention, Opaque):
    description = "A single precision floating-point number. The semantics and encoding are identical for type 'single' defined in IEEE Standard for Binary Floating-Point, ANSI/IEEE Std 754-1985. The value is restricted to the BER serialization of the following ASN.1 type: FLOATTYPE ::= [120] IMPLICIT FloatType (note: the value 120 is the sum of '30'h and '48'h) The BER serialization of the length for values of this type must use the definite length, short encoding form. For example, the BER serialization of value 123 of type FLOATTYPE is '9f780442f60000'h. (The tag is '9f78'h; the length is '04'h; and the value is '42f60000'h.) The BER serialization of value '9f780442f60000'h of data type Opaque is '44079f780442f60000'h. (The tag is '44'h; the length is '07'h; and the value is '9f780442f60000'h."
    status = 'current'
    subtypeSpec = Opaque.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

class UCDErrorFlag(TextualConvention, Integer32):
    description = 'Represents a possible error condition'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noError", 0), ("error", 1))

class UCDErrorFix(TextualConvention, Integer32):
    description = "Represents a 'push-button' object, to invoke a suitable configured action. Will always return 0 when read."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noError", 0), ("runFix", 1))

prTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 2), )
if mibBuilder.loadTexts: prTable.setStatus('current')
if mibBuilder.loadTexts: prTable.setDescription("A table containing information on running programs/daemons configured for monitoring in the snmpd.conf file of the agent. Processes violating the number of running processes required by the agent's configuration file are flagged with numerical and textual errors.")
prEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 2, 1), ).setIndexNames((0, "UCD-SNMP-MIB", "prIndex"))
if mibBuilder.loadTexts: prEntry.setStatus('current')
if mibBuilder.loadTexts: prEntry.setDescription('An entry containing a process and its statistics.')
prIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prIndex.setStatus('current')
if mibBuilder.loadTexts: prIndex.setDescription('Reference Index for each observed process.')
prNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prNames.setStatus('current')
if mibBuilder.loadTexts: prNames.setDescription("The process name we're counting/checking on.")
prMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prMin.setStatus('current')
if mibBuilder.loadTexts: prMin.setDescription('The minimum number of processes that should be running. An error flag is generated if the number of running processes is < the minimum.')
prMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prMax.setStatus('current')
if mibBuilder.loadTexts: prMax.setDescription('The maximum number of processes that should be running. An error flag is generated if the number of running processes is > the maximum.')
prCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prCount.setStatus('current')
if mibBuilder.loadTexts: prCount.setDescription('The number of current processes running with the name in question.')
prErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prErrorFlag.setStatus('current')
if mibBuilder.loadTexts: prErrorFlag.setDescription('A Error flag to indicate trouble with a process. It goes to 1 if there is an error, 0 if no error.')
prErrMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prErrMessage.setStatus('current')
if mibBuilder.loadTexts: prErrMessage.setDescription('An error message describing the problem (if one exists).')
prErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 102), UCDErrorFix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prErrFix.setStatus('current')
if mibBuilder.loadTexts: prErrFix.setDescription('Setting this to one will try to fix the problem if the agent has been configured with a script to call to attempt to fix problems automatically using remote snmp operations.')
prErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 2, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prErrFixCmd.setStatus('current')
if mibBuilder.loadTexts: prErrFixCmd.setDescription('The command that gets run when the prErrFix column is set to 1.')
extTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 8), )
if mibBuilder.loadTexts: extTable.setStatus('current')
if mibBuilder.loadTexts: extTable.setDescription("A table of extensible commands returning output and result codes. These commands are configured via the agent's snmpd.conf file.")
extEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 8, 1), ).setIndexNames((0, "UCD-SNMP-MIB", "extIndex"))
if mibBuilder.loadTexts: extEntry.setStatus('current')
if mibBuilder.loadTexts: extEntry.setDescription('An entry containing an extensible script/program and its output.')
extIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extIndex.setStatus('current')
if mibBuilder.loadTexts: extIndex.setDescription('Reference Index for extensible scripts. Simply an integer row number.')
extNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extNames.setStatus('current')
if mibBuilder.loadTexts: extNames.setDescription('A Short, one name description of the extensible command.')
extCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extCommand.setStatus('current')
if mibBuilder.loadTexts: extCommand.setDescription('The command line to be executed.')
extResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extResult.setStatus('current')
if mibBuilder.loadTexts: extResult.setDescription('The result code (exit status) from the executed command.')
extOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extOutput.setStatus('current')
if mibBuilder.loadTexts: extOutput.setDescription('The first line of output of the executed command.')
extErrFix = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 102), UCDErrorFix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extErrFix.setStatus('current')
if mibBuilder.loadTexts: extErrFix.setDescription('Setting this to one will try to fix the problem if the agent has been configured with a script to call to attempt to fix problems automatically using remote snmp operations.')
extErrFixCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 8, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extErrFixCmd.setStatus('current')
if mibBuilder.loadTexts: extErrFixCmd.setDescription('The command that gets run when the extErrFix column is set to 1.')
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 4))
memIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memIndex.setStatus('current')
if mibBuilder.loadTexts: memIndex.setDescription('Bogus Index. This should always return the integer 0.')
memErrorName = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memErrorName.setStatus('current')
if mibBuilder.loadTexts: memErrorName.setDescription("Bogus Name. This should always return the string 'swap'.")
memTotalSwap = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 3), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalSwap.setStatus('current')
if mibBuilder.loadTexts: memTotalSwap.setDescription('The total amount of swap space configured for this host.')
memAvailSwap = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 4), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvailSwap.setStatus('current')
if mibBuilder.loadTexts: memAvailSwap.setDescription('The amount of swap space currently unused or available.')
memTotalReal = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 5), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalReal.setStatus('current')
if mibBuilder.loadTexts: memTotalReal.setDescription('The total amount of real/physical memory installed on this host.')
memAvailReal = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 6), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvailReal.setStatus('current')
if mibBuilder.loadTexts: memAvailReal.setDescription('The amount of real/physical memory currently unused or available.')
memTotalSwapTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 7), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalSwapTXT.setStatus('current')
if mibBuilder.loadTexts: memTotalSwapTXT.setDescription('The total amount of swap space or virtual memory allocated for text pages on this host. This object will not be implemented on hosts where the underlying operating system does not distinguish text pages from other uses of swap space or virtual memory.')
memAvailSwapTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 8), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvailSwapTXT.setStatus('deprecated')
if mibBuilder.loadTexts: memAvailSwapTXT.setDescription("The amount of swap space or virtual memory currently being used by text pages on this host. This object will not be implemented on hosts where the underlying operating system does not distinguish text pages from other uses of swap space or virtual memory. Note that (despite the name), this value reports the amount used, rather than the amount free or available for use. For clarity, this object is being deprecated in favour of 'memUsedSwapTXT(16).")
memTotalRealTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 9), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalRealTXT.setStatus('current')
if mibBuilder.loadTexts: memTotalRealTXT.setDescription('The total amount of real/physical memory allocated for text pages on this host. This object will not be implemented on hosts where the underlying operating system does not distinguish text pages from other uses of physical memory.')
memAvailRealTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 10), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvailRealTXT.setStatus('deprecated')
if mibBuilder.loadTexts: memAvailRealTXT.setDescription("The amount of real/physical memory currently being used by text pages on this host. This object will not be implemented on hosts where the underlying operating system does not distinguish text pages from other uses of physical memory. Note that (despite the name), this value reports the amount used, rather than the amount free or available for use. For clarity, this object is being deprecated in favour of 'memUsedRealTXT(17).")
memTotalFree = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 11), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalFree.setStatus('current')
if mibBuilder.loadTexts: memTotalFree.setDescription('The total amount of memory free or available for use on this host. This value typically covers both real memory and swap space or virtual memory.')
memMinimumSwap = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 12), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memMinimumSwap.setStatus('current')
if mibBuilder.loadTexts: memMinimumSwap.setDescription("The minimum amount of swap space expected to be kept free or available during normal operation of this host. If this value (as reported by 'memAvailSwap(4)') falls below the specified level, then 'memSwapError(100)' will be set to 1 and an error message made available via 'memSwapErrorMsg(101)'.")
memShared = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 13), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memShared.setStatus('current')
if mibBuilder.loadTexts: memShared.setDescription('The total amount of real or virtual memory currently allocated for use as shared memory. This object will not be implemented on hosts where the underlying operating system does not explicitly identify memory as specifically reserved for this purpose.')
memBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 14), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memBuffer.setStatus('current')
if mibBuilder.loadTexts: memBuffer.setDescription('The total amount of real or virtual memory currently allocated for use as memory buffers. This object will not be implemented on hosts where the underlying operating system does not explicitly identify memory as specifically reserved for this purpose.')
memCached = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 15), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memCached.setStatus('current')
if mibBuilder.loadTexts: memCached.setDescription('The total amount of real or virtual memory currently allocated for use as cached memory. This object will not be implemented on hosts where the underlying operating system does not explicitly identify memory as specifically reserved for this purpose.')
memUsedSwapTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 16), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memUsedSwapTXT.setStatus('current')
if mibBuilder.loadTexts: memUsedSwapTXT.setDescription('The amount of swap space or virtual memory currently being used by text pages on this host. This object will not be implemented on hosts where the underlying operating system does not distinguish text pages from other uses of swap space or virtual memory.')
memUsedRealTXT = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 17), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memUsedRealTXT.setStatus('current')
if mibBuilder.loadTexts: memUsedRealTXT.setDescription('The amount of real/physical memory currently being used by text pages on this host. This object will not be implemented on hosts where the underlying operating system does not distinguish text pages from other uses of physical memory.')
memTotalSwapX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 18), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalSwapX.setStatus('current')
if mibBuilder.loadTexts: memTotalSwapX.setDescription('The total amount of swap space configured for this host.')
memAvailSwapX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 19), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvailSwapX.setStatus('current')
if mibBuilder.loadTexts: memAvailSwapX.setDescription('The amount of swap space currently unused or available.')
memTotalRealX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 20), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalRealX.setStatus('current')
if mibBuilder.loadTexts: memTotalRealX.setDescription('The total amount of real/physical memory installed on this host.')
memAvailRealX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 21), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvailRealX.setStatus('current')
if mibBuilder.loadTexts: memAvailRealX.setDescription('The amount of real/physical memory currently unused or available.')
memTotalFreeX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 22), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memTotalFreeX.setStatus('current')
if mibBuilder.loadTexts: memTotalFreeX.setDescription('The total amount of memory free or available for use on this host. This value typically covers both real memory and swap space or virtual memory.')
memMinimumSwapX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 23), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memMinimumSwapX.setStatus('current')
if mibBuilder.loadTexts: memMinimumSwapX.setDescription("The minimum amount of swap space expected to be kept free or available during normal operation of this host. If this value (as reported by 'memAvailSwap(4)') falls below the specified level, then 'memSwapError(100)' will be set to 1 and an error message made available via 'memSwapErrorMsg(101)'.")
memSharedX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 24), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memSharedX.setStatus('current')
if mibBuilder.loadTexts: memSharedX.setDescription('The total amount of real or virtual memory currently allocated for use as shared memory. This object will not be implemented on hosts where the underlying operating system does not explicitly identify memory as specifically reserved for this purpose.')
memBufferX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 25), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memBufferX.setStatus('current')
if mibBuilder.loadTexts: memBufferX.setDescription('The total amount of real or virtual memory currently allocated for use as memory buffers. This object will not be implemented on hosts where the underlying operating system does not explicitly identify memory as specifically reserved for this purpose.')
memCachedX = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 26), CounterBasedGauge64()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: memCachedX.setStatus('current')
if mibBuilder.loadTexts: memCachedX.setDescription('The total amount of real or virtual memory currently allocated for use as cached memory. This object will not be implemented on hosts where the underlying operating system does not explicitly identify memory as specifically reserved for this purpose.')
memSwapError = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSwapError.setStatus('current')
if mibBuilder.loadTexts: memSwapError.setDescription("Indicates whether the amount of available swap space (as reported by 'memAvailSwap(4)'), is less than the desired minimum (specified by 'memMinimumSwap(12)').")
memSwapErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 2021, 4, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSwapErrorMsg.setStatus('current')
if mibBuilder.loadTexts: memSwapErrorMsg.setDescription("Describes whether the amount of available swap space (as reported by 'memAvailSwap(4)'), is less than the desired minimum (specified by 'memMinimumSwap(12)').")
dskTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 9), )
if mibBuilder.loadTexts: dskTable.setStatus('current')
if mibBuilder.loadTexts: dskTable.setDescription('Disk watching information. Partions to be watched are configured by the snmpd.conf file of the agent.')
dskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 9, 1), ).setIndexNames((0, "UCD-SNMP-MIB", "dskIndex"))
if mibBuilder.loadTexts: dskEntry.setStatus('current')
if mibBuilder.loadTexts: dskEntry.setDescription('An entry containing a disk and its statistics.')
dskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskIndex.setStatus('current')
if mibBuilder.loadTexts: dskIndex.setDescription('Integer reference number (row number) for the disk mib.')
dskPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskPath.setStatus('current')
if mibBuilder.loadTexts: dskPath.setDescription('Path where the disk is mounted.')
dskDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskDevice.setStatus('current')
if mibBuilder.loadTexts: dskDevice.setDescription('Path of the device for the partition')
dskMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskMinimum.setStatus('current')
if mibBuilder.loadTexts: dskMinimum.setDescription("Minimum space required on the disk (in kBytes) before the errors are triggered. Either this or dskMinPercent is configured via the agent's snmpd.conf file.")
dskMinPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskMinPercent.setStatus('current')
if mibBuilder.loadTexts: dskMinPercent.setDescription("Percentage of minimum space required on the disk before the errors are triggered. Either this or dskMinimum is configured via the agent's snmpd.conf file.")
dskTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskTotal.setStatus('current')
if mibBuilder.loadTexts: dskTotal.setDescription('Total size of the disk/partion (kBytes). For large disks (>2Tb), this value will latch at INT32_MAX (2147483647).')
dskAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskAvail.setStatus('current')
if mibBuilder.loadTexts: dskAvail.setDescription('Available space on the disk. For large lightly-used disks (>2Tb), this value will latch at INT32_MAX (2147483647).')
dskUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskUsed.setStatus('current')
if mibBuilder.loadTexts: dskUsed.setDescription('Used space on the disk. For large heavily-used disks (>2Tb), this value will latch at INT32_MAX (2147483647).')
dskPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskPercent.setStatus('current')
if mibBuilder.loadTexts: dskPercent.setDescription('Percentage of space used on disk')
dskPercentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskPercentNode.setStatus('current')
if mibBuilder.loadTexts: dskPercentNode.setDescription('Percentage of inodes used on disk')
dskTotalLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskTotalLow.setStatus('current')
if mibBuilder.loadTexts: dskTotalLow.setDescription('Total size of the disk/partion (kBytes). Together with dskTotalHigh composes 64-bit number.')
dskTotalHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskTotalHigh.setStatus('current')
if mibBuilder.loadTexts: dskTotalHigh.setDescription('Total size of the disk/partion (kBytes). Together with dskTotalLow composes 64-bit number.')
dskAvailLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskAvailLow.setStatus('current')
if mibBuilder.loadTexts: dskAvailLow.setDescription('Available space on the disk (kBytes). Together with dskAvailHigh composes 64-bit number.')
dskAvailHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskAvailHigh.setStatus('current')
if mibBuilder.loadTexts: dskAvailHigh.setDescription('Available space on the disk (kBytes). Together with dskAvailLow composes 64-bit number.')
dskUsedLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskUsedLow.setStatus('current')
if mibBuilder.loadTexts: dskUsedLow.setDescription('Used space on the disk (kBytes). Together with dskUsedHigh composes 64-bit number.')
dskUsedHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskUsedHigh.setStatus('current')
if mibBuilder.loadTexts: dskUsedHigh.setDescription('Used space on the disk (kBytes). Together with dskUsedLow composes 64-bit number.')
dskErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskErrorFlag.setStatus('current')
if mibBuilder.loadTexts: dskErrorFlag.setDescription('Error flag signaling that the disk or partition is under the minimum required space configured for it.')
dskErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 9, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dskErrorMsg.setStatus('current')
if mibBuilder.loadTexts: dskErrorMsg.setDescription('A text description providing a warning and the space left on the disk.')
laTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 10), )
if mibBuilder.loadTexts: laTable.setStatus('current')
if mibBuilder.loadTexts: laTable.setDescription('Load average information.')
laEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 10, 1), ).setIndexNames((0, "UCD-SNMP-MIB", "laIndex"))
if mibBuilder.loadTexts: laEntry.setStatus('current')
if mibBuilder.loadTexts: laEntry.setDescription('An entry containing a load average and its values.')
laIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laIndex.setStatus('current')
if mibBuilder.loadTexts: laIndex.setDescription('reference index/row number for each observed loadave.')
laNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laNames.setStatus('current')
if mibBuilder.loadTexts: laNames.setDescription("The list of loadave names we're watching.")
laLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laLoad.setStatus('current')
if mibBuilder.loadTexts: laLoad.setDescription('The 1,5 and 15 minute load averages (one per row).')
laConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laConfig.setStatus('current')
if mibBuilder.loadTexts: laConfig.setDescription('The watch point for load-averages to signal an error. If the load averages rises above this value, the laErrorFlag below is set.')
laLoadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laLoadInt.setStatus('current')
if mibBuilder.loadTexts: laLoadInt.setDescription('The 1,5 and 15 minute load averages as an integer. This is computed by taking the floating point loadaverage value and multiplying by 100, then converting the value to an integer.')
laLoadFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laLoadFloat.setStatus('current')
if mibBuilder.loadTexts: laLoadFloat.setDescription('The 1,5 and 15 minute load averages as an opaquely wrapped floating point number.')
laErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laErrorFlag.setStatus('current')
if mibBuilder.loadTexts: laErrorFlag.setDescription('A Error flag to indicate the load-average has crossed its threshold value defined in the snmpd.conf file. It is set to 1 if the threshold is crossed, 0 otherwise.')
laErrMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 10, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laErrMessage.setStatus('current')
if mibBuilder.loadTexts: laErrMessage.setDescription('An error message describing the load-average and its surpased watch-point value.')
version = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 100))
versionIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionIndex.setStatus('current')
if mibBuilder.loadTexts: versionIndex.setDescription('Index to mib (always 0)')
versionTag = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionTag.setStatus('current')
if mibBuilder.loadTexts: versionTag.setDescription('CVS tag keyword')
versionDate = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionDate.setStatus('current')
if mibBuilder.loadTexts: versionDate.setDescription('Date string from RCS keyword')
versionCDate = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionCDate.setStatus('current')
if mibBuilder.loadTexts: versionCDate.setDescription('Date string from ctime() ')
versionIdent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionIdent.setStatus('current')
if mibBuilder.loadTexts: versionIdent.setDescription('Id string from RCS keyword')
versionConfigureOptions = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionConfigureOptions.setStatus('current')
if mibBuilder.loadTexts: versionConfigureOptions.setDescription('Options passed to the configure script when this agent was built.')
versionClearCache = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: versionClearCache.setStatus('current')
if mibBuilder.loadTexts: versionClearCache.setDescription('Set to 1 to clear the exec cache, if enabled')
versionUpdateConfig = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: versionUpdateConfig.setStatus('current')
if mibBuilder.loadTexts: versionUpdateConfig.setDescription('Set to 1 to read-read the config file(s).')
versionRestartAgent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: versionRestartAgent.setStatus('current')
if mibBuilder.loadTexts: versionRestartAgent.setDescription('Set to 1 to restart the agent.')
versionSavePersistentData = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: versionSavePersistentData.setStatus('current')
if mibBuilder.loadTexts: versionSavePersistentData.setDescription("Set to 1 to force the agent to save it's persistent data immediately.")
versionDoDebugging = MibScalar((1, 3, 6, 1, 4, 1, 2021, 100, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: versionDoDebugging.setStatus('current')
if mibBuilder.loadTexts: versionDoDebugging.setDescription('Set to 1 to turn debugging statements on in the agent or 0 to turn it off.')
snmperrs = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 101))
snmperrIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmperrIndex.setStatus('current')
if mibBuilder.loadTexts: snmperrIndex.setDescription('Bogus Index for snmperrs (always 0).')
snmperrNames = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmperrNames.setStatus('current')
if mibBuilder.loadTexts: snmperrNames.setDescription('snmp')
snmperrErrorFlag = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmperrErrorFlag.setStatus('current')
if mibBuilder.loadTexts: snmperrErrorFlag.setDescription('A Error flag to indicate trouble with the agent. It goes to 1 if there is an error, 0 if no error.')
snmperrErrMessage = MibScalar((1, 3, 6, 1, 4, 1, 2021, 101, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmperrErrMessage.setStatus('current')
if mibBuilder.loadTexts: snmperrErrMessage.setDescription('An error message describing the problem (if one exists).')
mrTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 102), )
if mibBuilder.loadTexts: mrTable.setStatus('current')
if mibBuilder.loadTexts: mrTable.setDescription("A table displaying all the oid's registered by mib modules in the agent. Since the agent is modular in nature, this lists each module's OID it is responsible for and the name of the module")
mrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 102, 1), ).setIndexNames((1, "UCD-SNMP-MIB", "mrIndex"))
if mibBuilder.loadTexts: mrEntry.setStatus('current')
if mibBuilder.loadTexts: mrEntry.setDescription('An entry containing a registered mib oid.')
mrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 102, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrIndex.setStatus('current')
if mibBuilder.loadTexts: mrIndex.setDescription('The registry slot of a mibmodule.')
mrModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 102, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrModuleName.setStatus('current')
if mibBuilder.loadTexts: mrModuleName.setDescription('The module name that registered this OID.')
systemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 11))
ssIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssIndex.setStatus('current')
if mibBuilder.loadTexts: ssIndex.setDescription('Bogus Index. This should always return the integer 1.')
ssErrorName = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssErrorName.setStatus('current')
if mibBuilder.loadTexts: ssErrorName.setDescription("Bogus Name. This should always return the string 'systemStats'.")
ssSwapIn = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 3), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSwapIn.setStatus('current')
if mibBuilder.loadTexts: ssSwapIn.setDescription('The average amount of memory swapped in from disk, calculated over the last minute.')
ssSwapOut = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 4), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSwapOut.setStatus('current')
if mibBuilder.loadTexts: ssSwapOut.setDescription('The average amount of memory swapped out to disk, calculated over the last minute.')
ssIOSent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 5), Integer32()).setUnits('blocks/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssIOSent.setStatus('deprecated')
if mibBuilder.loadTexts: ssIOSent.setDescription("The average amount of data written to disk or other block device, calculated over the last minute. This object has been deprecated in favour of 'ssIORawSent(57)', which can be used to calculate the same metric, but over any desired time period.")
ssIOReceive = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 6), Integer32()).setUnits('blocks/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssIOReceive.setStatus('deprecated')
if mibBuilder.loadTexts: ssIOReceive.setDescription("The average amount of data read from disk or other block device, calculated over the last minute. This object has been deprecated in favour of 'ssIORawReceived(58)', which can be used to calculate the same metric, but over any desired time period.")
ssSysInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 7), Integer32()).setUnits('interrupts/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSysInterrupts.setStatus('deprecated')
if mibBuilder.loadTexts: ssSysInterrupts.setDescription("The average rate of interrupts processed (including the clock) calculated over the last minute. This object has been deprecated in favour of 'ssRawInterrupts(59)', which can be used to calculate the same metric, but over any desired time period.")
ssSysContext = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 8), Integer32()).setUnits('switches/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: ssSysContext.setStatus('deprecated')
if mibBuilder.loadTexts: ssSysContext.setDescription("The average rate of context switches, calculated over the last minute. This object has been deprecated in favour of 'ssRawContext(60)', which can be used to calculate the same metric, but over any desired time period.")
ssCpuUser = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuUser.setStatus('deprecated')
if mibBuilder.loadTexts: ssCpuUser.setDescription("The percentage of CPU time spent processing user-level code, calculated over the last minute. This object has been deprecated in favour of 'ssCpuRawUser(50)', which can be used to calculate the same metric, but over any desired time period.")
ssCpuSystem = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuSystem.setStatus('deprecated')
if mibBuilder.loadTexts: ssCpuSystem.setDescription("The percentage of CPU time spent processing system-level code, calculated over the last minute. This object has been deprecated in favour of 'ssCpuRawSystem(52)', which can be used to calculate the same metric, but over any desired time period.")
ssCpuIdle = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuIdle.setStatus('deprecated')
if mibBuilder.loadTexts: ssCpuIdle.setDescription("The percentage of processor time spent idle, calculated over the last minute. This object has been deprecated in favour of 'ssCpuRawIdle(53)', which can be used to calculate the same metric, but over any desired time period.")
ssCpuRawUser = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawUser.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawUser.setDescription("The number of 'ticks' (typically 1/100s) spent processing user-level code. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawNice = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawNice.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawNice.setDescription("The number of 'ticks' (typically 1/100s) spent processing reduced-priority code. This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawSystem = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawSystem.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawSystem.setDescription("The number of 'ticks' (typically 1/100s) spent processing system-level code. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors). This object may sometimes be implemented as the combination of the 'ssCpuRawWait(54)' and 'ssCpuRawKernel(55)' counters, so care must be taken when summing the overall raw counters.")
ssCpuRawIdle = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawIdle.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawIdle.setDescription("The number of 'ticks' (typically 1/100s) spent idle. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawWait = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawWait.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawWait.setDescription("The number of 'ticks' (typically 1/100s) spent waiting for IO. This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. This time may also be included within the 'ssCpuRawSystem(52)' counter. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawKernel = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawKernel.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawKernel.setDescription("The number of 'ticks' (typically 1/100s) spent processing kernel-level code. This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. This time may also be included within the 'ssCpuRawSystem(52)' counter. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawInterrupt = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawInterrupt.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawInterrupt.setDescription("The number of 'ticks' (typically 1/100s) spent processing hardware interrupts. This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssIORawSent = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssIORawSent.setStatus('current')
if mibBuilder.loadTexts: ssIORawSent.setDescription('Number of blocks sent to a block device')
ssIORawReceived = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssIORawReceived.setStatus('current')
if mibBuilder.loadTexts: ssIORawReceived.setDescription('Number of blocks received from a block device')
ssRawInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssRawInterrupts.setStatus('current')
if mibBuilder.loadTexts: ssRawInterrupts.setDescription('Number of interrupts processed')
ssRawContexts = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssRawContexts.setStatus('current')
if mibBuilder.loadTexts: ssRawContexts.setDescription('Number of context switches')
ssCpuRawSoftIRQ = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawSoftIRQ.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawSoftIRQ.setDescription("The number of 'ticks' (typically 1/100s) spent processing software interrupts. This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssRawSwapIn = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssRawSwapIn.setStatus('current')
if mibBuilder.loadTexts: ssRawSwapIn.setDescription('Number of blocks swapped in')
ssRawSwapOut = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssRawSwapOut.setStatus('current')
if mibBuilder.loadTexts: ssRawSwapOut.setDescription('Number of blocks swapped out')
ssCpuRawSteal = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawSteal.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawSteal.setDescription("The number of 'ticks' (typically 1/100s) spent by the hypervisor code to run other VMs even though the CPU in the current VM had something runnable. This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawGuest = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawGuest.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawGuest.setDescription("The number of 'ticks' (typically 1/100s) spent by the CPU to run a virtual CPU (guest). This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuRawGuestNice = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuRawGuestNice.setStatus('current')
if mibBuilder.loadTexts: ssCpuRawGuestNice.setDescription("The number of 'ticks' (typically 1/100s) spent by the CPU to run a niced virtual CPU (guest). This object will not be implemented on hosts where the underlying operating system does not measure this particular CPU metric. On a multi-processor system, the 'ssCpuRaw*' counters are cumulative over all CPUs, so their sum will typically be N*100 (for N processors).")
ssCpuNumCpus = MibScalar((1, 3, 6, 1, 4, 1, 2021, 11, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssCpuNumCpus.setStatus('current')
if mibBuilder.loadTexts: ssCpuNumCpus.setDescription("The number of processors, as counted by the agent. This object's value may be useful in the management of certain operating systems where notions such as load average do not take into account the number of processors in the system. For other objects in the systemStats group whose descriptions refer to 'N processors', this object's value is N.")
ucdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 251))
ucdStart = NotificationType((1, 3, 6, 1, 4, 1, 2021, 251, 1))
if mibBuilder.loadTexts: ucdStart.setStatus('current')
if mibBuilder.loadTexts: ucdStart.setDescription('This trap could in principle be sent when the agent start')
ucdShutdown = NotificationType((1, 3, 6, 1, 4, 1, 2021, 251, 2))
if mibBuilder.loadTexts: ucdShutdown.setStatus('current')
if mibBuilder.loadTexts: ucdShutdown.setDescription('This trap is sent when the agent terminates')
fileTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 15), )
if mibBuilder.loadTexts: fileTable.setStatus('current')
if mibBuilder.loadTexts: fileTable.setDescription('Table of monitored files.')
fileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 15, 1), ).setIndexNames((0, "UCD-SNMP-MIB", "fileIndex"))
if mibBuilder.loadTexts: fileEntry.setStatus('current')
if mibBuilder.loadTexts: fileEntry.setDescription('Entry of file')
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileIndex.setStatus('current')
if mibBuilder.loadTexts: fileIndex.setDescription('Index of file')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('current')
if mibBuilder.loadTexts: fileName.setDescription('Filename')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 3), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('current')
if mibBuilder.loadTexts: fileSize.setDescription('Size of file (kB)')
fileMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 4), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileMax.setStatus('current')
if mibBuilder.loadTexts: fileMax.setDescription('Limit of filesize (kB)')
fileErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileErrorFlag.setStatus('current')
if mibBuilder.loadTexts: fileErrorFlag.setDescription('Limit exceeded flag')
fileErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 15, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileErrorMsg.setStatus('current')
if mibBuilder.loadTexts: fileErrorMsg.setDescription('Filesize error message')
logMatch = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 16))
logMatchMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2021, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchMaxEntries.setStatus('current')
if mibBuilder.loadTexts: logMatchMaxEntries.setDescription('The maximum number of logmatch entries this snmpd daemon can support.')
logMatchTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 16, 2), )
if mibBuilder.loadTexts: logMatchTable.setStatus('current')
if mibBuilder.loadTexts: logMatchTable.setDescription('Table of monitored files.')
logMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1), ).setIndexNames((0, "UCD-SNMP-MIB", "logMatchIndex"))
if mibBuilder.loadTexts: logMatchEntry.setStatus('current')
if mibBuilder.loadTexts: logMatchEntry.setDescription('Entry of file')
logMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchIndex.setStatus('current')
if mibBuilder.loadTexts: logMatchIndex.setDescription('Index of logmatch')
logMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchName.setStatus('current')
if mibBuilder.loadTexts: logMatchName.setDescription('logmatch instance name')
logMatchFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchFilename.setStatus('current')
if mibBuilder.loadTexts: logMatchFilename.setDescription('filename to be logmatched')
logMatchRegEx = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchRegEx.setStatus('current')
if mibBuilder.loadTexts: logMatchRegEx.setDescription('regular expression')
logMatchGlobalCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchGlobalCounter.setStatus('current')
if mibBuilder.loadTexts: logMatchGlobalCounter.setDescription('global count of matches')
logMatchGlobalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchGlobalCount.setStatus('current')
if mibBuilder.loadTexts: logMatchGlobalCount.setDescription('Description.')
logMatchCurrentCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchCurrentCounter.setStatus('current')
if mibBuilder.loadTexts: logMatchCurrentCounter.setDescription('Regex match counter. This counter will be reset with each logfile rotation.')
logMatchCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchCurrentCount.setStatus('current')
if mibBuilder.loadTexts: logMatchCurrentCount.setDescription('Description.')
logMatchCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchCounter.setStatus('current')
if mibBuilder.loadTexts: logMatchCounter.setDescription('Regex match counter. This counter will be reset with each read')
logMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchCount.setStatus('current')
if mibBuilder.loadTexts: logMatchCount.setDescription('Description.')
logMatchCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchCycle.setStatus('current')
if mibBuilder.loadTexts: logMatchCycle.setDescription('time between updates (if not queried) in seconds')
logMatchErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 100), UCDErrorFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchErrorFlag.setStatus('current')
if mibBuilder.loadTexts: logMatchErrorFlag.setDescription('errorflag: is this line configured correctly?')
logMatchRegExCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 16, 2, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMatchRegExCompilation.setStatus('current')
if mibBuilder.loadTexts: logMatchRegExCompilation.setDescription('message of regex precompilation')
mibBuilder.exportSymbols("UCD-SNMP-MIB", prErrFixCmd=prErrFixCmd, memAvailSwap=memAvailSwap, ucdavis=ucdavis, memTotalRealX=memTotalRealX, ssIOSent=ssIOSent, solaris=solaris, bsdi=bsdi, logMatchIndex=logMatchIndex, logMatchTable=logMatchTable, ucdSnmpAgent=ucdSnmpAgent, ssRawSwapIn=ssRawSwapIn, versionTag=versionTag, snmperrNames=snmperrNames, versionRestartAgent=versionRestartAgent, ucdTraps=ucdTraps, openbsd=openbsd, version=version, dskPath=dskPath, dskAvailLow=dskAvailLow, memSwapErrorMsg=memSwapErrorMsg, snmperrErrorFlag=snmperrErrorFlag, ssCpuIdle=ssCpuIdle, fileSize=fileSize, memTotalFreeX=memTotalFreeX, memSharedX=memSharedX, dskAvail=dskAvail, logMatchMaxEntries=logMatchMaxEntries, memTotalSwap=memTotalSwap, memBufferX=memBufferX, logMatchErrorFlag=logMatchErrorFlag, osf=osf, extCommand=extCommand, versionSavePersistentData=versionSavePersistentData, fileEntry=fileEntry, ssSwapIn=ssSwapIn, ssCpuRawSoftIRQ=ssCpuRawSoftIRQ, fileMax=fileMax, memAvailReal=memAvailReal, memMinimumSwapX=memMinimumSwapX, memIndex=memIndex, fileErrorFlag=fileErrorFlag, dskTable=dskTable, UCDErrorFlag=UCDErrorFlag, logMatchRegExCompilation=logMatchRegExCompilation, prMax=prMax, ssIndex=ssIndex, prIndex=prIndex, memUsedSwapTXT=memUsedSwapTXT, fileTable=fileTable, logMatchCounter=logMatchCounter, extResult=extResult, laNames=laNames, snmperrErrMessage=snmperrErrMessage, dskTotal=dskTotal, memAvailRealTXT=memAvailRealTXT, ssCpuRawKernel=ssCpuRawKernel, dskMinimum=dskMinimum, ssIOReceive=ssIOReceive, UCDErrorFix=UCDErrorFix, dskIndex=dskIndex, fileErrorMsg=fileErrorMsg, systemStats=systemStats, macosx=macosx, ultrix=ultrix, mrEntry=mrEntry, snmperrs=snmperrs, ssRawInterrupts=ssRawInterrupts, versionIdent=versionIdent, ssRawSwapOut=ssRawSwapOut, ssCpuRawGuestNice=ssCpuRawGuestNice, extOutput=extOutput, PYSNMP_MODULE_ID=ucdavis, ssCpuNumCpus=ssCpuNumCpus, dskTotalLow=dskTotalLow, ssRawContexts=ssRawContexts, ssCpuRawNice=ssCpuRawNice, logMatchName=logMatchName, dskErrorMsg=dskErrorMsg, Float=Float, memSwapError=memSwapError, memTotalRealTXT=memTotalRealTXT, logMatchGlobalCounter=logMatchGlobalCounter, memTotalReal=memTotalReal, dskUsedLow=dskUsedLow, logMatchCurrentCounter=logMatchCurrentCounter, ssCpuRawSystem=ssCpuRawSystem, hpux10=hpux10, laTable=laTable, extNames=extNames, fileName=fileName, ssCpuRawWait=ssCpuRawWait, extTable=extTable, dskUsed=dskUsed, logMatchGlobalCount=logMatchGlobalCount, dskPercentNode=dskPercentNode, ucdShutdown=ucdShutdown, prErrorFlag=prErrorFlag, laErrMessage=laErrMessage, mrTable=mrTable, mrModuleName=mrModuleName, ssIORawReceived=ssIORawReceived, logMatchEntry=logMatchEntry, prCount=prCount, memAvailRealX=memAvailRealX, memUsedRealTXT=memUsedRealTXT, ssSysInterrupts=ssSysInterrupts, prNames=prNames, ucdInternal=ucdInternal, aix=aix, ssCpuSystem=ssCpuSystem, prMin=prMin, memAvailSwapTXT=memAvailSwapTXT, hpux11=hpux11, extErrFix=extErrFix, memErrorName=memErrorName, ssCpuRawSteal=ssCpuRawSteal, versionDoDebugging=versionDoDebugging, logMatchFilename=logMatchFilename, logMatchCurrentCount=logMatchCurrentCount, logMatchRegEx=logMatchRegEx, netbsd1=netbsd1, logMatch=logMatch, versionUpdateConfig=versionUpdateConfig, logMatchCycle=logMatchCycle, extErrFixCmd=extErrFixCmd, versionIndex=versionIndex, ssSwapOut=ssSwapOut, dskDevice=dskDevice, ssCpuUser=ssCpuUser, memShared=memShared, memCachedX=memCachedX, memTotalFree=memTotalFree, dskPercent=dskPercent, dskTotalHigh=dskTotalHigh, ssCpuRawIdle=ssCpuRawIdle, freebsd=freebsd, laLoad=laLoad, versionClearCache=versionClearCache, dragonfly=dragonfly, memBuffer=memBuffer, prTable=prTable, fileIndex=fileIndex, ssSysContext=ssSysContext, laEntry=laEntry, versionCDate=versionCDate, memory=memory, mrIndex=mrIndex, logMatchCount=logMatchCount, win32=win32, memAvailSwapX=memAvailSwapX, ssCpuRawGuest=ssCpuRawGuest, ucdStart=ucdStart, extEntry=extEntry, versionConfigureOptions=versionConfigureOptions, linux=linux, prErrMessage=prErrMessage, laErrorFlag=laErrorFlag, unknown=unknown, memTotalSwapX=memTotalSwapX, sunos4=sunos4, memCached=memCached, extIndex=extIndex, dskErrorFlag=dskErrorFlag, irix=irix, laIndex=laIndex, ssCpuRawInterrupt=ssCpuRawInterrupt, dskAvailHigh=dskAvailHigh, laLoadInt=laLoadInt, ssIORawSent=ssIORawSent, ssErrorName=ssErrorName, ssCpuRawUser=ssCpuRawUser, prErrFix=prErrFix, laLoadFloat=laLoadFloat, versionDate=versionDate, memTotalSwapTXT=memTotalSwapTXT, dskUsedHigh=dskUsedHigh, memMinimumSwap=memMinimumSwap, laConfig=laConfig, ucdExperimental=ucdExperimental, snmperrIndex=snmperrIndex, dskEntry=dskEntry, dskMinPercent=dskMinPercent, hpux9=hpux9, prEntry=prEntry)
