image: python:3.8-slim

stages:
  - setup
  - static-analysis
  - tests
  - package
  - publish

variables:
  BUILD_IMAGE_PATH: ${CI_REGISTRY_IMAGE}/build-image:${CI_COMMIT_SHORT_SHA}
  BUILD_IMAGE_VENV_PATH: /venv

  FLIT_ROOT_INSTALL: 1
  GIT_STRATEGY: clone
  GIT_DEPTH: "0"
  BUILDHARNESS_LOG_LEVEL: debug

  PYPI_API_USER: __token__

  # Don't forget to update the coverage threshold in .pre-commit-config.yaml
  UNITTEST_COVERAGE_THRESHOLD: 90

  VENV_BIN: /venv/bin

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - /venv/


.declare-artifacts: &declare-artifacts
  artifacts:
    expire_in: 1 week
    paths:
      - dist/


.build-harness-target:
  image: ${BUILD_IMAGE_PATH}
  script:
    - ${VENV_BIN}/pip install .
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        ${TARGET}


check-dockerfile:
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
  image:
    name: hadolint/hadolint:2.5.0-debian
  stage: setup

  script:
    - mkdir -p reports
    - |
      hadolint \
        -f gitlab_codeclimate \
        ${CI_PROJECT_DIR}/docker/ci/Dockerfile \
        > reports/hadolint-$(md5sum ${CI_PROJECT_DIR}/docker/ci/Dockerfile | cut -d" " -f1).json


construct-build-image:
  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  # Run this build on Gitlab shared runners since it is IO intensive.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: setup
  variables:
    KANIKO_DOCKER_DIR: /kaniko/.docker

  script:
    - mkdir -p ${KANIKO_DOCKER_DIR}
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > ${KANIKO_DOCKER_DIR}/config.json
    - |
      /kaniko/executor \
        --build-arg venv_path=${BUILD_IMAGE_VENV_PATH} \
        --build-arg project_dir=${CI_PROJECT_DIR} \
        --context ${CI_PROJECT_DIR} \
        --dockerfile ${CI_PROJECT_DIR}/docker/ci/Dockerfile \
        --destination ${BUILD_IMAGE_PATH}


formatting-check:
  stage: static-analysis
  variables:
    TARGET: formatting --check

  extends:
    - .build-harness-target


flake8-check:
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis flake8

  extends:
    - .build-harness-target


mypy-check:
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis mypy

  extends:
    - .build-harness-target


unit-tests:
  stage: tests
  variables:
    TARGET: unit-test

  extends:
    - .build-harness-target


unit-tests-coverage:
  stage: tests
  variables:
    TARGET: unit-test --check ${UNITTEST_COVERAGE_THRESHOLD}

  extends:
    - .build-harness-target

  <<: *declare-artifacts


install-check:
  stage: tests
  variables:
    TARGET: install

  extends:
    - .build-harness-target


build-packages:
  artifacts:
    expire_in: 1 week
    paths:
      - dist/
      - build_harness.log
      - release_flow.log
    when: always
  image: ${BUILD_IMAGE_PATH}
  stage: package
  script:
    - ${VENV_BIN}/pip uninstall -y click_logging_config
    - ${VENV_BIN}/pip install .
    - echo "${CI_DEFAULT_BRANCH}"
    - |
      echo $(${VENV_BIN}/release-flow \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        --default-branch "${CI_DEFAULT_BRANCH}")
    - |
      export THIS_VERSION=$(${VENV_BIN}/release-flow \
      --log-console-disable \
      --log-file-enable \
      --log-level ${BUILDHARNESS_LOG_LEVEL} \
      --default-branch "${CI_DEFAULT_BRANCH}")
    # log THIS_VERSION to pipeline log for debugging
    - echo "${THIS_VERSION}"
    - |
      ${VENV_BIN}/build-harness \
        --log-console-disable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        package \
          --release-id "${THIS_VERSION}"


publish-packages:
  artifacts:
    expire_in: 1 week
    paths:
      - build_harness.log
      - publish_flow.log
    when: on_failure
  image: ${BUILD_IMAGE_PATH}
  needs:
    - job: build-packages
      artifacts: true
  stage: publish
  script:
    - ${VENV_BIN}/pip uninstall -y click_logging_config
    - ${VENV_BIN}/pip install .
    - echo "${CI_DEFAULT_BRANCH}"
    - echo "${CI_COMMIT_BRANCH}"
    - echo "${CI_COMMIT_REF_NAME}"
    - |
      if [ "${CI_PIPELINE_SOURCE}" == "merge_request_event" ] || [[ "${CI_COMMIT_BRANCH}" =~ ^feature/ ]]; then \
        export PUBLISH_THIS="dryrun"; \
      elif [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]; then \
        export PUBLISH_THIS="yes"; \
      else \
        export PUBLISH_THIS=$( \
          ${VENV_BIN}/publish-flow \
            --log-console-disable \
            --log-file-enable \
            --log-level ${BUILDHARNESS_LOG_LEVEL} \
            --default-branch "${CI_DEFAULT_BRANCH}" \
            --disable-pr-publish "${CI_PIPELINE_SOURCE}" \
            --publish-prerelease \
        ); \
      fi
    # log PUBLISH_THIS to pipeline log for debugging
    - echo ${PUBLISH_THIS}
    # NOTE: using the `--password` option to read from environment variable as
    # this is the most likely to be available in a CI system (but not
    # necessarily the most secure).
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        publish \
          --user $PYPI_API_USER \
          --password $PYPI_API_TOKEN \
          --publish ${PUBLISH_THIS}
