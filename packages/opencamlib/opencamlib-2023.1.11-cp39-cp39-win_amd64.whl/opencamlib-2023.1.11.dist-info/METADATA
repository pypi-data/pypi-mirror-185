Metadata-Version: 2.1
Name: opencamlib
Version: 2023.1.11
Summary: open source computer aided manufacturing algorithms library
Keywords: cam cnc waterline axial tool projection
Home-page: https://github.com/aewallin/opencamlib
Author-Email: Anders Wallin <anders.e.e.wallin@gmail.com>
Maintainer-Email: Koen Schmeets <koen@schmeets.de>
License:                   GNU LESSER GENERAL PUBLIC LICENSE
                               Version 2.1, February 1999
        
         Copyright (C) 1991, 1999 Free Software Foundation, Inc.
         51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
        [This is the first released version of the Lesser GPL.  It also counts
         as the successor of the GNU Library Public License, version 2, hence
         the version number 2.1.]
        
                                    Preamble
        
          The licenses for most software are designed to take away your
        freedom to share and change it.  By contrast, the GNU General Public
        Licenses are intended to guarantee your freedom to share and change
        free software--to make sure the software is free for all its users.
        
          This license, the Lesser General Public License, applies to some
        specially designated software packages--typically libraries--of the
        Free Software Foundation and other authors who decide to use it.  You
        can use it too, but we suggest you first think carefully about whether
        this license or the ordinary General Public License is the better
        strategy to use in any particular case, based on the explanations below.
        
          When we speak of free software, we are referring to freedom of use,
        not price.  Our General Public Licenses are designed to make sure that
        you have the freedom to distribute copies of free software (and charge
        for this service if you wish); that you receive source code or can get
        it if you want it; that you can change the software and use pieces of
        it in new free programs; and that you are informed that you can do
        these things.
        
          To protect your rights, we need to make restrictions that forbid
        distributors to deny you these rights or to ask you to surrender these
        rights.  These restrictions translate to certain responsibilities for
        you if you distribute copies of the library or if you modify it.
        
          For example, if you distribute copies of the library, whether gratis
        or for a fee, you must give the recipients all the rights that we gave
        you.  You must make sure that they, too, receive or can get the source
        code.  If you link other code with the library, you must provide
        complete object files to the recipients, so that they can relink them
        with the library after making changes to the library and recompiling
        it.  And you must show them these terms so they know their rights.
        
          We protect your rights with a two-step method: (1) we copyright the
        library, and (2) we offer you this license, which gives you legal
        permission to copy, distribute and/or modify the library.
        
          To protect each distributor, we want to make it very clear that
        there is no warranty for the free library.  Also, if the library is
        modified by someone else and passed on, the recipients should know
        that what they have is not the original version, so that the original
        author's reputation will not be affected by problems that might be
        introduced by others.
        
          Finally, software patents pose a constant threat to the existence of
        any free program.  We wish to make sure that a company cannot
        effectively restrict the users of a free program by obtaining a
        restrictive license from a patent holder.  Therefore, we insist that
        any patent license obtained for a version of the library must be
        consistent with the full freedom of use specified in this license.
        
          Most GNU software, including some libraries, is covered by the
        ordinary GNU General Public License.  This license, the GNU Lesser
        General Public License, applies to certain designated libraries, and
        is quite different from the ordinary General Public License.  We use
        this license for certain libraries in order to permit linking those
        libraries into non-free programs.
        
          When a program is linked with a library, whether statically or using
        a shared library, the combination of the two is legally speaking a
        combined work, a derivative of the original library.  The ordinary
        General Public License therefore permits such linking only if the
        entire combination fits its criteria of freedom.  The Lesser General
        Public License permits more lax criteria for linking other code with
        the library.
        
          We call this license the "Lesser" General Public License because it
        does Less to protect the user's freedom than the ordinary General
        Public License.  It also provides other free software developers Less
        of an advantage over competing non-free programs.  These disadvantages
        are the reason we use the ordinary General Public License for many
        libraries.  However, the Lesser license provides advantages in certain
        special circumstances.
        
          For example, on rare occasions, there may be a special need to
        encourage the widest possible use of a certain library, so that it becomes
        a de-facto standard.  To achieve this, non-free programs must be
        allowed to use the library.  A more frequent case is that a free
        library does the same job as widely used non-free libraries.  In this
        case, there is little to gain by limiting the free library to free
        software only, so we use the Lesser General Public License.
        
          In other cases, permission to use a particular library in non-free
        programs enables a greater number of people to use a large body of
        free software.  For example, permission to use the GNU C Library in
        non-free programs enables many more people to use the whole GNU
        operating system, as well as its variant, the GNU/Linux operating
        system.
        
          Although the Lesser General Public License is Less protective of the
        users' freedom, it does ensure that the user of a program that is
        linked with the Library has the freedom and the wherewithal to run
        that program using a modified version of the Library.
        
          The precise terms and conditions for copying, distribution and
        modification follow.  Pay close attention to the difference between a
        "work based on the library" and a "work that uses the library".  The
        former contains code derived from the library, whereas the latter must
        be combined with the library in order to run.
        
                          GNU LESSER GENERAL PUBLIC LICENSE
           TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
        
          0. This License Agreement applies to any software library or other
        program which contains a notice placed by the copyright holder or
        other authorized party saying it may be distributed under the terms of
        this Lesser General Public License (also called "this License").
        Each licensee is addressed as "you".
        
          A "library" means a collection of software functions and/or data
        prepared so as to be conveniently linked with application programs
        (which use some of those functions and data) to form executables.
        
          The "Library", below, refers to any such software library or work
        which has been distributed under these terms.  A "work based on the
        Library" means either the Library or any derivative work under
        copyright law: that is to say, a work containing the Library or a
        portion of it, either verbatim or with modifications and/or translated
        straightforwardly into another language.  (Hereinafter, translation is
        included without limitation in the term "modification".)
        
          "Source code" for a work means the preferred form of the work for
        making modifications to it.  For a library, complete source code means
        all the source code for all modules it contains, plus any associated
        interface definition files, plus the scripts used to control compilation
        and installation of the library.
        
          Activities other than copying, distribution and modification are not
        covered by this License; they are outside its scope.  The act of
        running a program using the Library is not restricted, and output from
        such a program is covered only if its contents constitute a work based
        on the Library (independent of the use of the Library in a tool for
        writing it).  Whether that is true depends on what the Library does
        and what the program that uses the Library does.
        
          1. You may copy and distribute verbatim copies of the Library's
        complete source code as you receive it, in any medium, provided that
        you conspicuously and appropriately publish on each copy an
        appropriate copyright notice and disclaimer of warranty; keep intact
        all the notices that refer to this License and to the absence of any
        warranty; and distribute a copy of this License along with the
        Library.
        
          You may charge a fee for the physical act of transferring a copy,
        and you may at your option offer warranty protection in exchange for a
        fee.
        
          2. You may modify your copy or copies of the Library or any portion
        of it, thus forming a work based on the Library, and copy and
        distribute such modifications or work under the terms of Section 1
        above, provided that you also meet all of these conditions:
        
            a) The modified work must itself be a software library.
        
            b) You must cause the files modified to carry prominent notices
            stating that you changed the files and the date of any change.
        
            c) You must cause the whole of the work to be licensed at no
            charge to all third parties under the terms of this License.
        
            d) If a facility in the modified Library refers to a function or a
            table of data to be supplied by an application program that uses
            the facility, other than as an argument passed when the facility
            is invoked, then you must make a good faith effort to ensure that,
            in the event an application does not supply such function or
            table, the facility still operates, and performs whatever part of
            its purpose remains meaningful.
        
            (For example, a function in a library to compute square roots has
            a purpose that is entirely well-defined independent of the
            application.  Therefore, Subsection 2d requires that any
            application-supplied function or table used by this function must
            be optional: if the application does not supply it, the square
            root function must still compute square roots.)
        
        These requirements apply to the modified work as a whole.  If
        identifiable sections of that work are not derived from the Library,
        and can be reasonably considered independent and separate works in
        themselves, then this License, and its terms, do not apply to those
        sections when you distribute them as separate works.  But when you
        distribute the same sections as part of a whole which is a work based
        on the Library, the distribution of the whole must be on the terms of
        this License, whose permissions for other licensees extend to the
        entire whole, and thus to each and every part regardless of who wrote
        it.
        
        Thus, it is not the intent of this section to claim rights or contest
        your rights to work written entirely by you; rather, the intent is to
        exercise the right to control the distribution of derivative or
        collective works based on the Library.
        
        In addition, mere aggregation of another work not based on the Library
        with the Library (or with a work based on the Library) on a volume of
        a storage or distribution medium does not bring the other work under
        the scope of this License.
        
          3. You may opt to apply the terms of the ordinary GNU General Public
        License instead of this License to a given copy of the Library.  To do
        this, you must alter all the notices that refer to this License, so
        that they refer to the ordinary GNU General Public License, version 2,
        instead of to this License.  (If a newer version than version 2 of the
        ordinary GNU General Public License has appeared, then you can specify
        that version instead if you wish.)  Do not make any other change in
        these notices.
        
          Once this change is made in a given copy, it is irreversible for
        that copy, so the ordinary GNU General Public License applies to all
        subsequent copies and derivative works made from that copy.
        
          This option is useful when you wish to copy part of the code of
        the Library into a program that is not a library.
        
          4. You may copy and distribute the Library (or a portion or
        derivative of it, under Section 2) in object code or executable form
        under the terms of Sections 1 and 2 above provided that you accompany
        it with the complete corresponding machine-readable source code, which
        must be distributed under the terms of Sections 1 and 2 above on a
        medium customarily used for software interchange.
        
          If distribution of object code is made by offering access to copy
        from a designated place, then offering equivalent access to copy the
        source code from the same place satisfies the requirement to
        distribute the source code, even though third parties are not
        compelled to copy the source along with the object code.
        
          5. A program that contains no derivative of any portion of the
        Library, but is designed to work with the Library by being compiled or
        linked with it, is called a "work that uses the Library".  Such a
        work, in isolation, is not a derivative work of the Library, and
        therefore falls outside the scope of this License.
        
          However, linking a "work that uses the Library" with the Library
        creates an executable that is a derivative of the Library (because it
        contains portions of the Library), rather than a "work that uses the
        library".  The executable is therefore covered by this License.
        Section 6 states terms for distribution of such executables.
        
          When a "work that uses the Library" uses material from a header file
        that is part of the Library, the object code for the work may be a
        derivative work of the Library even though the source code is not.
        Whether this is true is especially significant if the work can be
        linked without the Library, or if the work is itself a library.  The
        threshold for this to be true is not precisely defined by law.
        
          If such an object file uses only numerical parameters, data
        structure layouts and accessors, and small macros and small inline
        functions (ten lines or less in length), then the use of the object
        file is unrestricted, regardless of whether it is legally a derivative
        work.  (Executables containing this object code plus portions of the
        Library will still fall under Section 6.)
        
          Otherwise, if the work is a derivative of the Library, you may
        distribute the object code for the work under the terms of Section 6.
        Any executables containing that work also fall under Section 6,
        whether or not they are linked directly with the Library itself.
        
          6. As an exception to the Sections above, you may also combine or
        link a "work that uses the Library" with the Library to produce a
        work containing portions of the Library, and distribute that work
        under terms of your choice, provided that the terms permit
        modification of the work for the customer's own use and reverse
        engineering for debugging such modifications.
        
          You must give prominent notice with each copy of the work that the
        Library is used in it and that the Library and its use are covered by
        this License.  You must supply a copy of this License.  If the work
        during execution displays copyright notices, you must include the
        copyright notice for the Library among them, as well as a reference
        directing the user to the copy of this License.  Also, you must do one
        of these things:
        
            a) Accompany the work with the complete corresponding
            machine-readable source code for the Library including whatever
            changes were used in the work (which must be distributed under
            Sections 1 and 2 above); and, if the work is an executable linked
            with the Library, with the complete machine-readable "work that
            uses the Library", as object code and/or source code, so that the
            user can modify the Library and then relink to produce a modified
            executable containing the modified Library.  (It is understood
            that the user who changes the contents of definitions files in the
            Library will not necessarily be able to recompile the application
            to use the modified definitions.)
        
            b) Use a suitable shared library mechanism for linking with the
            Library.  A suitable mechanism is one that (1) uses at run time a
            copy of the library already present on the user's computer system,
            rather than copying library functions into the executable, and (2)
            will operate properly with a modified version of the library, if
            the user installs one, as long as the modified version is
            interface-compatible with the version that the work was made with.
        
            c) Accompany the work with a written offer, valid for at
            least three years, to give the same user the materials
            specified in Subsection 6a, above, for a charge no more
            than the cost of performing this distribution.
        
            d) If distribution of the work is made by offering access to copy
            from a designated place, offer equivalent access to copy the above
            specified materials from the same place.
        
            e) Verify that the user has already received a copy of these
            materials or that you have already sent this user a copy.
        
          For an executable, the required form of the "work that uses the
        Library" must include any data and utility programs needed for
        reproducing the executable from it.  However, as a special exception,
        the materials to be distributed need not include anything that is
        normally distributed (in either source or binary form) with the major
        components (compiler, kernel, and so on) of the operating system on
        which the executable runs, unless that component itself accompanies
        the executable.
        
          It may happen that this requirement contradicts the license
        restrictions of other proprietary libraries that do not normally
        accompany the operating system.  Such a contradiction means you cannot
        use both them and the Library together in an executable that you
        distribute.
        
          7. You may place library facilities that are a work based on the
        Library side-by-side in a single library together with other library
        facilities not covered by this License, and distribute such a combined
        library, provided that the separate distribution of the work based on
        the Library and of the other library facilities is otherwise
        permitted, and provided that you do these two things:
        
            a) Accompany the combined library with a copy of the same work
            based on the Library, uncombined with any other library
            facilities.  This must be distributed under the terms of the
            Sections above.
        
            b) Give prominent notice with the combined library of the fact
            that part of it is a work based on the Library, and explaining
            where to find the accompanying uncombined form of the same work.
        
          8. You may not copy, modify, sublicense, link with, or distribute
        the Library except as expressly provided under this License.  Any
        attempt otherwise to copy, modify, sublicense, link with, or
        distribute the Library is void, and will automatically terminate your
        rights under this License.  However, parties who have received copies,
        or rights, from you under this License will not have their licenses
        terminated so long as such parties remain in full compliance.
        
          9. You are not required to accept this License, since you have not
        signed it.  However, nothing else grants you permission to modify or
        distribute the Library or its derivative works.  These actions are
        prohibited by law if you do not accept this License.  Therefore, by
        modifying or distributing the Library (or any work based on the
        Library), you indicate your acceptance of this License to do so, and
        all its terms and conditions for copying, distributing or modifying
        the Library or works based on it.
        
          10. Each time you redistribute the Library (or any work based on the
        Library), the recipient automatically receives a license from the
        original licensor to copy, distribute, link with or modify the Library
        subject to these terms and conditions.  You may not impose any further
        restrictions on the recipients' exercise of the rights granted herein.
        You are not responsible for enforcing compliance by third parties with
        this License.
        
          11. If, as a consequence of a court judgment or allegation of patent
        infringement or for any other reason (not limited to patent issues),
        conditions are imposed on you (whether by court order, agreement or
        otherwise) that contradict the conditions of this License, they do not
        excuse you from the conditions of this License.  If you cannot
        distribute so as to satisfy simultaneously your obligations under this
        License and any other pertinent obligations, then as a consequence you
        may not distribute the Library at all.  For example, if a patent
        license would not permit royalty-free redistribution of the Library by
        all those who receive copies directly or indirectly through you, then
        the only way you could satisfy both it and this License would be to
        refrain entirely from distribution of the Library.
        
        If any portion of this section is held invalid or unenforceable under any
        particular circumstance, the balance of the section is intended to apply,
        and the section as a whole is intended to apply in other circumstances.
        
        It is not the purpose of this section to induce you to infringe any
        patents or other property right claims or to contest validity of any
        such claims; this section has the sole purpose of protecting the
        integrity of the free software distribution system which is
        implemented by public license practices.  Many people have made
        generous contributions to the wide range of software distributed
        through that system in reliance on consistent application of that
        system; it is up to the author/donor to decide if he or she is willing
        to distribute software through any other system and a licensee cannot
        impose that choice.
        
        This section is intended to make thoroughly clear what is believed to
        be a consequence of the rest of this License.
        
          12. If the distribution and/or use of the Library is restricted in
        certain countries either by patents or by copyrighted interfaces, the
        original copyright holder who places the Library under this License may add
        an explicit geographical distribution limitation excluding those countries,
        so that distribution is permitted only in or among countries not thus
        excluded.  In such case, this License incorporates the limitation as if
        written in the body of this License.
        
          13. The Free Software Foundation may publish revised and/or new
        versions of the Lesser General Public License from time to time.
        Such new versions will be similar in spirit to the present version,
        but may differ in detail to address new problems or concerns.
        
        Each version is given a distinguishing version number.  If the Library
        specifies a version number of this License which applies to it and
        "any later version", you have the option of following the terms and
        conditions either of that version or of any later version published by
        the Free Software Foundation.  If the Library does not specify a
        license version number, you may choose any version ever published by
        the Free Software Foundation.
        
          14. If you wish to incorporate parts of the Library into other free
        programs whose distribution conditions are incompatible with these,
        write to the author to ask for permission.  For software which is
        copyrighted by the Free Software Foundation, write to the Free
        Software Foundation; we sometimes make exceptions for this.  Our
        decision will be guided by the two goals of preserving the free status
        of all derivatives of our free software and of promoting the sharing
        and reuse of software generally.
        
                                    NO WARRANTY
        
          15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
        WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
        EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
        OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
        KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
        LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
        THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
        
          16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
        WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
        AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
        FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
        CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
        LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
        RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
        FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
        SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
        DAMAGES.
        
                             END OF TERMS AND CONDITIONS
        
                   How to Apply These Terms to Your New Libraries
        
          If you develop a new library, and you want it to be of the greatest
        possible use to the public, we recommend making it free software that
        everyone can redistribute and change.  You can do so by permitting
        redistribution under these terms (or, alternatively, under the terms of the
        ordinary General Public License).
        
          To apply these terms, attach the following notices to the library.  It is
        safest to attach them to the start of each source file to most effectively
        convey the exclusion of warranty; and each file should have at least the
        "copyright" line and a pointer to where the full notice is found.
        
            <one line to give the library's name and a brief idea of what it does.>
            Copyright (C) <year>  <name of author>
        
            This library is free software; you can redistribute it and/or
            modify it under the terms of the GNU Lesser General Public
            License as published by the Free Software Foundation; either
            version 2.1 of the License, or (at your option) any later version.
        
            This library is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
            Lesser General Public License for more details.
        
            You should have received a copy of the GNU Lesser General Public
            License along with this library; if not, write to the Free Software
            Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
        
        Also add information on how to contact you by electronic and paper mail.
        
        You should also get your employer (if you work as a programmer) or your
        school, if any, to sign a "copyright disclaimer" for the library, if
        necessary.  Here is a sample; alter the names:
        
          Yoyodyne, Inc., hereby disclaims all copyright interest in the
          library `Frob' (a library for tweaking knobs) written by James Random Hacker.
        
          <signature of Ty Coon>, 1 April 1990
          Ty Coon, President of Vice
        
        That's all there is to it!
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Intended Audience :: Manufacturing
Project-URL: Homepage, https://github.com/aewallin/opencamlib
Project-URL: Documentation, https://github.com/aewallin/opencamlib
Project-URL: Repository, https://github.com/aewallin/opencamlib
Requires-Python: >=3.6
Description-Content-Type: text/x-rst

##########
OpenCAMLib
##########

.. image:: https://img.shields.io/badge/License-LGPL%20v2.1-blue.svg
    :target: https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html

.. image:: https://github.com/aewallin/opencamlib/actions/workflows/test.yml/badge.svg
    :target: https://github.com/aewallin/opencamlib/actions/workflows/test.yml

.. image:: https://readthedocs.org/projects/opencamlib/badge/?version=latest
    :target: https://opencamlib.readthedocs.io/en/latest/?badge=latest
    :alt: Documentation Status

************
Introduction
************

OpenCAMLib (ocl) is a library for creating 3D toolpaths for CNC-machines such as mills and lathes.
It is written in C++ and has bindings for Python, Node.js and the browser.
At the moment it supports the following algorithms:

===========
Drop-cutter
===========

The drop cutter algorithm drops a cutter, positioned at a predefined (x,y) location, until it touches the 3D model.

.. image:: https://github.com/aewallin/opencamlib/blob/master/docs/drop-cutter.png?raw=true
  :width: 200
  :alt: Drop Cutter

===========
Push-cutter
===========

The Push-cutter is used to create a Waterline toolpath that follows the shape of the model at a constant z-height in the xy-plane.

.. image:: https://github.com/aewallin/opencamlib/blob/master/docs/push-cutter.png?raw=true
  :width: 200
  :alt: Push Cutter

=======
Cutters
=======

The algorithms listed above can be used with following cutters:

- **CylCutter** (flat end mill / cylindrical)
- **BallCutter** (ball end mill / spherical)
- **BullCutter** (radius end mill / toroidal)
- **ConeCutter** (tapered end mill / conical)
- **CompositeCutter** (combinations of the above / compound)

From August 2018 OpenCAMLib is released under LGPL license.

**********************
Pre-compiled Libraries
**********************

OpenCAMLib provides pre-compiled C++, Node.js and Python libraries for the following platforms and architectures:

+-------------+------------------+
| **Windows** | ia32 / x64       |
+-------------+------------------+
| **macOS**   | x86_64 / arm64   |
+-------------+------------------+
| **Linux**   | x86_64 / aarch64 |
+-------------+------------------+

- The Python library is called ``opencamlib`` and is hosted on PyPi (pypi.org), precompiled libraries are available for Python v3.7 up to v3.11.
- The Node.js + emscripten library is called ``@opencamlib/opencamlib`` and is hosted on npm (npmjs.org), precompiled libraries are available for Node-API v3 and up.
- The C++ library is called ``libocl`` and is hosted on our Github Releases page.

======
Python
======

The Python library (hosted on PyPi) can be installed like this:

..  code-block:: shell

    pip install opencamlib

On some platforms, pip is called pip3, you might have to run:

..  code-block:: shell

    pip3 install opencamlib

Note that pip / pip3 is will install packages for to the system installation of Python, if you want to install a package in a custom Python installation that is not in your $PATH
(for example, the Python which comes with Blender), you can install packages like so:

..  code-block:: shell

    /path/to/your/custom/python -m pip install opencamlib

If you don't know where Python is, but you have access to it's interpreter (FreeCAD and Blender both have a Python console), you can simply enter this command in there to install OpenCAMLib:

..  code-block:: python

    import sys; import subprocess; subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'opencamlib'])


==========
JavaScript
==========

The JavaScript library (hosted on npm) works in Node.js and the browser (by leveraging emscripten / WASM) can be installed like this:

..  code-block:: shell

    npm install --save @opencamlib/opencamlib

Or, using yarn:

..  code-block:: shell

    yarn add @opencamlib/opencamlib

Note that it is not 100% feature complete and lacking some functionality still.

===
C++
===

Pre-compiled C++ libraries are available on the Github Releases page (https://github.com/aewallin/opencamlib/releases).
This project also installs a OpenCAMLibConfig.cmake, which, if your project uses CMake, allows you to use ``find_package(OpenCAMLib REQUIRED)``.

You can see an example of that in use over here: ``examples/cpp/test/CMakeLists.txt``

********************
Building from Source
********************

Having trouble with a pre-compiled library? Please report it to us.
If there are no pre-compiled libraries for your platform or architecture, or want to customize or package opencamlib, this is for you.

OpenCAMLib uses functionality from a library called Boost.
For the Python library it uses an extra library called Boost.Python.

Only the Python bindings need Boost to be **compiled** (with Boost.Python).
All other libraries **DO NOT** need Boost to be compiled, in those cases, a headers only version will suffice.
So, if you are not compiling the Python libraries, simply download Boost, extract it into a folder, and tell CMake where to look for it.

Make sure to download Boost from the boost.org downloads page, if you download it from github, you have to make sure to install the git submodules **and** build the headers.

We provide a ``install.sh`` script that helps with installation of dependencies and building OpenCAMLib libraries, you might want to take a look at it first.
You can run ``./install.sh --help`` to look at the available options, or inspect it's source code to find out more.

============
Dependencies
============

To compile OpenCAMLib, you need:

- **C++ compiler** (It should at least support C++ 14)
- **Git** (This is used for cloning the repository, and the emscripten SDK)
- **CMake** (At least version 3.15)
- **Boost** (When compiling the Python library, you have to **compile** Boost.Python for your Python version after installation)

At this time of writing, here are the packages to install:

Ubuntu Dependencies
-------------------

..  code-block:: shell

    sudo apt install -y git cmake curl build-essential libboost-dev

macOS Dependencies
------------------

..  code-block:: shell

    brew install git cmake curl boost python@3.11 boost-python3

Windows Dependencies
--------------------

Install

- Visual Studio Build Tools (https://visualstudio.microsoft.com/visual-cpp-build-tools/)
- Git (https://git-scm.com/download/win)
- CMake (https://git-scm.com/download/win)

By downloading the installers from the internet, or by using your package manager.

================
Building for C++
================

The C++ library is the easiest to build, it only depends on Boost's headers.
Make sure you have a compiler, git, cmake and Boost installed (or simply download and extract it somewhere).

..  code-block:: shell

    git clone https://github.com/aewallin/opencamlib
    cd opencamlib
    mkdir build
    cd build
    cmake .. -D CXX_LIB="ON"
    make . # try make -j4 for a faster build if you have a multi-core machine
    make install .

When boost is not in a standard location, you can add the ``-D BOOST_ROOT=/path/to/boost`` option to the cmake command.

=======================
Building for Emscripten
=======================

To compile the emscripten library, first download, install and activate it using the following commands:

..  code-block:: shell

    git clone https://github.com/emscripten-core/emsdk.git
    cd emsdk
    ./emsdk install latest
    ./emsdk activate latest

Now you can compile OpenCAMLib like this (make sure to replace the ``path/to/`` sections):

..  code-block:: shell

    source path/to/emsdk/emsdk_env.sh
    git clone https://github.com/aewallin/opencamlib
    cd opencamlib
    mkdir build
    cd build
    emcmake cmake \
      -D CMAKE_BUILD_TYPE="Release" \
      -D BUILD_EMSCRIPTEN_LIB="ON" \
      -D USE_OPENMP="OFF" \
      -D CMAKE_INSTALL_PREFIX="/path/to/opencamlib/src/npmpackage/build" \
      -D BOOST_ROOT="/path/to/boost" \
      ..
    emmake make # try emmake make -j4 for a faster build if you have a multi-core machine

Note that ``USE_OPENMP`` has been turned off, OpenMP is not supported with Emscripten at the moment

====================
Building for Node.js
====================

To compile the Node.js library, install the dependencies in ``src/nodejslib``:

..  code-block:: shell

    cd src/nodejslib
    npm install

Next, use cmake-js to compile the library:

..  code-block:: shell

    git clone https://github.com/aewallin/opencamlib
    cd opencamlib
    mkdir build
    cd build
    ../src/nodejslib/node_modules/.bin/cmake-js \
      build \
      --directory ".." \
      --out "." \
      --parallel 4 \
      --CD BUILD_NODEJS_LIB="ON" \
      --CD USE_OPENMP="ON" \
      --CD CMAKE_INSTALL_PREFIX="/path/to/opencamlib/build/Release/$(node --print 'process.platform')-nodejs-$(node --print 'process.arch')" \
      --CD BOOST_ROOT="/path/to/boost" \
      --config "Release"

===================
Building for Python
===================

The Python library can be compiled similarly to the C++ example above, however, this time Boost.Python has to be compiled first.
Most systems have Boost.Python available as a download, but only for a specific Python version only (usually the latest Python version).
These might work if you are using Python from the same package provider, but, unfortunately, this is not a very reliable method, so compiling them yourself is usually the best option.

First, download and extract Boost:

..  code-block:: shell

    curl "https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz" --output "boost_1_80_0.tar.gz" --location
    tar -zxf boost_1_80_0.tar.gz -C /tmp/boost
    cd /tmp/boost/boost_1_80_0

Now we can compile it:

..  code-block:: shell

    echo "using python ;" > ./user-config.jam
    ./bootstrap.sh
    ./b2 \
      -a \
      threading="multi" \
      -j4 \
      variant="release" \
      link="static" \
      address-model="64" \
      architecture="x86" \
      --layout="system" \
      --with-python \
      --user-config="./user-config.jam" \
      cxxflags="-fPIC" \
      stage

Note that you can customize the user-config.jam file to point it to your Python installation
(see: https://www.boost.org/doc/libs/1_78_0/libs/python/doc/html/building/configuring_boost_build.html).
You should also specify the correct architecture and address-model.
On windows, make sure to use windows style paths, e.g. ``C:\\path\\to\\Python``

*****
Usage
*****

Please take a look at the ``examples/`` folder on how to use OpenCAMLib.
For each language there is an example named ``test`` which calls all of the algorithms.

There is also some API documentation over here: https://opencamlib.readthedocs.io

***************
Common Problems
***************

Compiling OpenCAMLib is unfortunately not very easy and there are many things that can go wrong.
Here is a list of common problems and solutions.

=================================================
Could NOT find Boost (missing: Boost_INCLUDE_DIR)
=================================================

This happens a lot, here are some of the reasons why this happens:

**You don't have Boost installed.**

If you forgot to install boost, go ahead and download Boost from from their website: https://www.boost.org/users/download/ and extract it somewhere.
Now, when compiling the C++ or node.js module, add the

``-D BOOST_ROOT=/path/to/extracted/boost`` flag to the ``cmake ..`` command, or the.

``--boost-prefix /path/to/extracted/boost`` flag to the ``./install.sh`` command

**You installed Boost from Github.**

The boost that is hosted on Github does not have the headers yet! To compile those, you should run the following commands:

..  code-block:: shell

    ./bootstrap.sh
    ./b2 headers

**Your CMake version has a FindBoost module which is unaware of your Boost's version.**

The CMake module that looks for Boost, is usually not aware of the existence of the latest Boost versions.
You can help it by providing the version number of your Boost with the ``-D Boost_ADDITIONAL_VERSIONS="1.80.0"`` flag.
Make sure to change 1.80.0 with your version of Boost.

It can also be helpfull to enable ``Boost_DEBUG`` in the CMake configuration.

***************
Cross Compiling
***************

To compile OpenCAMLib for other architectures, we recommend the following strategies.
Always make sure to compile Boost for the correct architecture as well!

=====
macOS
=====

Cross compiling on macOS is possible by setting the CMake ``CMAKE_OSX_ARCHITECTURES`` flag.
When using the ``install.sh`` script, you can use the ``--macos-architecture`` flag to accomplish the same thing.
Make sure to take a look at the other ``--*-architecture`` flags when cross compiling.

=======
Windows
=======

Cross compiling on Windows is possible by using the "Visual Studio" generator (default) and by setting the CMake ``CMAKE_GENERATOR_PLATFORM`` flag.
When using the ``install.sh`` script, you can use the ``--cmake-generator-platform`` flag to accomplish the same thing.
Make sure to take a look at the other ``--*-architecture`` flags when cross compiling.

=====
Linux
=====

To ensure that compiled libraries work on older linux versions, it has to be compiled with an older Glibc version.
The easiest way to accomplish this is by using Docker, there are images available especially for this purpose.
When using the ``install.sh`` script, you can use the ``--docker-image`` flag which will make the command run in a container with the given image name.

C++ docker image
----------------

When cross compiling the C++ library, make sure to use an old Glibc, this is included in the dockcross docker images.
For a list of supported architectures, take a look at:

https://github.com/dockcross/dockcross#summary-cross-compilers

Node.js docker image
--------------------

Cross compilers for node.js are available here:

https://github.com/prebuild/docker-images

Python docker image
-------------------

Cross compilers for python are here:

https://github.com/pypa/manylinux#manylinux2014-centos-7-based

*****
Links
*****

- repository https://github.com/aewallin/opencamlib
- PPAs
  - https://launchpad.net/~iacobs/+archive/ubuntu/cnc/
  - https://launchpad.net/~neomilium/+archive/ubuntu/cam
  - https://launchpad.net/~freecad-community/+archive/ubuntu/ppa
  - (updated 2012) https://launchpad.net/~anders-e-e-wallin/+archive/ubuntu/cam
- mailing-list http://groups.google.com/group/opencamlib
- IRC-channel #cam on irc.freenode.net
- coding standard (?) http://www.possibility.com/Cpp/CppCodingStandard.html

*********************
Organization of Files
*********************

(generate this with 'tree -dL 2')::

 â”œâ”€â”€ docs                        documentation (not much here yet!)
 â”œâ”€â”€ examples                    c++, emscripten, nodejs and python examples
 â”œâ”€â”€ scripts                     CI scripts for installing and building ocl
 â”œâ”€â”€ src
 â”‚Â Â  â”œâ”€â”€ algo                    algorithms under development
 â”‚Â Â  â”œâ”€â”€ common                  common algorithms and data-structures
 â”‚Â Â  â”œâ”€â”€ cutters                 cutter-classes
 â”‚Â Â  â”œâ”€â”€ cxxlib                  c++ library cmake config
 â”‚Â Â  â”œâ”€â”€ deb                     debian package cmake config
 â”‚Â Â  â”œâ”€â”€ dropcutter              drop-cutter algorithms and operations
 â”‚Â Â  â”œâ”€â”€ emscriptenlib           bindings for emscripten library
 â”‚Â Â  â”œâ”€â”€ geo                     primitive geometry classes (point, triangle, stlsurf, etc.)
 â”‚Â Â  â”œâ”€â”€ nodejslib               Node.js library bindings and cmake config
 â”‚Â Â  â”œâ”€â”€ npmpackage              combined Node.js and emscripten wrappers, for publishing to npm
 â”‚Â Â  â”œâ”€â”€ pythonlib               python library bindings and cmake config
 â””â”€â”€ stl                         STL files for testing
