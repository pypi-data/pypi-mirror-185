# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['CryptoPayAPI']

package_data = \
{'': ['*']}

install_requires = \
['httpx>=0.23.1,<0.24.0', 'pydantic>=1.10.2,<2.0.0']

setup_kwargs = {
    'name': 'pycryptopay-sdk',
    'version': '1.7.0',
    'description': 'Python API wrapper for CryptoPay API',
    'long_description': "# pyCryptoPayAPI\n![CryptoPay](https://raw.githubusercontent.com/Foile/crypto-pay-api/24a2c869ddc78d12109319c180764ad055fbe687/media/header.svg)\n\n**[Crypto Pay](http://t.me/CryptoBot/?start=pay)** is a payment system based on [@CryptoBot](http://t.me/CryptoBot), which allows you to accept payments in cryptocurrency using the API.\n\nThis library help you to work with **Crypto Pay** via [Crypto Pay API](https://help.crypt.bot/crypto-pay-api) in yours Python scripts.\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/LulzLoL231/pyCryptoPayAPI)](https://github.com/LulzLoL231/pyCryptoPayAPI/releases/latest) [![CodeQL](https://github.com/LulzLoL231/pyCryptoPayAPI/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/LulzLoL231/pyCryptoPayAPI/actions/workflows/codeql-analysis.yml) [![Library test](https://github.com/LulzLoL231/pyCryptoPayAPI/actions/workflows/lib-test.yml/badge.svg)](https://github.com/LulzLoL231/pyCryptoPayAPI/actions/workflows/lib-test.yml)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pycryptopay-sdk)  \nDocumentation available on [English language](https://lulzlol231.github.io/pyCryptoPayAPI/en)  \nДокументация доступна на [Русском языке](https://lulzlol231.github.io/pyCryptoPayAPI/ru)\n\n## Install\nVia pip:\n```\npip install pycryptopay-sdk\n```\nVia git:  \n```\npip install git+https://github.com/LulzLoL231/pyCryptoPayAPI.git\n```\nVia source, *in source folder*:  \n```\npip install ./\n```\n\n## Usage\n\n### API  \nFirst, you need to create your application and get an API token. Open [@CryptoBot](http://t.me/CryptoBot?start=pay) or [@CryptoTestnetBot](http://t.me/CryptoTestnetBot?start=pay) (for testnet), send a command `/pay` to create a new app and get API Token.  \nNext step: try to call a simple `get_me()` method to check that everything is working well:\n\n```python\nfrom asyncio import run\n\nfrom CryptoPayAPI import CryptoPay\n\ncp = CryptoPay('YOUR_API_TOKEN')\nprint(run(cp.get_me()))  # Returns Application object.\n```\n\nYou can use `testnet` for testing your applications. Defaults is `mainnet`.\n\n```python\nfrom CryptoPayAPI import CryptoPay\n\ncp = CryptoPay('YOUR_API_TOKEN', testnet=True)\n```\n\nYou can find all available methods in [Methods chapter](#api-methods).  \nAlso, you can get supported [assets](#schemasassets), [paid button names](#schemaspaidbuttonnames) and [invoice status](#schemasinvoicestatus):\n\n```python\nfrom asyncio import get_event_loop\nfrom CryptoPayAPI import CryptoPay\nfrom CryptoPayAPI.schemas import Assets, PaidButtonNames, InvoiceStatus\n\n\nlp = get_event_loop()\ncp = CryptoPay('YOUR_API_TOKEN')\n\nprint(lp.run_until_complete(cp.create_invoice(\n    Assets.USDT, 5.25,\n    description='Example page for $5.25!',\n    paid_btn_name=PaidButtonNames.VIEW_ITEM,\n    paid_btn_url='https://example.com'\n)))  # Prints information about created invoice.\n\nprint(lp.run_until_complete(cp.get_invoices(\n    Assets.USDT, status=InvoiceStatus.PAID\n)))  # Prints all paid invoices.\n```\n\n### Webhooks\nUse Webhooks to get updates for your app, Crypto Pay will send an HTTPS POST request to the specified URL, containing a JSON-serialized [Update](#schemasupdate).  \nRead more about webhooks in [Crypto Pay Docs](https://help.crypt.bot/crypto-pay-api#webhooks)!  \nUse `CryptoPay.process_webhook_update` function, for processing Crypto Pay requests.  \nCheck [webhook example](https://github.com/LulzLoL231/pyCryptoPayAPI/tree/main/examples/webhook-example.py) for more info.\n\n#### CryptoPay.process_webhook_update\n*Coroutine*. Processing webhook request, returns [Update](#schemasupdate) object.\n\nArguments:\n  * **body** (`bytes`) - JSON content from Crypto Pay request in bytes.\n  * **headers** (`dict[str, str]`) - Request headers.\n```python\nupdate = await cp.process_webhook_update(body, headers)\nprint(f'Recieved {update.payload.amount} {update.payload.asset}!')  # Recieved 10.0 ETH\n```\n\nLook full code in the [examples](https://github.com/LulzLoL231/pyCryptoPayAPI/tree/main/examples).\n\n\n## API methods\n* [get_me](#get_me)\n* [create_invoice](#create_invoice)\n* [transfer](#transfer)\n* [get_invoices](#get_invoices)\n* [get_balances](#get_balances)\n* [get_exchange_rates](#get_exchange_rates)\n* [get_currencies](#get_currencies)\n\n### get_me\nA simple method for testing your app's authentication token. Requires no parameters. Returns basic information about the app.  \nReturns: [Application](#schemasapplication) object.\n\n```python\ncp.get_me()\n```\n\n### create_invoice\nUse this method to create a new invoice. Returns object of created invoice.\n\nArguments:\n* **asset** ([Assets](#schemasassets) | `str`) - Currency code. Supported assets: `BTC`, `TON`, `ETH` (only testnet), `USDT`, `USDC`, `BUSD`.\n* **amount** (`float`) - Amount of the invoice in float. For example: `125.50`\n* **description** (`str`) - *Optional*. Description of the invoice. Up to 1024 symbols.\n* **hidden_message** (`str`) - *Optional*. The message will show when the user pays your invoice.\n* **paid_btn_name** ([PaidButtonName](#schemaspaidbuttonname) | `str`) - *Optional*. Paid button name. This button will be shown when your invoice was paid. Supported names:\n\n  * `viewItem` - View Item\n  * `openChannel` - Open Channel\n  * `openBot` - Open Bot\n  * `callback` - Return\n* **paid_btn_url** (`str`) - *Optional but requried when you use paid_btn_name*. Paid button URL. You can set any payment success link (for example link on your bot). Start with https or http.\n* **payload** (`str`, up to 4kb) - *Optional*. Some data. User ID, payment id, or any data you want to attach to the invoice.\n* **allow_comments** (`bool`) - *Optional*. Allow adding comments when paying an invoice. Default is True.\n* **allow_anonymous** (`bool`) - *Optional*. Allow pay invoice as anonymous. Default is True.\n* **expires_in** (`int`) - *Optional*. You can set the expiration date of the invoice in seconds. Use this period: 1-2678400 seconds.\n\nReturns: [Invoice](#schemasinvoice) object of created invoice.\n\n```python\ncp.create_invoice(\n    Assets.USDT, 5.25,\n    description='Example page for $5.25!',\n    paid_btn_name=PaidButtonNames.VIEW_ITEM,\n    paid_btn_url='https://example.com'\n)\n```\n\n### transfer\nUse this method to send coins from your app to the user. Returns object of completed transfer.\n\nArguments:\n* **user_id** (`int`) - Telegram User ID. The user needs to have an account in our bot (send /start if no).\n* **asset** ([Assets](#schemasassets)) - Currency code. Supported assets: `BTC`, `TON`, `ETH` (only testnet), `USDT`, `USDC`, `BUSD`.\n* **amount** (`float`) - Amount of the transfer in float. For example: `125.50`\n* **spend_id** (`str`) - It is used to make your request idempotent. It's guaranteed that only one of the transfers with the same spend_id will be accepted by Crypto Pay API. This parameter is useful when the transfer should be retried (i.e. request timeout/connection reset/500 HTTP status/etc). You can use a withdrawal id or something. Up to 64 symbols.\n* **comment** (`str`) - *Optional*. The comment of the invoice. The comment will show in the notification about the transfer. Up to 1024 symbols.\n\nReturns: [Transfer](#schemastransfer) object of created transfer.\n\n```python\ncp.transfer(265300852, Assets.USDT, 3.0, 'pCBA226ghd', comment='donate')\n```\n\n\n### get_invoice\nUse this method to get invoices of your app. On success, the returns array of [Invoice](#schemasinvoice).\n\nArguments:\n* **asset** ([Assets](#schemasassets)) - *Optional*. Currency code. Supported assets: `BTC`, `TON`, `ETH` (only testnet), `USDT`, `USDC`, `BUSD`. Default: all assets.\n* **invoice_ids** (`str`) - *Optional*. Invoice IDs separated by comma.\n* **status** ([InvoiceStatus](#schemasinvoicestatus)) - *Optional*. Status of invoices. Available statuses: active, paid and expired. Default: all statuses.\n* **offset** (`int`) - *Optional*. Offset needed to return a specific subset of  invoices. Default 0.\n* **count** (`int`) - *Optional*. Number of invoices to return. Default 100, max 1000.\n\nReturns: array of [Invoice](#schemasinvoice) objects.\n\n```python\ncp.get_invoices(\n    schemas.Assets.USDT, status=schemas.InvoiceStatus.PAID, count=10\n)\n```\n\n### get_balance\nUse this method to get balance of your app. Returns array of assets.\n\nReturns: array of [Balance](#schemasbalance) objects.\n\n```python\ncp.get_balance()\n```\n\n### get_exchange_rates\nUse this method to get exchange rates of supported currencies. Returns array of currencies.\n\nReturns: array of [ExchangeRate](#schemasexchangerate) objects.\n\n```python\ncp.get_exchange_rates()\n```\n\n### get_currencies\nUse this method to supported currencies. Returns array of currencies.\n\nReturns: array of [Currency](#schemascurrency) objects.\n\n```python\ncp.get_currencies()\n```\n\n## Constants and schemas\n```python\nfrom CryptoBotAPI import schemas\n```\n\n#### schemas.Asset\nconstant      | value\n------------- | ------\n`Assets.BTC`  | `BTC`\n`Assets.TON`  | `TON`\n`Assets.ETH`  | `ETH`\n`Assets.USDT` | `USDT`\n`Assets.USDC` | `USDC`\n`Assets.BUSD` | `BUSD`\n\n#### schemas.PaidButtonNames\nconstant                       | value\n------------------------------ | -------------\n`PaidButtonNames.VIEW_ITEM`    | `viewItem`\n`PaidButtonNames.OPEN_CHANNEL` | `openChannel`\n`PaidButtonNames.OPEN_BOT`     | `openBot`\n`PaidButtonNames.CALLBACK`     | `callback`\n\n#### schemas.InvoiceStatus\nconstant                | value\n----------------------- | ---------\n`InvoiceStatus.ACTIVE`  | `active`\n`InvoiceStatus.PAID`    | `paid`\n`InvoiceStatus.EXPIRED` | `expired`\n\n#### schemas.Invoice\nkey                | type\n------------------ | ------------------------------------\n`invoice_id`       | `int`\n`status`           | [InvoiceStatus](#schemasinvoicestatus)\n`hash`             | `str`\n`asset`            | [Assets](#schemasassets)\n`amount`           | `decimal.Decimal`\n`pay_url`          | `str`\n`description`      | `Optional[str]`\n`created_at`       | `datetime.datetime`\n`allow_comments`   | `bool`\n`allow_anonymous`  | `bool`\n`expiration_date`  | `Optional[datetime.datetime]`\n`paid_at`          | `Optional[datetime.datetime]`\n`paid_anonymously` | `Optional[bool]`\n`comment`          | `Optional[str]`\n`hidden_message`   | `Optional[str]`\n`payload`          | `Optional[str]`\n`paid_btn_name`    | `Optional[`[PaidButtonNames](#schemaspaidbuttonnames)`]`\n`paid_btn_url`     | `Optional[str]`\n\n#### schemas.Transfer\nkey            | type\n-------------- | -----------------------\n`transfer_id`  | `int`\n`user_id`      | `int`\n`asset`        | [Assets](#schemasassets)\n`amount`       | `decimal.Decimal`\n`status`       | `Literal['completed']`\n`completed_at` | `datetime.datetime`\n`comment`      | `Optional[str]`\n\n#### schemas.Application\nkey                               | type\n--------------------------------- | -----\n`app_id`                          | `int`\n`name`                            | `str`\n`payment_processing_bot_username` | `str`\n\n#### schemas.Balance\nkey             | type\n--------------- | ------------------\n`currency_code` | `str`\n`available`     | `decimal.Decimal `\n\n#### schemas.ExchangeRate\nkey        | type\n---------- | -----------------\n`is_valid` | `bool`\n`source`   | `str`\n`target`   | `str`\n`rate`     | `decimal.Decimal`\n\n#### schemas.Currency\nkey             | type\n--------------- | ------------------\n`is_blockchain` | `bool`\n`is_stablecoin` | `bool`\n`is_fiat`       | `bool`\n`name`          | `str`\n`code`          | `str`\n`url`           | `Optional[str]`\n`decimals`      | `int`\n\n#### schemas.UpdateType\nconstant                  | value\n------------------------- | --------------\n`UpdateType.INVOICE_PAID` | `invoice_paid`\n\n#### schemas.Update\nkey            | type\n-------------- | ------------------------------\n`update_id`    | `int`\n`update_type`  | [UpdateType](#schemasupdatetype)\n`request_date` | `datetime`\n`payload`      | [Invoice](#schemasinvoice)\n",
    'author': 'Maxim Mosin',
    'author_email': 'max@mosin.pw',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/LulzLoL231/pyCryptoPayAPI/',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8.1,<4.0.0',
}


setup(**setup_kwargs)
